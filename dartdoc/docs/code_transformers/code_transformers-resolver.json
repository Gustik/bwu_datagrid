{"name":"code_transformers-resolver","qualifiedName":"code_transformers/code_transformers-resolver","comment":"<p>Tools for working with resolved ASTs from Barback transformers.</p>","variables":{},"functions":{"setters":{},"getters":{"dartSdkDirectory":{"name":"dartSdkDirectory","qualifiedName":"code_transformers/code_transformers-resolver.dartSdkDirectory","comment":"<p>Attempts to provide the current Dart SDK directory.</p>\n<p>This will return null if the SDK cannot be found</p>\n<p>Note that this may not be correct when executing outside of <code>pub</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"isPossibleDartEntry":{"name":"isPossibleDartEntry","qualifiedName":"code_transformers/code_transformers-resolver.isPossibleDartEntry","comment":"<p>Checks to see if the provided Asset is possibly a Dart entry point.</p>\n<p>Assets are considered entry points if they pass <a>code_transformers/code_transformers-resolver.isPossibleDartEntryId</a> and\nhave a main() method.</p>\n<p>Because this only analyzes the primary asset this may return true for files\nwhich are not dart entries if the file does not have a main() but does have\nparts or exports.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"asset":{"name":"asset","optional":false,"named":false,"default":false,"type":[{"outer":"barback-asset.Asset","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isPossibleDartEntryId":{"name":"isPossibleDartEntryId","qualifiedName":"code_transformers/code_transformers-resolver.isPossibleDartEntryId","comment":"<p>Checks to see if the provided AssetId is a Dart file in a directory which\nmay contain entry points.</p>\n<p>Directories are considered entry points if they are Dart files located in\nweb/, test/, benchmark/ or example/.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"barback-asset_id.AssetId","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Resolver","qualifiedName":"code_transformers/code_transformers-resolver.Resolver","preview":"<p>Class for working with a barback based resolved AST.</p>"},{"name":"ResolverTransformer","qualifiedName":"code_transformers/code_transformers-resolver.ResolverTransformer","preview":"<p>Transformer mixin which automatically gets and releases resolvers.</p>"},{"name":"Resolvers","qualifiedName":"code_transformers/code_transformers-resolver.Resolvers","preview":"<p>Barback-based code resolvers which maintains up-to-date resolved ASTs for\nthe specified code entry points.</p>"}],"typedef":{},"error":[]},"packageName":"code_transformers","packageIntro":""}