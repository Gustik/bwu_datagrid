{"name":"Resolver","qualifiedName":"code_transformers/code_transformers-resolver.Resolver","comment":"<p>Class for working with a barback based resolved AST.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"libraries":{"name":"libraries","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.libraries","comment":"<p>Gets all libraries accessible from the entry point, recursively.</p>\n<p>This includes all Dart SDK libraries as well.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"engine-element.LibraryElement","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"createTextEditTransaction":{"name":"createTextEditTransaction","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.createTextEditTransaction","comment":"<p>Creates a text edit transaction for the given element if it is able\nto be edited, returns null otherwise.</p>\n<p>The transaction contains the entire text of the source file where the\nelement originated. If the element was from a library part then the\nsource file is the part file rather than the library.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"source_maps-refactor.TextEditTransaction","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"engine-element.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"evaluateConstant":{"name":"evaluateConstant","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.evaluateConstant","comment":"<p>Gets the result of evaluating the constant <a>code_transformers/code_transformers-resolver.Resolver.evaluateConstant.expression</a> in the context of\na <a>code_transformers/code_transformers-resolver.Resolver.evaluateConstant.library</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"engine-constant.EvaluationResult","inner":[]}],"parameters":{"library":{"name":"library","optional":false,"named":false,"default":false,"type":[{"outer":"engine-element.LibraryElement","inner":[]}],"value":null,"annotations":[]},"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"engine-ast.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getImportUri":{"name":"getImportUri","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getImportUri","comment":"<p>Gets an URI appropriate for importing the specified library.</p>\n<p>Returns null if the library cannot be imported via an absolute URI or\nfrom <a>code_transformers/code_transformers-resolver.Resolver.getImportUri.from</a> (if provided).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"lib":{"name":"lib","optional":false,"named":false,"default":false,"type":[{"outer":"engine-element.LibraryElement","inner":[]}],"value":null,"annotations":[]},"from":{"name":"from","optional":true,"named":true,"default":false,"type":[{"outer":"barback-asset_id.AssetId","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLibrary":{"name":"getLibrary","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getLibrary","comment":"<p>Gets the resolved Dart library for an asset, or null if the AST has not\nbeen resolved.</p>\n<p>If the AST has not been resolved then this normally means that the\ntransformer hosting this needs to be in an earlier phase.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"engine-element.LibraryElement","inner":[]}],"parameters":{"assetId":{"name":"assetId","optional":false,"named":false,"default":false,"type":[{"outer":"barback-asset_id.AssetId","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLibraryByName":{"name":"getLibraryByName","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getLibraryByName","comment":"<p>Finds the first library identified by <a>code_transformers/code_transformers-resolver.Resolver.getLibraryByName.libraryName</a>, or null if no\nlibrary can be found.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"engine-element.LibraryElement","inner":[]}],"parameters":{"libraryName":{"name":"libraryName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLibraryByUri":{"name":"getLibraryByUri","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getLibraryByUri","comment":"<p>Finds the first library identified by libraryName, or null if no\nlibrary can be found.</p>\n<p><a>code_transformers/code_transformers-resolver.Resolver.getLibraryByUri.uri</a> must be an absolute URI of the form\n<code>[dart:|package:]path/file.dart</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"engine-element.LibraryElement","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLibraryFunction":{"name":"getLibraryFunction","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getLibraryFunction","comment":"<p>Resolves a fully-qualified top-level library function\n(library_name.functionName).</p>\n<p>This will resolve the first instance of <a>code_transformers/code_transformers-resolver.Resolver.getLibraryFunction.functionName</a>, because of\npotential library name conflicts the name is not guaranteed to be unique.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"engine-element.Element","inner":[]}],"parameters":{"functionName":{"name":"functionName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLibraryVariable":{"name":"getLibraryVariable","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getLibraryVariable","comment":"<p>Resolves a fully-qualified top-level library variable\n(library_name.variableName).</p>\n<p>This will resolve the first instance of <a>code_transformers/code_transformers-resolver.Resolver.getLibraryVariable.variableName</a>, because of\npotential library name conflicts the name is not guaranteed to be unique.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"engine-element.Element","inner":[]}],"parameters":{"variableName":{"name":"variableName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getSourceAssetId":{"name":"getSourceAssetId","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getSourceAssetId","comment":"<p>Get the asset ID of the file containing the asset.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"barback-asset_id.AssetId","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"engine-element.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getSourceFile":{"name":"getSourceFile","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getSourceFile","comment":"<p>Get a <a>code_transformers/source_maps-span.SourceFile</a> with the contents of the file that defines <a>code_transformers/code_transformers-resolver.Resolver.getSourceFile.element</a>,\nor null if the element came from the Dart SDK.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"source_maps-span.SourceFile","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"engine-element.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getSourceSpan":{"name":"getSourceSpan","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getSourceSpan","comment":"<p>Get the source span where the specified element was defined or null if\nthe element came from the Dart SDK.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"source_maps-span.Span","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"engine-element.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getType":{"name":"getType","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.getType","comment":"<p>Resolves a fully-qualified type name (library_name.ClassName).</p>\n<p>This will resolve the first instance of <a>code_transformers/code_transformers-resolver.Resolver.getType.typeName</a>, because of potential\nlibrary name conflicts the name is not guaranteed to be unique.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"engine-element.ClassElement","inner":[]}],"parameters":{"typeName":{"name":"typeName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"release":{"name":"release","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.release","comment":"<p>Release this resolver so it can be updated by following transforms.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"resolve":{"name":"resolve","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.resolve","comment":"<p>Update the status of all the sources referenced by the entry points and\nupdate the resolved library. If <a>code_transformers/code_transformers-resolver.Resolver.resolve.entryPoints</a> is omitted, the primary\nasset of <a>code_transformers/code_transformers-resolver.Resolver.resolve.transform</a> is used as the only entry point.</p>\n<p><a>code_transformers/code_transformers-resolver.Resolver.release</a> must be called when done handling this Resolver to allow it\nto be used by later phases.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"code_transformers/code_transformers-resolver.Resolver","inner":[]}]}],"parameters":{"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"barback-transform.Transform","inner":[]}],"value":null,"annotations":[]},"entryPoints":{"name":"entryPoints","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"barback-asset_id.AssetId","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>code_transformers/code_transformers-resolver.Resolver.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>code_transformers/code_transformers-resolver.Resolver.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>code_transformers/code_transformers-resolver.Resolver.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.noSuchMethod","comment":"<p><a>code_transformers/code_transformers-resolver.Resolver.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>code_transformers/code_transformers-resolver.Resolver.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>code_transformers/code_transformers-resolver.Resolver.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>code_transformers/code_transformers-resolver.Resolver.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"code_transformers/code_transformers-resolver.Resolver.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}