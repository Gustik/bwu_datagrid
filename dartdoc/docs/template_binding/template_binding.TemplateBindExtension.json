{"name":"TemplateBindExtension","qualifiedName":"template_binding/template_binding.TemplateBindExtension","comment":"<p>Extensions to <a>template_binding/dart-dom-html.Element</a>s that behave as templates.</p>","isAbstract":false,"superclass":"template_binding/template_binding.NodeBindExtension","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"bindingDelegate=":{"name":"bindingDelegate=","qualifiedName":"template_binding/template_binding.TemplateBindExtension.bindingDelegate=","comment":"","commentFrom":"template_binding.TemplateBindExtension.bindingDelegate=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"template_binding/template_binding.BindingDelegate","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"model=":{"name":"model=","qualifiedName":"template_binding/template_binding.TemplateBindExtension.model=","comment":"","commentFrom":"template_binding.TemplateBindExtension.model=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"bindingDelegate":{"name":"bindingDelegate","qualifiedName":"template_binding/template_binding.TemplateBindExtension.bindingDelegate","comment":"<p>The binding delegate which is inherited through the tree. It can be used\nto configure custom syntax for <code>{{bindings}}</code> inside this template.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding/template_binding.BindingDelegate","inner":[]}],"parameters":{},"annotations":[]},"content":{"name":"content","qualifiedName":"template_binding/template_binding.TemplateBindExtension.content","comment":"<p>Gets the content of this template.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.DocumentFragment","inner":[]}],"parameters":{},"annotations":[]},"model":{"name":"model","qualifiedName":"template_binding/template_binding.TemplateBindExtension.model","comment":"<p>The data model which is inherited through the tree.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"ref":{"name":"ref","qualifiedName":"template_binding/template_binding.TemplateBindExtension.ref","comment":"<p>Gets the template this node refers to.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"bootstrap":{"name":"bootstrap","qualifiedName":"template_binding/template_binding.TemplateBindExtension.bootstrap","comment":"<p>This used to decorate recursively all templates from a given node.</p>\n<p>By default <a>template_binding/template_binding.TemplateBindExtension.decorate</a> will be called on templates lazily when certain\nproperties such as <a>template_binding/template_binding.TemplateBindExtension.model</a> are accessed, but it can be run eagerly to\ndecorate an entire tree recursively.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"content":{"name":"content","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"createInstance":{"name":"createInstance","qualifiedName":"template_binding/template_binding.TemplateBindExtension.createInstance","comment":"<p>Creates an instance of the template, using the provided <a>template_binding/template_binding.TemplateBindExtension.createInstance.model</a> and\noptional binding <a>template_binding/template_binding.TemplateBindExtension.createInstance.delegate</a>.</p>\n<p>If <a>template_binding/template_binding.TemplateBindExtension.createInstance.instanceBindings</a> is supplied, each <a>template_binding/template_binding.Bindable</a> in the returned\ninstance will be added to the list. This makes it easy to close all of the\nbindings without walking the tree. This is not normally necesssary, but is\nused internally by the system.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.DocumentFragment","inner":[]}],"parameters":{"model":{"name":"model","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"delegate":{"name":"delegate","optional":true,"named":false,"default":false,"type":[{"outer":"template_binding/template_binding.BindingDelegate","inner":[]}],"value":null,"annotations":[]},"instanceBindings":{"name":"instanceBindings","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"template_binding/template_binding.Bindable","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"decorate":{"name":"decorate","qualifiedName":"template_binding/template_binding.TemplateBindExtension.decorate","comment":"<p>Ensures proper API and content model for template elements.</p>\n<p><a>template_binding/template_binding.TemplateBindExtension.decorate.instanceRef</a> can be used to set the Element.ref property of <a>template_binding/template_binding.TemplateBindExtension.decorate.template</a>,\nand use the ref's content will be used as source when createInstance() is\ninvoked.</p>\n<p>Returns true if this template was just decorated, or false if it was\nalready decorated.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]},"instanceRef":{"name":"instanceRef","optional":true,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"bindings":{"name":"bindings","qualifiedName":"template_binding/template_binding.TemplateBindExtension.bindings","comment":"<p>Gets the data bindings that are associated with this node.</p>","commentFrom":"","inheritedFrom":"template_binding.NodeBindExtension.bindings","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"template_binding/template_binding.Bindable","inner":[]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"template_binding/template_binding.TemplateBindExtension.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>template_binding/template_binding.TemplateBindExtension.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"template_binding/template_binding.TemplateBindExtension.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"templateInstance":{"name":"templateInstance","qualifiedName":"template_binding/template_binding.TemplateBindExtension.templateInstance","comment":"<p>Gets the template instance that instantiated this node, if any.</p>","commentFrom":"","inheritedFrom":"template_binding.NodeBindExtension.templateInstance","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding/template_binding.TemplateInstance","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"template_binding/template_binding.TemplateBindExtension.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>template_binding/template_binding.TemplateBindExtension.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>template_binding/template_binding.TemplateBindExtension.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"bind":{"name":"bind","qualifiedName":"template_binding/template_binding.TemplateBindExtension.bind","comment":"<p>Binds the attribute <a>template_binding/template_binding.TemplateBindExtension.bind.name</a> to the path of the <a>template_binding/template_binding.TemplateBindExtension.model</a>.\nPath is a String of accessors such as <code>foo.bar.baz</code>.\nReturns the <code>Bindable</code> instance.</p>","commentFrom":"polymer-polymer_element.NodeBindExtension.bind","inheritedFrom":"template_binding._ElementExtension.bind","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"oneTime":{"name":"oneTime","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"template_binding/template_binding.TemplateBindExtension.noSuchMethod","comment":"<p><a>template_binding/template_binding.TemplateBindExtension.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>template_binding/template_binding.TemplateBindExtension.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>template_binding/template_binding.TemplateBindExtension.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>template_binding/template_binding.TemplateBindExtension.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"template_binding/template_binding.TemplateBindExtension.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"unbind":{"name":"unbind","qualifiedName":"template_binding/template_binding.TemplateBindExtension.unbind","comment":"<p>Unbinds the attribute <a>template_binding/template_binding.TemplateBindExtension.unbind.name</a>.</p>","commentFrom":"","inheritedFrom":"template_binding.NodeBindExtension.unbind","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"unbindAll":{"name":"unbindAll","qualifiedName":"template_binding/template_binding.TemplateBindExtension.unbindAll","comment":"<p>Unbinds all bound attributes.</p>","commentFrom":"","inheritedFrom":"template_binding.NodeBindExtension.unbindAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}