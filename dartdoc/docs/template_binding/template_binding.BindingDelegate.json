{"name":"BindingDelegate","qualifiedName":"template_binding/template_binding.BindingDelegate","comment":"<p>Template Bindings native features enables a wide-range of use cases,\nbut (by design) don't attempt to implement a wide array of specialized\nbehaviors.</p>\n<p>Enabling these features is a matter of implementing and registering a\nBindingDelegate. A binding delegate is an object which contains one or more\ndelegation functions which implement specialized behavior. This object is\nregistered via <a>template_binding/template_binding.TemplateBindExtension.bindingDelegate</a>:</p>\n<p>HTML:</p>\n<pre><code>&lt;template bind&gt;\n  {{ What!Ever('crazy')-&gt;thing^^^I+Want(data) }}\n&lt;/template&gt;\n</code></pre>\n<p>Dart:</p>\n<pre><code>class MySyntax extends BindingDelegate {\n  prepareBinding(path, name, node) {\n    // The magic happens here!\n  }\n}\n...\ntemplateBind(query('template'))\n    ..bindingDelegate = new MySyntax()\n    ..model = new MyModel();\n</code></pre>\n<p>See\n<a href=\"http://www.polymer-project.org/platform/template.html#binding-delegate-api\">http://www.polymer-project.org/platform/template.html#binding-delegate-api</a>\nfor more information about the binding delegate.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"prepareBinding":{"name":"prepareBinding","qualifiedName":"template_binding/template_binding.BindingDelegate.prepareBinding","comment":"<p>Prepares a binding. This is called immediately after parsing a mustache\ntoken with <code>{{ path }}</code> in the context of the <a>template_binding/template_binding.BindingDelegate.prepareBinding.node</a> and the property named\n<a>template_binding/template_binding.BindingDelegate.prepareBinding.name</a>. This should return a function that will be passed the actual\nnode and model, and either returns null or an object with a <code>value</code>\nproperty. This allows the syntax to reinterpret the model for each binding.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding/template_binding.PrepareBindingFunction","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"prepareInstanceModel":{"name":"prepareInstanceModel","qualifiedName":"template_binding/template_binding.BindingDelegate.prepareInstanceModel","comment":"<p>Returns a function that can optionally replace the model that will be\npassed to <a>template_binding/template_binding.TemplateBindExtension.createInstance</a>. This can be used to\nimplement syntax such as <code>&lt;template repeat=\"{{ item in items }}\"&gt;</code> by\nensuring that the returned model has the \"item\" name available.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding/template_binding.PrepareInstanceModelFunction","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"prepareInstancePositionChanged":{"name":"prepareInstancePositionChanged","qualifiedName":"template_binding/template_binding.BindingDelegate.prepareInstancePositionChanged","comment":"<p>Returns a function that will be called whenever the position of an item\ninside this template changes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding/template_binding.PrepareInstancePositionChangedFunction","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"template_binding/template_binding.BindingDelegate.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>template_binding/template_binding.BindingDelegate.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"template_binding/template_binding.BindingDelegate.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"template_binding/template_binding.BindingDelegate.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>template_binding/template_binding.BindingDelegate.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>template_binding/template_binding.BindingDelegate.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"template_binding/template_binding.BindingDelegate.noSuchMethod","comment":"<p><a>template_binding/template_binding.BindingDelegate.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>template_binding/template_binding.BindingDelegate.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>template_binding/template_binding.BindingDelegate.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>template_binding/template_binding.BindingDelegate.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"template_binding/template_binding.BindingDelegate.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}