{"name":"QueryOptions","qualifiedName":"smoke/smoke.QueryOptions","comment":"<p>Establishes the parameters for <a>smoke/smoke.query</a> to search for symbols in a type\nhierarchy. For now only public instance symbols can be queried (no private,\nno static).</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"excludeFinal":{"name":"excludeFinal","qualifiedName":"smoke/smoke.QueryOptions.excludeFinal","comment":"<p>Whether to include final fields and getter-only properties.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"includeFields":{"name":"includeFields","qualifiedName":"smoke/smoke.QueryOptions.includeFields","comment":"<p>Whether to include fields (default is true).</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"includeInherited":{"name":"includeInherited","qualifiedName":"smoke/smoke.QueryOptions.includeInherited","comment":"<p>Whether to include symbols from the given type and its superclasses\n(except <a>dart-core.Object</a>).</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"includeMethods":{"name":"includeMethods","qualifiedName":"smoke/smoke.QueryOptions.includeMethods","comment":"<p>Whether to include methods (default is false).</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"includeProperties":{"name":"includeProperties","qualifiedName":"smoke/smoke.QueryOptions.includeProperties","comment":"<p>Whether to include getters and setters (default is true). Note that to\ninclude fields you also need to enable <a>smoke/smoke.QueryOptions.includeFields</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"includeUpTo":{"name":"includeUpTo","qualifiedName":"smoke/smoke.QueryOptions.includeUpTo","comment":"<p>If <a>smoke/smoke.QueryOptions.includeInherited</a>, walk up the type hierarchy up to this type\n(defaults to <a>dart-core.Object</a>).</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Type","inner":[]}],"annotations":[]},"matches":{"name":"matches","qualifiedName":"smoke/smoke.QueryOptions.matches","comment":"<p>If <a>smoke/smoke.QueryOptions.matches</a> is not null, then include only those fields, properties, or\nmethods that match the predicate.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"smoke/smoke.NameMatcher","inner":[]}],"annotations":[]},"withAnnotations":{"name":"withAnnotations","qualifiedName":"smoke/smoke.QueryOptions.withAnnotations","comment":"<p>If withAnnotation is not null, then it should be a list of types, so\nonly symbols that are annotated with instances of those types are\nincluded.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"smoke/smoke.QueryOptions.QueryOptions-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"includeFields":{"name":"includeFields","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"includeProperties":{"name":"includeProperties","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"includeInherited":{"name":"includeInherited","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"includeUpTo":{"name":"includeUpTo","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.Type","inner":[]}],"value":"TypeConstant(Instance of 'InterfaceType')","annotations":[]},"excludeFinal":{"name":"excludeFinal","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"includeMethods":{"name":"includeMethods","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"withAnnotations":{"name":"withAnnotations","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]},"matches":{"name":"matches","optional":true,"named":true,"default":true,"type":[{"outer":"smoke/smoke.NameMatcher","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"toString":{"name":"toString","qualifiedName":"smoke/smoke.QueryOptions.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"smoke/smoke.QueryOptions.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>smoke/smoke.QueryOptions.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"smoke/smoke.QueryOptions.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"smoke/smoke.QueryOptions.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>smoke/smoke.QueryOptions.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>smoke/smoke.QueryOptions.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"smoke/smoke.QueryOptions.noSuchMethod","comment":"<p><a>smoke/smoke.QueryOptions.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>smoke/smoke.QueryOptions.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>smoke/smoke.QueryOptions.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>smoke/smoke.QueryOptions.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"smoke/smoke.QueryOptions.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}