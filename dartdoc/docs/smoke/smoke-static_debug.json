{"name":"smoke-static_debug","qualifiedName":"smoke/smoke-static_debug","comment":"<p>Static implementation of smoke services that uses code-generated data and\nverifies that the results match what we would get with a mirror-based\nimplementation.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"useGeneratedCode":{"name":"useGeneratedCode","qualifiedName":"smoke/smoke-static_debug.useGeneratedCode","comment":"<p>Set up the smoke package to use a static implementation based on the given\n<a>smoke/smoke-static_debug.useGeneratedCode.configuration</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"configuration":{"name":"configuration","optional":false,"named":false,"default":false,"type":[{"outer":"smoke/smoke-static_debug.StaticConfiguration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"StaticConfiguration","qualifiedName":"smoke/smoke-static_debug.StaticConfiguration"}],"typedef":{"Getter":{"name":"Getter","qualifiedName":"smoke/smoke-static_debug.Getter","comment":"","return":"smoke-static.Getter.T","parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}},"Setter":{"name":"Setter","qualifiedName":"smoke/smoke-static_debug.Setter","comment":"","return":"void","parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}},"error":[]},"packageName":"smoke","packageIntro":"<h1>Smoke (and mirrors)</h1>\n<p>Smoke is a package that exposes a reduced reflective system API. This API\nincludes accessing objects in a dynamic fashion (read properties, write\nproperties, and call methods), inspecting types (for example, whether a\nmethod exists), and symbol/string convertion.</p>\n<p>The package provides a default implementation of this API that uses the system's\nmirrors, but additionally provides mechanisms for statically generating code\nthat can replace the mirror-based implementation.</p>\n<p>The intention of this package is to allow frameworks to use mirrors in a way\nthat will not impose on their users. The idea is that users will not worry about\nhow to preserve symbols when compiling with dart2js (for instance, using the\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-mirrors.MirrorsUsed\">MirrorsUsed</a> annotation). Instead, this package provides the building\nblocks to autogenerate whatever is needed for dart2js to be happy and to\ngenerate reasonable code.</p>\n<p>Note this package alone doesn't know how to generate everything, but it provides\na simple API that different frameworks can use to define what needs to be\ngenerated.</p>\n<h1>Smoke reflective API</h1>\n<p>Use <code>package:smoke/smoke.dart</code> in your framework to read and write objects and\nto inspect type information. Read the Dart-docs for more details.</p>\n<h1>Code Generation</h1>\n<p>TBD. We envision we'll have a base transformer class that can be tailored to\ncreate a transformer for your framework.</p>"}