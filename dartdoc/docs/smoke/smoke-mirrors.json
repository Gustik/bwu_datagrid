{"name":"smoke-mirrors","qualifiedName":"smoke/smoke-mirrors","comment":"<p>Implementation of the smoke services using mirrors.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"useMirrors":{"name":"useMirrors","qualifiedName":"smoke/smoke-mirrors.useMirrors","comment":"<p>Set up the smoke package to use a mirror-based implementation. To tune what\nis preserved by <code>dart:mirrors</code>, use a @MirrorsUsed annotation and include\n'smoke.mirrors' in your override arguments.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}}},"classes":{"class":[{"name":"ReflectiveObjectAccessorService","qualifiedName":"smoke/smoke-mirrors.ReflectiveObjectAccessorService","preview":"<p>Implements <a>smoke/smoke.ObjectAccessorService</a> using mirrors.</p>"},{"name":"ReflectiveSymbolConverterService","qualifiedName":"smoke/smoke-mirrors.ReflectiveSymbolConverterService","preview":"<p>Implements <a>smoke/smoke.SymbolConverterService</a> using mirrors.</p>"},{"name":"ReflectiveTypeInspectorService","qualifiedName":"smoke/smoke-mirrors.ReflectiveTypeInspectorService","preview":"<p>Implements <a>smoke/smoke.TypeInspectorService</a> using mirrors.</p>"}],"typedef":{},"error":[]},"packageName":"smoke","packageIntro":"<h1>Smoke (and mirrors)</h1>\n<p>Smoke is a package that exposes a reduced reflective system API. This API\nincludes accessing objects in a dynamic fashion (read properties, write\nproperties, and call methods), inspecting types (for example, whether a\nmethod exists), and symbol/string convertion.</p>\n<p>The package provides a default implementation of this API that uses the system's\nmirrors, but additionally provides mechanisms for statically generating code\nthat can replace the mirror-based implementation.</p>\n<p>The intention of this package is to allow frameworks to use mirrors in a way\nthat will not impose on their users. The idea is that users will not worry about\nhow to preserve symbols when compiling with dart2js (for instance, using the\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-mirrors.MirrorsUsed\">MirrorsUsed</a> annotation). Instead, this package provides the building\nblocks to autogenerate whatever is needed for dart2js to be happy and to\ngenerate reasonable code.</p>\n<p>Note this package alone doesn't know how to generate everything, but it provides\na simple API that different frameworks can use to define what needs to be\ngenerated.</p>\n<h1>Smoke reflective API</h1>\n<p>Use <code>package:smoke/smoke.dart</code> in your framework to read and write objects and\nto inspect type information. Read the Dart-docs for more details.</p>\n<h1>Code Generation</h1>\n<p>TBD. We envision we'll have a base transformer class that can be tailored to\ncreate a transformer for your framework.</p>"}