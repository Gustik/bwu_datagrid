{"name":"PolymerDeclaration","qualifiedName":"polymer/polymer.PolymerDeclaration","comment":"<p><em>Warning</em> this class is experimental and subject to change.</p>\n<p>The data associated with a polymer-element declaration, if it is backed\nby a Dart class instead of a JavaScript prototype.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"element":{"name":"element","qualifiedName":"polymer/polymer.PolymerDeclaration.element","comment":"<p>The polymer-element for this declaration.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"polymer/polymer.HtmlElement","inner":[]}],"annotations":[]},"name":{"name":"name","qualifiedName":"polymer/polymer.PolymerDeclaration.name","comment":"<p>The name of the custom element.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"superDeclaration":{"name":"superDeclaration","qualifiedName":"polymer/polymer.PolymerDeclaration.superDeclaration","comment":"<p>If we extend another custom element, this points to the super declaration.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"polymer/polymer.PolymerDeclaration","inner":[]}],"annotations":[]},"type":{"name":"type","qualifiedName":"polymer/polymer.PolymerDeclaration.type","comment":"<p>The Dart type corresponding to this custom element declaration.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Type","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"extendee":{"name":"extendee","qualifiedName":"polymer/polymer.PolymerDeclaration.extendee","comment":"","commentFrom":"polymer.PolymerDeclaration.extendee","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"publishedProperties":{"name":"publishedProperties","qualifiedName":"polymer/polymer.PolymerDeclaration.publishedProperties","comment":"<p>The names of published properties for this polymer-element.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"sheets":{"name":"sheets","qualifiedName":"polymer/polymer.PolymerDeclaration.sheets","comment":"","commentFrom":"polymer.PolymerDeclaration.sheets","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"polymer/polymer.Element","inner":[]}]}],"parameters":{},"annotations":[]},"styles":{"name":"styles","qualifiedName":"polymer/polymer.PolymerDeclaration.styles","comment":"","commentFrom":"polymer.PolymerDeclaration.styles","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"polymer/polymer.Element","inner":[]}]}],"parameters":{},"annotations":[]},"templateContent":{"name":"templateContent","qualifiedName":"polymer/polymer.PolymerDeclaration.templateContent","comment":"","commentFrom":"polymer.PolymerDeclaration.templateContent","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.DocumentFragment","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"polymer/polymer.PolymerDeclaration.PolymerDeclaration-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"polymer/polymer.HtmlElement","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"superDeclaration":{"name":"superDeclaration","optional":false,"named":false,"default":false,"type":[{"outer":"polymer/polymer.PolymerDeclaration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"accumulateInstanceAttributes":{"name":"accumulateInstanceAttributes","qualifiedName":"polymer/polymer.PolymerDeclaration.accumulateInstanceAttributes","comment":"","commentFrom":"polymer.PolymerDeclaration.accumulateInstanceAttributes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addAttributeDelegates":{"name":"addAttributeDelegates","qualifiedName":"polymer/polymer.PolymerDeclaration.addAttributeDelegates","comment":"","commentFrom":"polymer.PolymerDeclaration.addAttributeDelegates","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"delegates":{"name":"delegates","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"adjustShadowElement":{"name":"adjustShadowElement","qualifiedName":"polymer/polymer.PolymerDeclaration.adjustShadowElement","comment":"","commentFrom":"polymer.PolymerDeclaration.adjustShadowElement","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"buildType":{"name":"buildType","qualifiedName":"polymer/polymer.PolymerDeclaration.buildType","comment":"<p>Gets the Dart type registered for this name, and sets up declarative\nfeatures. Fills in the <a>polymer/polymer.PolymerDeclaration.type</a> and supertype fields.</p>\n<p><em>Note</em>: unlike the JavaScript version, we do not have to metaprogram the\nprototype, which simplifies this method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"cacheSheets":{"name":"cacheSheets","qualifiedName":"polymer/polymer.PolymerDeclaration.cacheSheets","comment":"","commentFrom":"polymer.PolymerDeclaration.cacheSheets","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"cacheStyles":{"name":"cacheStyles","qualifiedName":"polymer/polymer.PolymerDeclaration.cacheStyles","comment":"","commentFrom":"polymer.PolymerDeclaration.cacheStyles","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"cssTextForScope":{"name":"cssTextForScope","qualifiedName":"polymer/polymer.PolymerDeclaration.cssTextForScope","comment":"","commentFrom":"polymer.PolymerDeclaration.cssTextForScope","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"scopeDescriptor":{"name":"scopeDescriptor","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"cssTextToScopeStyle":{"name":"cssTextToScopeStyle","qualifiedName":"polymer/polymer.PolymerDeclaration.cssTextToScopeStyle","comment":"","commentFrom":"polymer.PolymerDeclaration.cssTextToScopeStyle","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.StyleElement","inner":[]}],"parameters":{"cssText":{"name":"cssText","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"scopeDescriptor":{"name":"scopeDescriptor","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"desugar":{"name":"desugar","qualifiedName":"polymer/polymer.PolymerDeclaration.desugar","comment":"<p>Implement various declarative features.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"explodeObservers":{"name":"explodeObservers","qualifiedName":"polymer/polymer.PolymerDeclaration.explodeObservers","comment":"<p>Fetch a list of all methods annotated with <a>polymer/polymer.ObserveProperty</a> so we can\nobserve the associated properties.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"findNodes":{"name":"findNodes","qualifiedName":"polymer/polymer.PolymerDeclaration.findNodes","comment":"","commentFrom":"polymer.PolymerDeclaration.findNodes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"polymer/polymer.Element","inner":[]}]}],"parameters":{"selector":{"name":"selector","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"matcher":{"name":"matcher","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"polymer/polymer.Element","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"inferObservers":{"name":"inferObservers","qualifiedName":"polymer/polymer.PolymerDeclaration.inferObservers","comment":"<p>Fetch a list of all *Changed methods so we can observe the associated\nproperties.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"installGlobalStyles":{"name":"installGlobalStyles","qualifiedName":"polymer/polymer.PolymerDeclaration.installGlobalStyles","comment":"<p>Promotes external stylesheets and style elements with the attribute\npolymer-scope='global' into global scope.\nThis is particularly useful for defining @keyframe rules which\ncurrently do not function in scoped or shadow style elements.\n(See wkb.ug/72462)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"installLocalSheets":{"name":"installLocalSheets","qualifiedName":"polymer/polymer.PolymerDeclaration.installLocalSheets","comment":"<p>Takes external stylesheets loaded in an <code>&lt;element&gt;</code> element and moves\ntheir content into a style element inside the <code>&lt;element&gt;</code>'s template.\nThe sheet is then removed from the <code>&lt;element&gt;</code>. This is done only so\nthat if the element is loaded in the main document, the sheet does\nnot become active.\nNote, ignores sheets with the attribute 'polymer-scope'.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"installSheets":{"name":"installSheets","qualifiedName":"polymer/polymer.PolymerDeclaration.installSheets","comment":"<p>Install external stylesheets loaded in &lt;element> elements into the\nelement's template.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"isInstanceAttribute":{"name":"isInstanceAttribute","qualifiedName":"polymer/polymer.PolymerDeclaration.isInstanceAttribute","comment":"","commentFrom":"polymer.PolymerDeclaration.isInstanceAttribute","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseHostEvents":{"name":"parseHostEvents","qualifiedName":"polymer/polymer.PolymerDeclaration.parseHostEvents","comment":"<p>Extracts events from the element tag attributes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"publishAttributes":{"name":"publishAttributes","qualifiedName":"polymer/polymer.PolymerDeclaration.publishAttributes","comment":"","commentFrom":"polymer.PolymerDeclaration.publishAttributes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"superDecl":{"name":"superDecl","optional":false,"named":false,"default":false,"type":[{"outer":"polymer/polymer.PolymerDeclaration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"publishProperties":{"name":"publishProperties","qualifiedName":"polymer/polymer.PolymerDeclaration.publishProperties","comment":"","commentFrom":"polymer.PolymerDeclaration.publishProperties","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"register":{"name":"register","qualifiedName":"polymer/polymer.PolymerDeclaration.register","comment":"","commentFrom":"polymer.PolymerDeclaration.register","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"registerType":{"name":"registerType","qualifiedName":"polymer/polymer.PolymerDeclaration.registerType","comment":"","commentFrom":"polymer.PolymerDeclaration.registerType","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"styleForScope":{"name":"styleForScope","qualifiedName":"polymer/polymer.PolymerDeclaration.styleForScope","comment":"","commentFrom":"polymer.PolymerDeclaration.styleForScope","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.StyleElement","inner":[]}],"parameters":{"scopeDescriptor":{"name":"scopeDescriptor","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"urlToPath":{"name":"urlToPath","qualifiedName":"polymer/polymer.PolymerDeclaration.urlToPath","comment":"","commentFrom":"polymer.PolymerDeclaration.urlToPath","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"polymer/polymer.PolymerDeclaration.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>polymer/polymer.PolymerDeclaration.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"polymer/polymer.PolymerDeclaration.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"polymer/polymer.PolymerDeclaration.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>polymer/polymer.PolymerDeclaration.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>polymer/polymer.PolymerDeclaration.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"polymer/polymer.PolymerDeclaration.noSuchMethod","comment":"<p><a>polymer/polymer.PolymerDeclaration.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>polymer/polymer.PolymerDeclaration.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>polymer/polymer.PolymerDeclaration.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>polymer/polymer.PolymerDeclaration.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"polymer/polymer.PolymerDeclaration.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}