{"name":"CommandLineOptions","qualifiedName":"polymer/polymer-builder.CommandLineOptions","comment":"<p>Options that may be used either in build.dart or by the linter and deploy\ntools.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"changedFiles":{"name":"changedFiles","qualifiedName":"polymer/polymer-builder.CommandLineOptions.changedFiles","comment":"<p>Files marked as changed.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"clean":{"name":"clean","qualifiedName":"polymer/polymer-builder.CommandLineOptions.clean","comment":"<p>Whether to clean intermediate artifacts, if any.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"contentSecurityPolicy":{"name":"contentSecurityPolicy","qualifiedName":"polymer/polymer-builder.CommandLineOptions.contentSecurityPolicy","comment":"<p>True to use the CSP-compliant JS file.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"directlyIncludeJS":{"name":"directlyIncludeJS","qualifiedName":"polymer/polymer-builder.CommandLineOptions.directlyIncludeJS","comment":"<p>True to include the JS script tag directly, without the\n\"packages/browser/dart.js\" trampoline.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"forceDeploy":{"name":"forceDeploy","qualifiedName":"polymer/polymer-builder.CommandLineOptions.forceDeploy","comment":"<p>Whether the force deploy option was passed in the command line.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"full":{"name":"full","qualifiedName":"polymer/polymer-builder.CommandLineOptions.full","comment":"<p>Whether to do a full build (as if all files have changed).</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"machineFormat":{"name":"machineFormat","qualifiedName":"polymer/polymer-builder.CommandLineOptions.machineFormat","comment":"<p>Whether to print results using a machine parseable format.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"outDir":{"name":"outDir","qualifiedName":"polymer/polymer-builder.CommandLineOptions.outDir","comment":"<p>Location where to generate output files.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"releaseMode":{"name":"releaseMode","qualifiedName":"polymer/polymer-builder.CommandLineOptions.releaseMode","comment":"<p>Run transformers in release mode. For instance, uses the minified versions\nof the web_components polyfill.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"removedFiles":{"name":"removedFiles","qualifiedName":"polymer/polymer-builder.CommandLineOptions.removedFiles","comment":"<p>Files marked as removed.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"polymer/polymer-builder.CommandLineOptions.CommandLineOptions-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"changedFiles":{"name":"changedFiles","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"removedFiles":{"name":"removedFiles","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"clean":{"name":"clean","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"full":{"name":"full","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"machineFormat":{"name":"machineFormat","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"forceDeploy":{"name":"forceDeploy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"outDir":{"name":"outDir","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"directlyIncludeJS":{"name":"directlyIncludeJS","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"contentSecurityPolicy":{"name":"contentSecurityPolicy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"releaseMode":{"name":"releaseMode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"polymer/polymer-builder.CommandLineOptions.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>polymer/polymer-builder.CommandLineOptions.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"polymer/polymer-builder.CommandLineOptions.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"polymer/polymer-builder.CommandLineOptions.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>polymer/polymer-builder.CommandLineOptions.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>polymer/polymer-builder.CommandLineOptions.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"polymer/polymer-builder.CommandLineOptions.noSuchMethod","comment":"<p><a>polymer/polymer-builder.CommandLineOptions.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>polymer/polymer-builder.CommandLineOptions.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>polymer/polymer-builder.CommandLineOptions.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>polymer/polymer-builder.CommandLineOptions.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"polymer/polymer-builder.CommandLineOptions.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}