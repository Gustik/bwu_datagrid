{"name":"polymer-builder","qualifiedName":"polymer/polymer-builder","comment":"<p>Common logic to make it easy to run the polymer linter and deploy tool.</p>\n<p>The functions in this library are designed to make it easier to create\n<code>build.dart</code> files. A <code>build.dart</code> file is a Dart script that can be invoked\nfrom the command line, but that can also invoked automatically by the Dart\nEditor whenever a file in your project changes or when selecting some menu\noptions, such as 'Reanalyze Sources'.</p>\n<p>To work correctly, place the <code>build.dart</code> in the root of your project (where\npubspec.yaml lives). The file must be named exactly <code>build.dart</code>.</p>\n<p>It's quite likely that in the near future <code>build.dart</code> will be replaced with\nsomething else.  For example, <code>pub deploy</code> will deal with deploying\napplications automatically, and the Dart Editor might provide other\nmechanisms to hook linters.</p>\n<p>There are three important functions exposed by this library <a>polymer/polymer-builder.build</a>, <a>polymer/polymer-builder.lint</a>,\nand <a>polymer/polymer-builder.deploy</a>. The following examples show common uses of these functions\nwhen writing a <code>build.dart</code> file.</p>\n<p><strong>Example 1</strong>: Uses build.dart to run the linter tool.</p>\n<pre><code>import 'dart:io';\nimport 'package:polymer/builder.dart';\n\nmain() {\n   lint();\n}\n</code></pre>\n<p><strong>Example 2</strong>: Runs the linter and creates a deployable version of the app\nevery time.</p>\n<pre><code>import 'dart:io';\nimport 'package:polymer/builder.dart';\n\nmain() {\n   deploy(); // deploy also calls the linter internally.\n}\n</code></pre>\n<p><strong>Example 3</strong>: Always run the linter, but conditionally build a deployable\nversion. See <a>polymer/polymer-builder.parseOptions</a> for a description of options parsed\nautomatically by this helper library.</p>\n<pre><code>import 'dart:io';\nimport 'package:polymer/builder.dart';\n\nmain(args) {\n   var options = parseOptions(args);\n   if (options.forceDeploy) {\n     deploy();\n   } else {\n     lint();\n   }\n}\n</code></pre>\n<p><strong>Example 4</strong>: Same as above, but uses <a>polymer/polymer-builder.build</a> (which internally calls\neither <a>polymer/polymer-builder.lint</a> or <a>polymer/polymer-builder.deploy</a>).</p>\n<pre><code>import 'dart:io';\nimport 'package:polymer/builder.dart';\n\nmain(args) {\n   build(options: parseOptions(args));\n}\n</code></pre>\n<p><strong>Example 5</strong>: Like the previous example, but indicates to the linter and\ndeploy tool which files are actually used as entry point files. See the\ndocumentation of <a>polymer/polymer-builder.build</a> below for more details.</p>\n<pre><code>import 'dart:io';\nimport 'package:polymer/builder.dart';\n\nmain(args) {\n   build(entryPoints: ['web/index.html'], options: parseOptions(args));\n}\n</code></pre>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"build":{"name":"build","qualifiedName":"polymer/polymer-builder.build","comment":"<p>Runs the polymer linter on any relevant file in your package, such as any\n.html file under 'lib/', 'asset/', and 'web/'. And, if requested, creates a\ndirectory suitable for deploying a Polymer application to a server.</p>\n<p>The <a>polymer/polymer-builder.build.entryPoints</a> list contains files under web/ that should be treated as\nentry points. Each entry on this list is a relative path from the package\nroot (for example 'web/index.html'). If null, all files under 'web/' are\ntreated as possible entry points.</p>\n<p>Options must be passed by\npassing the <a>polymer/polymer-builder.build.options</a> argument. The deploy operation is run only when the\ncommand-line argument <code>--deploy</code> is present, or equivalently when\n<code>options.forceDeploy</code> is true.</p>\n<p>The linter and deploy steps needs to know the name of the <a>polymer/polymer-builder.build.currentPackage</a>\nand the location where to find the code for any package it depends on\n(<a>polymer/polymer-builder.build.packageDirs</a>). This is inferred automatically, but can be overriden if\nthose arguments are provided.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"entryPoints":{"name":"entryPoints","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"options":{"name":"options","optional":true,"named":true,"default":false,"type":[{"outer":"polymer/polymer-builder.CommandLineOptions","inner":[]}],"value":null,"annotations":[]},"currentPackage":{"name":"currentPackage","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"packageDirs":{"name":"packageDirs","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"deploy":{"name":"deploy","qualifiedName":"polymer/polymer-builder.deploy","comment":"<p>Creates a directory suitable for deploying a Polymer application to a\nserver.</p>\n<p><strong>Note</strong>: this function will be replaced in the future by the <code>pub deploy</code>\ncommand.</p>\n<p>The <a>polymer/polymer-builder.deploy.entryPoints</a> list contains files under web/ that should be treated as\nentry points. Each entry on this list is a relative path from the package\nroot (for example 'web/index.html'). If null, all files under 'web/' are\ntreated as possible entry points.</p>\n<p>Options must be passed by passing the <a>polymer/polymer-builder.deploy.options</a> list.</p>\n<p>The deploy step needs to know the name of the <a>polymer/polymer-builder.deploy.currentPackage</a> and the\nlocation where to find the code for any package it depends on\n(<a>polymer/polymer-builder.deploy.packageDirs</a>). This is inferred automatically, but can be overriden if\nthose arguments are provided.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"entryPoints":{"name":"entryPoints","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"options":{"name":"options","optional":true,"named":true,"default":false,"type":[{"outer":"polymer/polymer-builder.CommandLineOptions","inner":[]}],"value":null,"annotations":[]},"currentPackage":{"name":"currentPackage","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"packageDirs":{"name":"packageDirs","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"lint":{"name":"lint","qualifiedName":"polymer/polymer-builder.lint","comment":"<p>Runs the polymer linter on any relevant file in your package,\nsuch as any .html file under 'lib/', 'asset/', and 'web/'.</p>\n<p>The <a>polymer/polymer-builder.lint.entryPoints</a> list contains files under web/ that should be treated as\nentry points. Each entry on this list is a relative path from the package\nroot (for example 'web/index.html'). If null, all files under 'web/' are\ntreated as possible entry points.</p>\n<p>Options must be passed by passing the <a>polymer/polymer-builder.lint.options</a> argument.</p>\n<p>The linter needs to know the name of the <a>polymer/polymer-builder.lint.currentPackage</a> and the location\nwhere to find the code for any package it depends on (<a>polymer/polymer-builder.lint.packageDirs</a>). This\nis inferred automatically, but can be overriden by passing the arguments.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"entryPoints":{"name":"entryPoints","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"options":{"name":"options","optional":true,"named":true,"default":false,"type":[{"outer":"polymer/polymer-builder.CommandLineOptions","inner":[]}],"value":null,"annotations":[]},"currentPackage":{"name":"currentPackage","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"packageDirs":{"name":"packageDirs","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"parseOptions":{"name":"parseOptions","qualifiedName":"polymer/polymer-builder.parseOptions","comment":"<p>Parse command-line arguments and return a <a>polymer/polymer-builder.CommandLineOptions</a> object. The\nfollowing flags are parsed by this method.</p><ul><li><code>--changed file-path</code>: notify of a file change.</li><li><code>--removed file-path</code>: notify that a file was removed.</li><li><code>--clean</code>: remove temporary artifacts (if any)</li><li><code>--full</code>: build everything, similar to marking every file as changed</li><li>\n<p><code>--machine</code>: produce output that can be parsed by tools, such as the\nDart Editor.</p></li><li><code>--deploy</code>: force deploy.</li><li>\n<p><code>--no-js</code>: deploy replaces <em>.dart scripts with </em>.dart.js. You can turn\nthis feature off with --no-js, which leaves \"packages/browser/dart.js\".</p></li><li>\n<p><code>--csp</code>: replaces <em>.dart with </em>.dart.precompiled.js to comply with\nContent Security Policy restrictions.</p></li><li><code>--help</code>: print documentation for each option and exit.</li></ul>\n<p>Currently not all the flags are used by <a>polymer/polymer-builder.lint</a> or <a>polymer/polymer-builder.deploy</a> above, but they\nare available so they can be used from your <code>build.dart</code>. For instance, see\nthe top-level library documentation for an example that uses the\nforce-deploy option to conditionally call <a>polymer/polymer-builder.deploy</a>.</p>\n<p>If this documentation becomes out of date, the best way to discover which\nflags are supported is to invoke this function from your build.dart, and run\nit with the <code>--help</code> command-line flag.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer/polymer-builder.CommandLineOptions","inner":[]}],"parameters":{"args":{"name":"args","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"CommandLineOptions","qualifiedName":"polymer/polymer-builder.CommandLineOptions","preview":"<p>Options that may be used either in build.dart or by the linter and deploy\ntools.</p>"}],"typedef":{},"error":[]},"packageName":"polymer","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"}