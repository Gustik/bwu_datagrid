{"name":"polymer-src-boot","qualifiedName":"polymer/polymer-src-boot","comment":"<p>Bootstrap to initialize polymer applications. This library is not in use\nyet but it will replace boot.js in the near future (see dartbug.com/18007).</p>\n<p>This script contains logic to bootstrap polymer apps during development. It\ninternally discovers special Dart script tags through HTML imports, and\nconstructs a new entrypoint for the application that is then launched in an\nisolate.</p>\n<p>For each script tag found, we will load the corresponding Dart library and\nexecute all methods annotated with <code>@initMethod</code> and register all classes\nlabeled with <code>@CustomTag</code>. We keep track of the order of imports and execute\ninitializers in the same order.</p>\n<p>All polymer applications use this bootstrap logic. It is included\nautomatically when you include the polymer.html import:</p>\n<p>   &lt;link rel=\"import\" href=\"packages/polymer/polymer.html\"></p>\n<p>There are two important changes compared to previous versions of polymer\n(0.10.0-pre.6 and older):</p><ul><li>\n<p>Use 'application/dart;component=1' instead of 'application/dart':\n  Dartium already limits to have a single script tag per document, but it\n  will be changing semantics soon and make them even stricter. Multiple\n  script tags are not going to be running on the same isolate after this\n  change. For polymer applications we'll use a parameter on the script tags\n  mime-type to prevent Dartium from loading them separately. Instead this\n  bootstrap script combines those special script tags and creates the\n  application Dartium needs to run.</p>\n<p> &lt;polymer-element name=\"x-foo\"> ...\n &lt;script type=\"application/dart\" src=\"x_foo.dart'>&lt;/script></p></li></ul>\n<p>  Now you need to write:</p>\n<pre><code> &lt;polymer-element name=\"x-foo\"&gt; ...\n &lt;script type=\"application/dart;component=1\" src=\"x_foo.dart'&gt;&lt;/script&gt;\n</code></pre><ul><li>\n<p><code>initPolymer</code> is gone: we used to initialize applications in two\n  possible ways: using init.dart or invoking initPolymer in your main. Any\n  of these initialization patterns can be replaced to use an <code>@initMethod</code>\n  instead. For example, If you need to run some initialization code before\n  any other code is executed, include a \"application/dart;component=1\"\n  script tag that contains an initializer method with the body of your old\n  main, and make sure this tag is placed above other html-imports that load\n  the rest of the application. Initialization methods are executed in the\n  order in which they are discovered in the HTML document.</p></li></ul>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"main":{"name":"main","qualifiedName":"polymer/polymer-src-boot.main","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}}},"classes":{"class":[],"typedef":{},"error":[]},"packageName":"polymer","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"}