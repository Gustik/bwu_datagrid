{"name":"CompoundObserver","qualifiedName":"observe/observe.CompoundObserver","comment":"<p><a>observe/observe.CompoundObserver</a> is a <a>observe/observe.Bindable</a> object which knows how to listen to\nmultiple values (registered via <a>observe/observe.CompoundObserver.addPath</a> or <a>observe/observe.CompoundObserver.addObserver</a>) and invoke a\ncallback when one or more of the values have changed.</p>\n<p>   var obj = new ObservableMap.from({'a': 1, 'b': 2});\n   var otherObj = new ObservableMap.from({'c': 3});</p>\n<p>   var observer = new CompoundObserver()</p>\n<pre><code> ..addPath(obj, 'a');\n ..addObserver(new PathObserver(obj, 'b'));\n ..addPath(otherObj, 'c');\n ..open((values) {\n   for (int i = 0; i &lt; values.length; i++) {\n     print('The value at index $i is now ${values[i]}');\n   }\n });\n</code></pre>\n<p>  obj'a' = 10; // print will be triggered async</p>","isAbstract":false,"superclass":"observe/observe.Bindable","implements":["observe/observe.Bindable"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"observe/observe.CompoundObserver.CompoundObserver-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"addObserver":{"name":"addObserver","qualifiedName":"observe/observe.CompoundObserver.addObserver","comment":"","commentFrom":"observe.CompoundObserver.addObserver","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"observer":{"name":"observer","optional":false,"named":false,"default":false,"type":[{"outer":"observe/observe.Bindable","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addPath":{"name":"addPath","qualifiedName":"observe/observe.CompoundObserver.addPath","comment":"<p>Adds a dependency on the property <a>observe/observe.CompoundObserver.addPath.path</a> accessed from <a>observe/observe.CompoundObserver.addPath.object</a>.\n<a>observe/observe.CompoundObserver.addPath.path</a> can be a <a>observe/observe.PropertyPath</a> or a <a>dart-core.String</a>. If it is omitted an empty\npath will be used.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"path":{"name":"path","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"open":{"name":"open","qualifiedName":"observe/observe.CompoundObserver.open","comment":"<p>Initiates observation and returns the initial value.\nThe callback will be passed the updated <a>observe/observe.CompoundObserver.value</a>, and may optionally be\ndeclared to take a second argument, which will contain the previous value.</p>\n<p>Implementation note: a third argument can also be declared, which will\nreceive a list of objects and paths, such that <code>list[2 * i]</code> will access\nthe object and <code>list[2 * i + 1]</code> will access the path, where <code>i</code> is the\norder of the <a>observe/observe.CompoundObserver.addPath</a> call. This parameter is only used by\n<code>package:polymer</code> as a performance optimization, and should not be relied\non in new code.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{"value=":{"name":"value=","qualifiedName":"observe/observe.CompoundObserver.value=","comment":"<p>This can be implemented for two-way bindings. By default does nothing.\nNote: setting the value of a <a>observe/observe.Bindable</a> must not call the callback with\nthe new value. Any pending change notifications must be discarded.</p>","commentFrom":"","inheritedFrom":"observe.Bindable.value=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"newValue":{"name":"newValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"observe/observe.CompoundObserver.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>observe/observe.CompoundObserver.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"observe/observe.CompoundObserver.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"observe/observe.CompoundObserver.value","comment":"<p>Gets the current value of the bindings.</p>","commentFrom":"","inheritedFrom":"observe.Bindable.value","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"observe/observe.CompoundObserver.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>observe/observe.CompoundObserver.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>observe/observe.CompoundObserver.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"close":{"name":"close","qualifiedName":"observe/observe.CompoundObserver.close","comment":"<p>Stops future notifications and frees the reference to the callback passed\nto <a>observe/observe.CompoundObserver.open</a>, so its memory can be collected even if this Bindable is alive.</p>","commentFrom":"","inheritedFrom":"observe.Bindable.close","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"observe/observe.CompoundObserver.noSuchMethod","comment":"<p><a>observe/observe.CompoundObserver.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>observe/observe.CompoundObserver.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>observe/observe.CompoundObserver.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>observe/observe.CompoundObserver.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"open":{"name":"open","qualifiedName":"observe/observe.CompoundObserver.open","comment":"<p>Initiates observation and returns the initial value.\nThe callback will be called with the updated <a>observe/observe.CompoundObserver.value</a>.</p>\n<p>Some subtypes may chose to provide additional arguments, such as\n<a>observe/observe.PathObserver</a> providing the old value as the second argument.\nHowever, they must support callbacks with as few as 0 or 1 argument.\nThis can be implemented by performing an \"is\" type test on the callback.</p>","commentFrom":"","inheritedFrom":"observe.Bindable.open","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"observe/observe.CompoundObserver.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}