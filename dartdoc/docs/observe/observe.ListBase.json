{"name":"ListBase","qualifiedName":"observe/observe.ListBase","comment":"","isAbstract":true,"superclass":"dart-core.Object","implements":["observe/observe.ListMixin"],"subclass":["observe/observe.ObservableList"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"first":{"name":"first","qualifiedName":"observe/observe.ListBase.first","comment":"","commentFrom":"dart-pkg-collection.ListMixin.first","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"observe/observe.ListBase.isEmpty","comment":"","commentFrom":"dart-pkg-collection.ListMixin.isEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"observe/observe.ListBase.isNotEmpty","comment":"","commentFrom":"dart-pkg-collection.ListMixin.isNotEmpty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"observe/observe.ListBase.iterator","comment":"","commentFrom":"dart-pkg-collection.ListMixin.iterator","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"observe/observe.ListBase.last","comment":"","commentFrom":"dart-pkg-collection.ListMixin.last","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{},"annotations":[]},"reversed":{"name":"reversed","qualifiedName":"observe/observe.ListBase.reversed","comment":"","commentFrom":"dart-pkg-collection.ListMixin.reversed","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"observe/observe.ListBase.single","comment":"","commentFrom":"dart-pkg-collection.ListMixin.single","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"observe/observe.ListBase.add","comment":"","commentFrom":"dart-pkg-collection.ListMixin.add","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"observe/observe.ListBase.addAll","comment":"","commentFrom":"dart-pkg-collection.ListMixin.addAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"observe/observe.ListBase.any","comment":"","commentFrom":"dart-pkg-collection.ListMixin.any","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asMap":{"name":"asMap","qualifiedName":"observe/observe.ListBase.asMap","comment":"","commentFrom":"dart-pkg-collection.ListMixin.asMap","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.int","inner":[]},{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{},"annotations":[]},"clear":{"name":"clear","qualifiedName":"observe/observe.ListBase.clear","comment":"","commentFrom":"dart-pkg-collection.ListMixin.clear","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"observe/observe.ListBase.contains","comment":"","commentFrom":"dart-pkg-collection.ListMixin.contains","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"observe/observe.ListBase.elementAt","comment":"","commentFrom":"dart-pkg-collection.ListMixin.elementAt","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"observe/observe.ListBase.every","comment":"","commentFrom":"dart-pkg-collection.ListMixin.every","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"observe/observe.ListBase.expand","comment":"","commentFrom":"dart-pkg-collection.ListMixin.expand","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"fillRange":{"name":"fillRange","qualifiedName":"observe/observe.ListBase.fillRange","comment":"","commentFrom":"dart-pkg-collection.ListMixin.fillRange","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"fill":{"name":"fill","optional":true,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"observe/observe.ListBase.firstWhere","comment":"","commentFrom":"dart-pkg-collection.ListMixin.firstWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"observe/observe.ListBase.fold","comment":"","commentFrom":"dart-pkg-collection.ListMixin.fold","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"observe/observe.ListBase.forEach","comment":"","commentFrom":"dart-pkg-collection.ListMixin.forEach","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"getRange":{"name":"getRange","qualifiedName":"observe/observe.ListBase.getRange","comment":"","commentFrom":"dart-pkg-collection.ListMixin.getRange","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"indexOf":{"name":"indexOf","qualifiedName":"observe/observe.ListBase.indexOf","comment":"","commentFrom":"dart-pkg-collection.ListMixin.indexOf","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"startIndex":{"name":"startIndex","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"insert":{"name":"insert","qualifiedName":"observe/observe.ListBase.insert","comment":"","commentFrom":"dart-pkg-collection.ListMixin.insert","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insertAll":{"name":"insertAll","qualifiedName":"observe/observe.ListBase.insertAll","comment":"","commentFrom":"dart-pkg-collection.ListMixin.insertAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"observe/observe.ListBase.join","comment":"","commentFrom":"dart-pkg-collection.ListMixin.join","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastIndexOf":{"name":"lastIndexOf","qualifiedName":"observe/observe.ListBase.lastIndexOf","comment":"<p>Returns the last index in the list a of the given <a>observe/observe.ListBase.lastIndexOf.element</a>, starting\nthe search at index <a>observe/observe.ListBase.lastIndexOf.startIndex</a> to 0.\nReturns -1 if <a>observe/observe.ListBase.lastIndexOf.element</a> is not found.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"startIndex":{"name":"startIndex","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"observe/observe.ListBase.lastWhere","comment":"","commentFrom":"dart-pkg-collection.ListMixin.lastWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"map":{"name":"map","qualifiedName":"observe/observe.ListBase.map","comment":"","commentFrom":"dart-pkg-collection.ListMixin.map","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"observe/observe.ListBase.reduce","comment":"","commentFrom":"dart-pkg-collection.ListMixin.reduce","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"observe/observe.ListBase.remove","comment":"","commentFrom":"dart-pkg-collection.ListMixin.remove","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAt":{"name":"removeAt","qualifiedName":"observe/observe.ListBase.removeAt","comment":"","commentFrom":"dart-pkg-collection.ListMixin.removeAt","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeLast":{"name":"removeLast","qualifiedName":"observe/observe.ListBase.removeLast","comment":"","commentFrom":"dart-pkg-collection.ListMixin.removeLast","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{},"annotations":[]},"removeRange":{"name":"removeRange","qualifiedName":"observe/observe.ListBase.removeRange","comment":"","commentFrom":"dart-pkg-collection.ListMixin.removeRange","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeWhere":{"name":"removeWhere","qualifiedName":"observe/observe.ListBase.removeWhere","comment":"","commentFrom":"dart-pkg-collection.ListMixin.removeWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"replaceRange":{"name":"replaceRange","qualifiedName":"observe/observe.ListBase.replaceRange","comment":"","commentFrom":"dart-pkg-collection.ListMixin.replaceRange","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"newContents":{"name":"newContents","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"retainWhere":{"name":"retainWhere","qualifiedName":"observe/observe.ListBase.retainWhere","comment":"","commentFrom":"dart-pkg-collection.ListMixin.retainWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"setAll":{"name":"setAll","qualifiedName":"observe/observe.ListBase.setAll","comment":"","commentFrom":"dart-pkg-collection.ListMixin.setAll","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"setRange":{"name":"setRange","qualifiedName":"observe/observe.ListBase.setRange","comment":"","commentFrom":"dart-pkg-collection.ListMixin.setRange","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]},"skipCount":{"name":"skipCount","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"shuffle":{"name":"shuffle","qualifiedName":"observe/observe.ListBase.shuffle","comment":"","commentFrom":"dart-pkg-collection.ListMixin.shuffle","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"random":{"name":"random","optional":true,"named":false,"default":false,"type":[{"outer":"dart-math.Random","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"observe/observe.ListBase.singleWhere","comment":"","commentFrom":"dart-pkg-collection.ListMixin.singleWhere","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"observe/observe.ListBase.skip","comment":"","commentFrom":"dart-pkg-collection.ListMixin.skip","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"observe/observe.ListBase.skipWhile","comment":"","commentFrom":"dart-pkg-collection.ListMixin.skipWhile","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"sort":{"name":"sort","qualifiedName":"observe/observe.ListBase.sort","comment":"","commentFrom":"dart-pkg-collection.ListMixin.sort","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"compare":{"name":"compare","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"sublist":{"name":"sublist","qualifiedName":"observe/observe.ListBase.sublist","comment":"","commentFrom":"dart-pkg-collection.ListMixin.sublist","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"take":{"name":"take","qualifiedName":"observe/observe.ListBase.take","comment":"","commentFrom":"dart-pkg-collection.ListMixin.take","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"observe/observe.ListBase.takeWhile","comment":"","commentFrom":"dart-pkg-collection.ListMixin.takeWhile","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"observe/observe.ListBase.toList","comment":"","commentFrom":"dart-pkg-collection.ListMixin.toList","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"observe/observe.ListBase.toSet","comment":"","commentFrom":"dart-pkg-collection.ListMixin.toSet","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"observe/observe.ListBase.toString","comment":"","commentFrom":"dart-pkg-collection.ListMixin.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"where":{"name":"where","qualifiedName":"observe/observe.ListBase.where","comment":"","commentFrom":"dart-pkg-collection.ListMixin.where","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"inheritedMethods":{"setters":{"length=":{"name":"length=","qualifiedName":"observe/observe.ListBase.length=","comment":"<p>Changes the length of this list.</p>\n<p>If <a>observe/observe.ListBase.length=.newLength</a> is greater than\nthe current length, entries are initialized to <code>null</code>.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if the list is fixed-length.</p>","commentFrom":"","inheritedFrom":"dart-core.List.length=","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newLength":{"name":"newLength","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"first":{"name":"first","qualifiedName":"observe/observe.ListBase.first","comment":"<p>Returns the first element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>. Otherwise this method is\nequivalent to <code>this.elementAt(0)</code></p>","commentFrom":"dart-core.Iterable.first","inheritedFrom":"observe.ListMixin.first","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableList.E","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"observe/observe.ListBase.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>observe/observe.ListBase.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"observe/observe.ListBase.isEmpty","comment":"<p>Returns true if there is no element in this collection.</p>","commentFrom":"dart-core.Iterable.isEmpty","inheritedFrom":"observe.ListMixin.isEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"observe/observe.ListBase.isNotEmpty","comment":"<p>Returns true if there is at least one element in this collection.</p>","commentFrom":"dart-core.Iterable.isNotEmpty","inheritedFrom":"observe.ListMixin.isNotEmpty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"iterator":{"name":"iterator","qualifiedName":"observe/observe.ListBase.iterator","comment":"<p>Returns an Iterator that iterates over this Iterable object.</p>","commentFrom":"dart-core.Iterable.iterator","inheritedFrom":"observe.ListMixin.iterator","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterator","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{},"annotations":[]},"last":{"name":"last","qualifiedName":"observe/observe.ListBase.last","comment":"<p>Returns the last element.</p>\n<p>If <code>this</code> is empty throws a <a>dart-core.StateError</a>.</p>","commentFrom":"dart-core.Iterable.last","inheritedFrom":"observe.ListMixin.last","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableList.E","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"observe/observe.ListBase.length","comment":"<p>Returns the number of objects in this list.</p>\n<p>The valid indices for a list are <code>0</code> through <code>length - 1</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.List.length","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"reversed":{"name":"reversed","qualifiedName":"observe/observe.ListBase.reversed","comment":"<p>Returns an <a>dart-core.Iterable</a> of the objects in this list in reverse order.</p>","commentFrom":"dart-core.List.reversed","inheritedFrom":"observe.ListMixin.reversed","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"observe/observe.ListBase.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"single":{"name":"single","qualifiedName":"observe/observe.ListBase.single","comment":"<p>Returns the single element in <code>this</code>.</p>\n<p>If <code>this</code> is empty or has more than one element throws a <a>dart-core.StateError</a>.</p>","commentFrom":"dart-core.Iterable.single","inheritedFrom":"observe.ListMixin.single","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableList.E","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"observe/observe.ListBase.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>observe/observe.ListBase.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>observe/observe.ListBase.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"observe/observe.ListBase.[]","comment":"<p>Returns the object at the given <a>observe/observe.ListBase.[].index</a> in the list\nor throws a <a>dart-core.RangeError</a> if <a>observe/observe.ListBase.[].index</a> is out of bounds.</p>","commentFrom":"","inheritedFrom":"dart-core.List.[]","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"observe/observe.ListBase.[]=","comment":"<p>Sets the value at the given <a>observe/observe.ListBase.[]=.index</a> in the list to <a>observe/observe.ListBase.[]=.value</a>\nor throws a <a>dart-core.RangeError</a> if <a>observe/observe.ListBase.[]=.index</a> is out of bounds.</p>","commentFrom":"","inheritedFrom":"dart-core.List.[]=","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"observe/observe.ListBase.add","comment":"<p>Adds value to the end of this list,\nextending the length by one.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if the list is fixed-length.</p>","commentFrom":"dart-core.List.add","inheritedFrom":"observe.ListMixin.add","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"observe/observe.ListBase.addAll","comment":"<p>Appends all objects of <a>observe/observe.ListBase.addAll.iterable</a> to the end of this list.</p>\n<p>Extends the length of the list by the number of objects in <a>observe/observe.ListBase.addAll.iterable</a>.\nThrows an <a>dart-core.UnsupportedError</a> if this list is fixed-length.</p>","commentFrom":"dart-core.List.addAll","inheritedFrom":"observe.ListMixin.addAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"any":{"name":"any","qualifiedName":"observe/observe.ListBase.any","comment":"<p>Returns true if one element of this collection satisfies the\npredicate <a>observe/observe.ListBase.any.test</a>. Returns false otherwise.</p>","commentFrom":"dart-core.Iterable.any","inheritedFrom":"observe.ListMixin.any","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"asMap":{"name":"asMap","qualifiedName":"observe/observe.ListBase.asMap","comment":"<p>Returns an unmodifiable <a>dart-core.Map</a> view of <code>this</code>.</p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys</code> <a>dart-core.Iterable</a> iterates the indices of this list\nin numerical order.</p>\n<pre><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   // 'feefi';\nmap.keys.toList(); // [0, 1, 2, 3]\n</code></pre>","commentFrom":"dart-core.List.asMap","inheritedFrom":"observe.ListMixin.asMap","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.int","inner":[]},{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{},"annotations":[]},"clear":{"name":"clear","qualifiedName":"observe/observe.ListBase.clear","comment":"<p>Removes all objects from this list;\nthe length of the list becomes zero.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a>, and retains all objects, if this\nis a fixed-length list.</p>","commentFrom":"dart-core.List.clear","inheritedFrom":"observe.ListMixin.clear","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"observe/observe.ListBase.contains","comment":"<p>Returns true if the collection contains an element equal to <a>observe/observe.ListBase.contains.element</a>.</p>","commentFrom":"dart-core.Iterable.contains","inheritedFrom":"observe.ListMixin.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"elementAt":{"name":"elementAt","qualifiedName":"observe/observe.ListBase.elementAt","comment":"<p>Returns the <a>observe/observe.ListBase.elementAt.index</a>th element.</p>\n<p>The <a>observe/observe.ListBase.elementAt.index</a> must be non-negative and less than length.</p>\n<p>Note: if <code>this</code> does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least <a>observe/observe.ListBase.elementAt.index</a> elements in <code>this</code>.</p>","commentFrom":"dart-core.Iterable.elementAt","inheritedFrom":"observe.ListMixin.elementAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableList.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"every":{"name":"every","qualifiedName":"observe/observe.ListBase.every","comment":"<p>Returns true if every elements of this collection satisify the\npredicate <a>observe/observe.ListBase.every.test</a>. Returns <code>false</code> otherwise.</p>","commentFrom":"dart-core.Iterable.every","inheritedFrom":"observe.ListMixin.every","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"expand":{"name":"expand","qualifiedName":"observe/observe.ListBase.expand","comment":"<p>Expands each element of this <a>dart-core.Iterable</a> into zero or more elements.</p>\n<p>The resulting Iterable runs through the elements returned\nby <a>observe/observe.ListBase.expand.f</a> for each element of this, in order.</p>\n<p>The returned <a>dart-core.Iterable</a> is lazy, and calls <a>observe/observe.ListBase.expand.f</a> for each element\nof this every time it's iterated.</p>","commentFrom":"dart-core.Iterable.expand","inheritedFrom":"observe.ListMixin.expand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"fillRange":{"name":"fillRange","qualifiedName":"observe/observe.ListBase.fillRange","comment":"<p>Sets the objects in the range <a>observe/observe.ListBase.fillRange.start</a> inclusive to <a>observe/observe.ListBase.fillRange.end</a> exclusive\nto the given fillValue.</p>\n<p>An error occurs if <a>observe/observe.ListBase.fillRange.start</a>..<a>observe/observe.ListBase.fillRange.end</a> is not a valid range for <code>this</code>.</p>","commentFrom":"dart-core.List.fillRange","inheritedFrom":"observe.ListMixin.fillRange","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"fill":{"name":"fill","optional":true,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"firstWhere":{"name":"firstWhere","qualifiedName":"observe/observe.ListBase.firstWhere","comment":"<p>Returns the first element that satisfies the given predicate <a>observe/observe.ListBase.firstWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>observe/observe.ListBase.firstWhere.orElse</a> function is\nreturned. By default, when <a>observe/observe.ListBase.firstWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"dart-core.Iterable.firstWhere","inheritedFrom":"observe.ListMixin.firstWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"fold":{"name":"fold","qualifiedName":"observe/observe.ListBase.fold","comment":"<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.</p>\n<p>Use <a>observe/observe.ListBase.fold.initialValue</a> as the initial value, and the function <a>observe/observe.ListBase.fold.combine</a> to\ncreate a new value from the previous one and an element.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n</code></pre>","commentFrom":"dart-core.Iterable.fold","inheritedFrom":"observe.ListMixin.fold","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"observe/observe.ListBase.forEach","comment":"<p>Applies the function f to each element of this collection.</p>","commentFrom":"dart-core.Iterable.forEach","inheritedFrom":"observe.ListMixin.forEach","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"getRange":{"name":"getRange","qualifiedName":"observe/observe.ListBase.getRange","comment":"<p>Returns an <a>dart-core.Iterable</a> that iterates over the objects in the range\n<a>observe/observe.ListBase.getRange.start</a> inclusive to <a>observe/observe.ListBase.getRange.end</a> exclusive.</p>\n<p>An error occurs if <a>observe/observe.ListBase.getRange.end</a> is before <a>observe/observe.ListBase.getRange.start</a>.</p>\n<p>An error occurs if the <a>observe/observe.ListBase.getRange.start</a> and <a>observe/observe.ListBase.getRange.end</a> are not valid ranges at the time\nof the call to this method. The returned <a>dart-core.Iterable</a> behaves like\n<code>skip(start).take(end - start)</code>. That is, it does not throw exceptions\nif <code>this</code> changes size.</p>\n<pre><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  // 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  // 'green, blue'\n</code></pre>","commentFrom":"dart-core.List.getRange","inheritedFrom":"observe.ListMixin.getRange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"indexOf":{"name":"indexOf","qualifiedName":"observe/observe.ListBase.indexOf","comment":"<p>Returns the first index of <a>observe/observe.ListBase.indexOf.element</a> in this list.</p>\n<p>Searches the list from index start to the end of the list.\nThe first time an object <code>o</code> is encountered so that <code>o == element</code>,\nthe index of <code>o</code> is returned.</p>\n<pre><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    // 1\nnotes.indexOf('re', 2); // 3\n</code></pre>\n<p>Returns -1 if <a>observe/observe.ListBase.indexOf.element</a> is not found.</p>\n<pre><code>notes.indexOf('fa');    // -1\n</code></pre>","commentFrom":"dart-core.List.indexOf","inheritedFrom":"observe.ListMixin.indexOf","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"startIndex":{"name":"startIndex","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"insert":{"name":"insert","qualifiedName":"observe/observe.ListBase.insert","comment":"<p>Inserts the object at position <a>observe/observe.ListBase.insert.index</a> in this list.</p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.</p>\n<p>An error occurs if the <a>observe/observe.ListBase.insert.index</a> is less than 0 or greater than length.\nAn <a>dart-core.UnsupportedError</a> occurs if the list is fixed-length.</p>","commentFrom":"dart-core.List.insert","inheritedFrom":"observe.ListMixin.insert","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insertAll":{"name":"insertAll","qualifiedName":"observe/observe.ListBase.insertAll","comment":"<p>Inserts all objects of <a>observe/observe.ListBase.insertAll.iterable</a> at position <a>observe/observe.ListBase.insertAll.index</a> in this list.</p>\n<p>This increases the length of the list by the length of <a>observe/observe.ListBase.insertAll.iterable</a> and\nshifts all later objects towards the end of the list.</p>\n<p>An error occurs if the <a>observe/observe.ListBase.insertAll.index</a> is less than 0 or greater than length.\nAn <a>dart-core.UnsupportedError</a> occurs if the list is fixed-length.</p>","commentFrom":"dart-core.List.insertAll","inheritedFrom":"observe.ListMixin.insertAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"join":{"name":"join","qualifiedName":"observe/observe.ListBase.join","comment":"<p>Converts each element to a <a>dart-core.String</a> and concatenates the strings.</p>\n<p>Converts each element to a <a>dart-core.String</a> by calling <a>observe/observe.ListBase.toString</a> on it.\nThen concatenates the strings, optionally separated by the <a>observe/observe.ListBase.join.separator</a>\nstring.</p>","commentFrom":"dart-core.Iterable.join","inheritedFrom":"observe.ListMixin.join","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]}},"annotations":[]},"lastIndexOf":{"name":"lastIndexOf","qualifiedName":"observe/observe.ListBase.lastIndexOf","comment":"<p>Returns the last index in the list a of the given <a>observe/observe.ListBase.lastIndexOf.element</a>, starting\nthe search at index <a>observe/observe.ListBase.lastIndexOf.startIndex</a> to 0.\nReturns -1 if <a>observe/observe.ListBase.lastIndexOf.element</a> is not found.</p>","commentFrom":"","inheritedFrom":"observe.ListMixin.lastIndexOf","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"startIndex":{"name":"startIndex","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"lastWhere":{"name":"lastWhere","qualifiedName":"observe/observe.ListBase.lastWhere","comment":"<p>Returns the last element that satisfies the given predicate <a>observe/observe.ListBase.lastWhere.test</a>.</p>\n<p>If none matches, the result of invoking the <a>observe/observe.ListBase.lastWhere.orElse</a> function is\nreturned. By default, when <a>observe/observe.ListBase.lastWhere.orElse</a> is <code>null</code>, a <a>dart-core.StateError</a> is\nthrown.</p>","commentFrom":"dart-core.Iterable.lastWhere","inheritedFrom":"observe.ListMixin.lastWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}},"orElse":{"name":"orElse","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{}}}},"annotations":[]},"map":{"name":"map","qualifiedName":"observe/observe.ListBase.map","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> where each element <code>e</code> of <code>this</code> is replaced\nby the result of <code>f(e)</code>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>observe/observe.ListBase.map.f</a> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>observe/observe.ListBase.map.f</a> multiple times on the same element.</p>","commentFrom":"dart-core.Iterable.map","inheritedFrom":"observe.ListMixin.map","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"observe/observe.ListBase.noSuchMethod","comment":"<p><a>observe/observe.ListBase.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>observe/observe.ListBase.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>observe/observe.ListBase.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>observe/observe.ListBase.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"reduce":{"name":"reduce","qualifiedName":"observe/observe.ListBase.reduce","comment":"<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.</p>\n<p>Example of calculating the sum of an iterable:</p>\n<pre><code>iterable.reduce((value, element) =&gt; value + element);\n</code></pre>","commentFrom":"dart-core.Iterable.reduce","inheritedFrom":"observe.ListMixin.reduce","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableList.E","inner":[]}],"parameters":{"combine":{"name":"combine","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"observe.ListMixin.E","inner":[]}],"parameters":{"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"observe/observe.ListBase.remove","comment":"<p>Removes the first occurence of value from this list.</p>\n<p>Returns true if value was in the list, false otherwise.</p>\n<pre><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); // true\nparts.join(', ');     // 'shoulders, knees, toes'\n</code></pre>\n<p>The method has no effect if value was not in the list.</p>\n<pre><code>// Note: 'head' has already been removed.\nparts.remove('head'); // false\nparts.join(', ');     // 'shoulders, knees, toes'\n</code></pre>\n<p>An <a>dart-core.UnsupportedError</a> occurs if the list is fixed-length.</p>","commentFrom":"dart-core.List.remove","inheritedFrom":"observe.ListMixin.remove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAt":{"name":"removeAt","qualifiedName":"observe/observe.ListBase.removeAt","comment":"<p>Removes the object at position <a>observe/observe.ListBase.removeAt.index</a> from this list.</p>\n<p>This method reduces the length of <code>this</code> by one and moves all later objects\ndown by one position.</p>\n<p>Returns the removed object.</p>\n<p>The <a>observe/observe.ListBase.removeAt.index</a> must be in the range <code>0 ≤ index &lt; length</code>.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list. In that case\nthe list is not modified.</p>","commentFrom":"dart-core.List.removeAt","inheritedFrom":"observe.ListMixin.removeAt","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableList.E","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeLast":{"name":"removeLast","qualifiedName":"observe/observe.ListBase.removeLast","comment":"<p>Pops and returns the last object in this list.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list.</p>","commentFrom":"dart-core.List.removeLast","inheritedFrom":"observe.ListMixin.removeLast","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableList.E","inner":[]}],"parameters":{},"annotations":[]},"removeRange":{"name":"removeRange","qualifiedName":"observe/observe.ListBase.removeRange","comment":"<p>Removes the objects in the range <a>observe/observe.ListBase.removeRange.start</a> inclusive to <a>observe/observe.ListBase.removeRange.end</a> exclusive.</p>\n<p>The <a>observe/observe.ListBase.removeRange.start</a> and <a>observe/observe.ListBase.removeRange.end</a> indices must be in the range\n<code>0 ≤ index ≤ length</code>, and <code>start ≤ end</code>.</p>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list. In that case\nthe list is not modified.</p>","commentFrom":"dart-core.List.removeRange","inheritedFrom":"observe.ListMixin.removeRange","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeWhere":{"name":"removeWhere","qualifiedName":"observe/observe.ListBase.removeWhere","comment":"<p>Removes all objects from this list that satisfy <a>observe/observe.ListBase.removeWhere.test</a>.</p>\n<p>An object <code>o</code> satisfies <a>observe/observe.ListBase.removeWhere.test</a> if <code>test(o)</code> is true.</p>\n<pre><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); // 'three, four'\n</code></pre>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list.</p>","commentFrom":"dart-core.List.removeWhere","inheritedFrom":"observe.ListMixin.removeWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"replaceRange":{"name":"replaceRange","qualifiedName":"observe/observe.ListBase.replaceRange","comment":"<p>Removes the objects in the range <a>observe/observe.ListBase.replaceRange.start</a> inclusive to <a>observe/observe.ListBase.replaceRange.end</a> exclusive\nand inserts the contents of replacement in its place.</p>\n<pre><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); // '1, 6, 7, 5'\n</code></pre>\n<p>An error occurs if <a>observe/observe.ListBase.replaceRange.start</a>..<a>observe/observe.ListBase.replaceRange.end</a> is not a valid range for <code>this</code>.</p>","commentFrom":"dart-core.List.replaceRange","inheritedFrom":"observe.ListMixin.replaceRange","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"newContents":{"name":"newContents","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"retainWhere":{"name":"retainWhere","qualifiedName":"observe/observe.ListBase.retainWhere","comment":"<p>Removes all objects from this list that fail to satisfy <a>observe/observe.ListBase.retainWhere.test</a>.</p>\n<p>An object <code>o</code> satisfies <a>observe/observe.ListBase.retainWhere.test</a> if <code>test(o)</code> is true.</p>\n<pre><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); // 'one, two'\n</code></pre>\n<p>Throws an <a>dart-core.UnsupportedError</a> if this is a fixed-length list.</p>","commentFrom":"dart-core.List.retainWhere","inheritedFrom":"observe.ListMixin.retainWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"setAll":{"name":"setAll","qualifiedName":"observe/observe.ListBase.setAll","comment":"<p>Overwrites objects of <code>this</code> with the objects of <a>observe/observe.ListBase.setAll.iterable</a>, starting\nat position <a>observe/observe.ListBase.setAll.index</a> in this list.</p>\n<pre><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); // 'a, bee, sea'\n</code></pre>\n<p>This operation does not increase the length of <code>this</code>.</p>\n<p>The <a>observe/observe.ListBase.setAll.index</a> must be non-negative and no greater than length.</p>\n<p>The <a>observe/observe.ListBase.setAll.iterable</a> must not have more elements than what can fit from <a>observe/observe.ListBase.setAll.index</a>\nto length.</p>\n<p>If <code>iterable</code> is based on this list, its values may change /during/ the\n<code>setAll</code> operation.</p>","commentFrom":"dart-core.List.setAll","inheritedFrom":"observe.ListMixin.setAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"setRange":{"name":"setRange","qualifiedName":"observe/observe.ListBase.setRange","comment":"<p>Copies the objects of <a>observe/observe.ListBase.setRange.iterable</a>, skipping <a>observe/observe.ListBase.setRange.skipCount</a> objects first,\ninto the range <a>observe/observe.ListBase.setRange.start</a>, inclusive, to <a>observe/observe.ListBase.setRange.end</a>, exclusive, of the list.</p>\n<pre><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n// Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n// of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); // '1, 8, 9, 4'\n</code></pre>\n<p>The <a>observe/observe.ListBase.setRange.start</a> and <a>observe/observe.ListBase.setRange.end</a> indices must satisfy <code>0 ≤ start ≤ end ≤ length</code>.\nIf <a>observe/observe.ListBase.setRange.start</a> equals <a>observe/observe.ListBase.setRange.end</a>, this method has no effect.</p>\n<p>The <a>observe/observe.ListBase.setRange.iterable</a> must have enough objects to fill the range from <code>start</code>\nto <code>end</code> after skipping <a>observe/observe.ListBase.setRange.skipCount</a> objects.</p>\n<p>If <code>iterable</code> is this list, the operation will copy the elements originally\nin the range from <code>skipCount</code> to <code>skipCount + (end - start)</code> to the\nrange <code>start</code> to <code>end</code>, even if the two ranges overlap.</p>\n<p>If <code>iterable</code> depends on this list in some other way, no guarantees are\nmade.</p>","commentFrom":"dart-core.List.setRange","inheritedFrom":"observe.ListMixin.setRange","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"iterable":{"name":"iterable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe.ListMixin.E","inner":[]}]}],"value":null,"annotations":[]},"skipCount":{"name":"skipCount","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"shuffle":{"name":"shuffle","qualifiedName":"observe/observe.ListBase.shuffle","comment":"<p>Shuffles the elements of this list randomly.</p>","commentFrom":"dart-core.List.shuffle","inheritedFrom":"observe.ListMixin.shuffle","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"random":{"name":"random","optional":true,"named":false,"default":false,"type":[{"outer":"dart-math.Random","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"singleWhere":{"name":"singleWhere","qualifiedName":"observe/observe.ListBase.singleWhere","comment":"<p>Returns the single element that satisfies <a>observe/observe.ListBase.singleWhere.test</a>. If no or more than one\nelement match then a <a>dart-core.StateError</a> is thrown.</p>","commentFrom":"dart-core.Iterable.singleWhere","inheritedFrom":"observe.ListMixin.singleWhere","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableList.E","inner":[]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"observe/observe.ListBase.skip","comment":"<p>Returns an Iterable that skips the first n elements.</p>\n<p>If <code>this</code> has fewer than n elements, then the resulting Iterable is\nempty.</p>\n<p>It is an error if n is negative.</p>","commentFrom":"dart-core.Iterable.skip","inheritedFrom":"observe.ListMixin.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"skipWhile":{"name":"skipWhile","qualifiedName":"observe/observe.ListBase.skipWhile","comment":"<p>Returns an Iterable that skips elements while <a>observe/observe.ListBase.skipWhile.test</a> is satisfied.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of <code>this</code>.</p>\n<p>As long as the iterator's elements satisfy <a>observe/observe.ListBase.skipWhile.test</a> they are\ndiscarded. Once an element does not satisfy the <a>observe/observe.ListBase.skipWhile.test</a> the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of <code>this</code> starting from the\nfirst element that does not satisfy <a>observe/observe.ListBase.skipWhile.test</a>.</p>","commentFrom":"dart-core.Iterable.skipWhile","inheritedFrom":"observe.ListMixin.skipWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"sort":{"name":"sort","qualifiedName":"observe/observe.ListBase.sort","comment":"<p>Sorts this list according to the order specified by the <a>observe/observe.ListBase.sort.compare</a> function.</p>\n<p>The <a>observe/observe.ListBase.sort.compare</a> function must act as a <a>dart-core.Comparator</a>.</p>\n<pre><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\n// Sort from shortest to longest.\nnumbers.sort((x, y) =&gt; x.length.compareTo(y.length));\nnumbers.join(', '); // 'one, two, four, three'\n</code></pre>\n<p>The default List implementations use <a>observe/dart-core.Comparable.compare</a> if\n<a>observe/observe.ListBase.sort.compare</a> is omitted.</p>\n<pre><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\n     nums.join(', '); // '-11, 2, 13'\n</code></pre>","commentFrom":"dart-core.List.sort","inheritedFrom":"observe.ListMixin.sort","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"compare":{"name":"compare","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]},"b":{"name":"b","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"sublist":{"name":"sublist","qualifiedName":"observe/observe.ListBase.sublist","comment":"<p>Returns a new list containing the objects from <a>observe/observe.ListBase.sublist.start</a> inclusive to <a>observe/observe.ListBase.sublist.end</a>\nexclusive.</p>\n<pre><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\ncolors.sublist(1, 3); // ['green', 'blue']\n</code></pre>\n<p>If <a>observe/observe.ListBase.sublist.end</a> is omitted, the length of <code>this</code> is used.</p>\n<pre><code>colors.sublist(1);  // ['green', 'blue', 'orange', 'pink']\n</code></pre>\n<p>An error occurs if <a>observe/observe.ListBase.sublist.start</a> is outside the range <code>0</code> .. <code>length</code> or if\n<a>observe/observe.ListBase.sublist.end</a> is outside the range <code>start</code> .. <code>length</code>.</p>","commentFrom":"dart-core.List.sublist","inheritedFrom":"observe.ListMixin.sublist","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"take":{"name":"take","qualifiedName":"observe/observe.ListBase.take","comment":"<p>Returns an <a>dart-core.Iterable</a> with at most n elements.</p>\n<p>The returned <a>dart-core.Iterable</a> may contain fewer than n elements, if <code>this</code>\ncontains fewer than n elements.</p>\n<p>It is an error if n is negative.</p>","commentFrom":"dart-core.Iterable.take","inheritedFrom":"observe.ListMixin.take","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{"count":{"name":"count","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeWhile":{"name":"takeWhile","qualifiedName":"observe/observe.ListBase.takeWhile","comment":"<p>Returns an Iterable that stops once <a>observe/observe.ListBase.takeWhile.test</a> is not satisfied anymore.</p>\n<p>The filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of <code>this</code>.</p>\n<p>When the iterator encounters an element <code>e</code> that does not satisfy <a>observe/observe.ListBase.takeWhile.test</a>,\nit discards <code>e</code> and moves into the finished state. That is, it does not\nget or provide any more elements.</p>","commentFrom":"dart-core.Iterable.takeWhile","inheritedFrom":"observe.ListMixin.takeWhile","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toList":{"name":"toList","qualifiedName":"observe/observe.ListBase.toList","comment":"<p>Creates a <a>dart-core.List</a> containing the elements of this <a>dart-core.Iterable</a>.</p>\n<p>The elements are in iteration order. The list is fixed-length\nif <a>observe/observe.ListBase.toList.growable</a> is false.</p>","commentFrom":"dart-core.Iterable.toList","inheritedFrom":"observe.ListMixin.toList","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{"growable":{"name":"growable","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"toSet":{"name":"toSet","qualifiedName":"observe/observe.ListBase.toSet","comment":"<p>Creates a <a>dart-core.Set</a> containing the elements of this <a>dart-core.Iterable</a>.</p>","commentFrom":"dart-core.Iterable.toSet","inheritedFrom":"observe.ListMixin.toSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"observe/observe.ListBase.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"observe.ListMixin.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"where":{"name":"where","qualifiedName":"observe/observe.ListBase.where","comment":"<p>Returns a lazy <a>dart-core.Iterable</a> with all elements that satisfy the\npredicate <a>observe/observe.ListBase.where.test</a>.</p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a>dart-core.Iterable</a> is not iterated over, the supplied function <a>observe/observe.ListBase.where.test</a> will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned <a>dart-core.Iterable</a> will invoke the supplied\nfunction <a>observe/observe.ListBase.where.test</a> multiple times on the same element.</p>","commentFrom":"dart-core.Iterable.where","inheritedFrom":"observe.ListMixin.where","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe/observe.ObservableList.E","inner":[]}]}],"parameters":{"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"observe.ListMixin.E","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}}},"annotations":[],"generics":{"E":{"name":"E","type":"dart.core.Object"}}}