{"name":"ObservableBox","qualifiedName":"observe/observe.ObservableBox","comment":"<p>An observable box that holds a value. Use this if you want to store a single\nvalue. For other cases, it is better to use <a>observe/observe.ObservableList</a>,\n<a>observe/observe.ObservableMap</a>, or a custom <a>observe/observe.Observable</a> implementation based on\n<a>observe/observe.Observable</a>. The property name for changes is \"value\".</p>","isAbstract":false,"superclass":"observe/observe.ChangeNotifier","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"value=":{"name":"value=","qualifiedName":"observe/observe.ObservableBox.value=","comment":"","commentFrom":"observe.ObservableBox.value=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newValue":{"name":"newValue","optional":false,"named":false,"default":false,"type":[{"outer":"observe/observe.ObservableBox.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"observe/observe.reflectable","parameters":[]}]}},"getters":{"value":{"name":"value","qualifiedName":"observe/observe.ObservableBox.value","comment":"","commentFrom":"observe.ObservableBox.value","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe/observe.ObservableBox.T","inner":[]}],"parameters":{},"annotations":[{"name":"observe/observe.reflectable","parameters":[]}]}},"constructors":{"":{"name":"","qualifiedName":"observe/observe.ObservableBox.ObservableBox-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"initialValue":{"name":"initialValue","optional":true,"named":false,"default":false,"type":[{"outer":"observe/observe.ObservableBox.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"toString":{"name":"toString","qualifiedName":"observe/observe.ObservableBox.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"changes":{"name":"changes","qualifiedName":"observe/observe.ObservableBox.changes","comment":"<p>The stream of change records to this object. Records will be delivered\nasynchronously.</p>\n<p><a>observe/observe.ObservableBox.deliverChanges</a> can be called to force synchronous delivery.</p>","commentFrom":"observe.Observable.changes","inheritedFrom":"observe.ChangeNotifier.changes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"observe/observe.ChangeRecord","inner":[]}]}]}],"parameters":{},"annotations":[]},"hasObservers":{"name":"hasObservers","qualifiedName":"observe/observe.ObservableBox.hasObservers","comment":"<p>True if this object has any observers, and should call\n<a>observe/observe.ObservableBox.notifyPropertyChange</a> for changes.</p>","commentFrom":"","inheritedFrom":"observe.ChangeNotifier.hasObservers","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"observe/observe.ObservableBox.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>observe/observe.ObservableBox.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"observe/observe.ObservableBox.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"observe/observe.ObservableBox.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>observe/observe.ObservableBox.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>observe/observe.ObservableBox.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"deliverChanges":{"name":"deliverChanges","qualifiedName":"observe/observe.ObservableBox.deliverChanges","comment":"<p>Synchronously deliver pending <a>observe/observe.ObservableBox.changes</a>. Returns true if any records were\ndelivered, otherwise false.</p>","commentFrom":"observe.Observable.deliverChanges","inheritedFrom":"observe.ChangeNotifier.deliverChanges","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"observe/observe.ObservableBox.noSuchMethod","comment":"<p><a>observe/observe.ObservableBox.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>observe/observe.ObservableBox.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>observe/observe.ObservableBox.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>observe/observe.ObservableBox.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"notifyChange":{"name":"notifyChange","qualifiedName":"observe/observe.ObservableBox.notifyChange","comment":"<p>Notify observers of a change.</p>\n<p>For most objects <a>observe/observe.ObservableBox.notifyPropertyChange</a> is more convenient, but\ncollections sometimes deliver other types of changes such as a\n<a>observe/observe.ListChangeRecord</a>.</p>\n<p>Notes:\n- This is <em>not</em> required for fields if you mixin or extend <a>observe/observe.Observable</a>,\n  but you can use it for computed properties.\n- Unlike <a>observe/observe.ChangeNotifier</a> this will not schedule <a>observe/observe.ObservableBox.deliverChanges</a>; use\n  <a>observe/observe-src-observable.Observable.dirtyCheck</a> instead.</p>","commentFrom":"observe.Observable.notifyChange","inheritedFrom":"observe.ChangeNotifier.notifyChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"record":{"name":"record","optional":false,"named":false,"default":false,"type":[{"outer":"observe/observe.ChangeRecord","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"notifyPropertyChange":{"name":"notifyPropertyChange","qualifiedName":"observe/observe.ObservableBox.notifyPropertyChange","comment":"<p>Notify that the field name of this object has been changed.</p>\n<p>The <a>observe/observe.ObservableBox.notifyPropertyChange.oldValue</a> and <a>observe/observe.ObservableBox.notifyPropertyChange.newValue</a> are also recorded. If the two values are\nequal, no change will be recorded.</p>\n<p>For convenience this returns <a>observe/observe.ObservableBox.notifyPropertyChange.newValue</a>. This makes it easy to use in a\nsetter:</p>\n<pre><code>var _myField;\n@reflectable get myField =&gt; _myField;\n@reflectable set myField(value) {\n  _myField = notifyPropertyChange(#myField, _myField, value);\n}\n</code></pre>","commentFrom":"","inheritedFrom":"observe.ChangeNotifier.notifyPropertyChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"field":{"name":"field","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]},"oldValue":{"name":"oldValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"newValue":{"name":"newValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"observed":{"name":"observed","qualifiedName":"observe/observe.ObservableBox.observed","comment":"<p>Override this method to be called when the <a>observe/observe.ObservableBox.changes</a> are first observed.</p>","commentFrom":"","inheritedFrom":"observe.ChangeNotifier.observed","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"observe/observe.ObservableBox.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"unobserved":{"name":"unobserved","qualifiedName":"observe/observe.ObservableBox.unobserved","comment":"<p>Override this method to be called when the <a>observe/observe.ObservableBox.changes</a> are no longer being\nobserved.</p>","commentFrom":"","inheritedFrom":"observe.ChangeNotifier.unobserved","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}