{"name":"Transformer","qualifiedName":"observe/observe-transform.Transformer","comment":"<p>A <a>observe/observe-transform.Transformer</a> represents a processor that takes in one or more input\nassets and uses them to generate one or more output assets.</p>\n<p>Dart2js, a SASS->CSS processor, a CSS spriter, and a tool to concatenate\nfiles are all examples of transformers. To define your own transformation\nstep, extend (or implement) this class.</p>\n<p>If possible, transformers should implement DeclaringTransformer as well to\nhelp barback optimize the package graph.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":["observe/observe-transform.ObservableTransformer"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"allowedExtensions":{"name":"allowedExtensions","qualifiedName":"observe/observe-transform.Transformer.allowedExtensions","comment":"<p>Override this to return a space-separated list of file extensions that are\nallowed for the primary inputs to this transformer.</p>\n<p>Each extension must begin with a leading <code>.</code>.</p>\n<p>If you don't override <a>observe/observe-transform.Transformer.isPrimary</a> yourself, it defaults to allowing any\nasset whose extension matches one of the ones returned by this. If you\ndon't override <a>observe/observe-transform.Transformer.isPrimary</a> <em>or</em> this, it allows all files.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"observe/observe-transform.Transformer.Transformer-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"apply":{"name":"apply","qualifiedName":"observe/observe-transform.Transformer.apply","comment":"<p>Run this transformer on on the primary input specified by <a>observe/observe-transform.Transformer.apply.transform</a>.</p>\n<p>The <a>observe/observe-transform.Transformer.apply.transform</a> is used by the <a>observe/observe-transform.Transformer</a> for two purposes (in\naddition to accessing the primary input). It can call <code>getInput()</code> to\nrequest additional input assets. It also calls <code>addOutput()</code> to provide\ngenerated assets back to the system. Either can be called multiple times,\nin any order.</p>\n<p>In other words, a Transformer's job is to find all inputs for a\ntransform, starting at the primary input, then generate all output assets\nand yield them back to the transform.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"transform":{"name":"transform","optional":false,"named":false,"default":false,"type":[{"outer":"barback-transform.Transform","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isPrimary":{"name":"isPrimary","qualifiedName":"observe/observe-transform.Transformer.isPrimary","comment":"<p>Returns <code>true</code> if <a>observe/observe-transform.Transformer.isPrimary.id</a> can be a primary input for this transformer.</p>\n<p>While a transformer can read from multiple input files, one must be the\n\"primary\" input. This asset determines whether the transformation should\nbe run at all. If the primary input is removed, the transformer will no\nlonger be run.</p>\n<p>A concrete example is dart2js. When you run dart2js, it will traverse\nall of the imports in your Dart source files and use the contents of all\nof those to generate the final JS. However you still run dart2js \"on\" a\nsingle file: the entrypoint Dart file that has your <code>main()</code> method.\nThis entrypoint file would be the primary input.</p>\n<p>If this is not overridden, defaults to allow any asset whose extension\nmatches one of the ones returned by <a>observe/observe-transform.Transformer.allowedExtensions</a>. If <em>that</em> is\nnot overridden, allows all assets.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"barback-asset_id.AssetId","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"observe/observe-transform.Transformer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"observe/observe-transform.Transformer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>observe/observe-transform.Transformer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"observe/observe-transform.Transformer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"observe/observe-transform.Transformer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>observe/observe-transform.Transformer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>observe/observe-transform.Transformer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"observe/observe-transform.Transformer.noSuchMethod","comment":"<p><a>observe/observe-transform.Transformer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>observe/observe-transform.Transformer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>observe/observe-transform.Transformer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>observe/observe-transform.Transformer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"observe/observe-transform.Transformer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}