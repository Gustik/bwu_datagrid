{"name":"PolymerExpressions","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions","comment":"","isAbstract":false,"superclass":"polymer_expressions/polymer_expressions.BindingDelegate","implements":[],"subclass":[],"variables":{"DEFAULT_GLOBALS":{"name":"DEFAULT_GLOBALS","qualifiedName":"polymer/polymer.PolymerExpressions.DEFAULT_GLOBALS","comment":"<p>The default <a>polymer/polymer.PolymerExpressions.globals</a> to use for Polymer expressions.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.Map","inner":[]}],"annotations":[]},"globals":{"name":"globals","qualifiedName":"polymer/polymer.PolymerExpressions.globals","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.PolymerExpressions-","comment":"<p>Creates a new binding delegate for Polymer expressions, with the provided\nvariables used as <a>polymer_expressions/polymer_expressions.PolymerExpressions.PolymerExpressions-.globals</a>. If no globals are supplied, a copy of the\n<a>polymer_expressions/polymer_expressions.PolymerExpressions.DEFAULT_GLOBALS</a> will be used.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"globals":{"name":"globals","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"prepareBinding":{"name":"prepareBinding","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.prepareBinding","comment":"<p>Prepares a binding. This is called immediately after parsing a mustache\ntoken with <code>{{ path }}</code> in the context of the <a>polymer_expressions/polymer_expressions.PolymerExpressions.prepareBinding.node</a> and the property named\n<a>polymer_expressions/polymer_expressions.PolymerExpressions.prepareBinding.name</a>. This should return a function that will be passed the actual\nnode and model, and either returns null or an object with a <code>value</code>\nproperty. This allows the syntax to reinterpret the model for each binding.</p>","commentFrom":"template_binding.BindingDelegate.prepareBinding","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"prepareInstanceModel":{"name":"prepareInstanceModel","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.prepareInstanceModel","comment":"<p>Returns a function that can optionally replace the model that will be\npassed to <a>polymer_expressions/template_binding.TemplateBindExtension.createInstance</a>. This can be used to\nimplement syntax such as <code>&lt;template repeat=\"{{ item in items }}\"&gt;</code> by\nensuring that the returned model has the \"item\" name available.</p>","commentFrom":"template_binding.BindingDelegate.prepareInstanceModel","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>polymer_expressions/polymer_expressions.PolymerExpressions.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>polymer_expressions/polymer_expressions.PolymerExpressions.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>polymer_expressions/polymer_expressions.PolymerExpressions.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.noSuchMethod","comment":"<p><a>polymer_expressions/polymer_expressions.PolymerExpressions.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>polymer_expressions/polymer_expressions.PolymerExpressions.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>polymer_expressions/polymer_expressions.PolymerExpressions.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>polymer_expressions/polymer_expressions.PolymerExpressions.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"prepareBinding":{"name":"prepareBinding","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.prepareBinding","comment":"<p>Prepares a binding. This is called immediately after parsing a mustache\ntoken with <code>{{ path }}</code> in the context of the <a>polymer_expressions/polymer_expressions.PolymerExpressions.prepareBinding.node</a> and the property named\n<a>polymer_expressions/polymer_expressions.PolymerExpressions.prepareBinding.name</a>. This should return a function that will be passed the actual\nnode and model, and either returns null or an object with a <code>value</code>\nproperty. This allows the syntax to reinterpret the model for each binding.</p>","commentFrom":"","inheritedFrom":"polymer_expressions.BindingDelegate.prepareBinding","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding-src-binding_delegate.PrepareBindingFunction","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"prepareInstanceModel":{"name":"prepareInstanceModel","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.prepareInstanceModel","comment":"<p>Returns a function that can optionally replace the model that will be\npassed to <a>polymer_expressions/template_binding.TemplateBindExtension.createInstance</a>. This can be used to\nimplement syntax such as <code>&lt;template repeat=\"{{ item in items }}\"&gt;</code> by\nensuring that the returned model has the \"item\" name available.</p>","commentFrom":"","inheritedFrom":"polymer_expressions.BindingDelegate.prepareInstanceModel","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding-src-binding_delegate.PrepareInstanceModelFunction","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"prepareInstancePositionChanged":{"name":"prepareInstancePositionChanged","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.prepareInstancePositionChanged","comment":"<p>Returns a function that will be called whenever the position of an item\ninside this template changes.</p>","commentFrom":"","inheritedFrom":"polymer_expressions.BindingDelegate.prepareInstancePositionChanged","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding-src-binding_delegate.PrepareInstancePositionChangedFunction","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"polymer_expressions/polymer_expressions.PolymerExpressions.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}