{"name":"AstFactory","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"binary":{"name":"binary","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.binary","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.binary","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.BinaryOperator","inner":[]}],"parameters":{"l":{"name":"l","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]},"op":{"name":"op","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"r":{"name":"r","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"empty":{"name":"empty","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.empty","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.empty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.EmptyExpression","inner":[]}],"parameters":{},"annotations":[]},"getter":{"name":"getter","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.getter","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.getter","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.Getter","inner":[]}],"parameters":{"g":{"name":"g","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]},"n":{"name":"n","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"identifier":{"name":"identifier","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.identifier","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.identifier","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.Identifier","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"inExpr":{"name":"inExpr","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.inExpr","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.inExpr","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.InExpression","inner":[]}],"parameters":{"l":{"name":"l","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]},"r":{"name":"r","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"index":{"name":"index","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.index","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.index","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.Index","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]},"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"invoke":{"name":"invoke","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.invoke","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.invoke","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.Invoke","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]},"m":{"name":"m","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"a":{"name":"a","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"literal":{"name":"literal","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.literal","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.literal","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.Literal","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"mapLiteral":{"name":"mapLiteral","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.mapLiteral","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.mapLiteral","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.MapLiteral","inner":[]}],"parameters":{"entries":{"name":"entries","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"polymer_expressions/polymer_expressions-expression.MapLiteralEntry","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"mapLiteralEntry":{"name":"mapLiteralEntry","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.mapLiteralEntry","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.mapLiteralEntry","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.MapLiteralEntry","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Literal","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parenthesized":{"name":"parenthesized","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.parenthesized","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.parenthesized","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.ParenthesizedExpression","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ternary":{"name":"ternary","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.ternary","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.ternary","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.TernaryOperator","inner":[]}],"parameters":{"c":{"name":"c","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]},"t":{"name":"t","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]},"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"unary":{"name":"unary","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.unary","comment":"","commentFrom":"polymer_expressions-expression.AstFactory.unary","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.UnaryOperator","inner":[]}],"parameters":{"op":{"name":"op","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>polymer_expressions/polymer_expressions-expression.AstFactory.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>polymer_expressions/polymer_expressions-expression.AstFactory.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>polymer_expressions/polymer_expressions-expression.AstFactory.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.noSuchMethod","comment":"<p><a>polymer_expressions/polymer_expressions-expression.AstFactory.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>polymer_expressions/polymer_expressions-expression.AstFactory.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>polymer_expressions/polymer_expressions-expression.AstFactory.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>polymer_expressions/polymer_expressions-expression.AstFactory.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"polymer_expressions/polymer_expressions-expression.AstFactory.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}