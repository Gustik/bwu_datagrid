{"name":"TernaryObserver","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver","comment":"","isAbstract":false,"superclass":"polymer_expressions/polymer_expressions-eval.ExpressionObserver","implements":["polymer_expressions/polymer_expressions-expression.TernaryOperator"],"subclass":[],"variables":{"condition":{"name":"condition","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.condition","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"polymer_expressions/polymer_expressions-eval.ExpressionObserver","inner":[]}],"annotations":[]},"falseExpr":{"name":"falseExpr","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.falseExpr","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"polymer_expressions/polymer_expressions-eval.ExpressionObserver","inner":[]}],"annotations":[]},"trueExpr":{"name":"trueExpr","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.trueExpr","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"polymer_expressions/polymer_expressions-eval.ExpressionObserver","inner":[]}],"annotations":[]}},"inheritedVariables":{"condition":{"name":"condition","qualifiedName":"polymer_expressions/polymer_expressions-expression.TernaryOperator.condition","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"annotations":[]},"falseExpr":{"name":"falseExpr","qualifiedName":"polymer_expressions/polymer_expressions-expression.TernaryOperator.falseExpr","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"annotations":[]},"trueExpr":{"name":"trueExpr","qualifiedName":"polymer_expressions/polymer_expressions-expression.TernaryOperator.trueExpr","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.TernaryObserver-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expr":{"name":"expr","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-expression.TernaryOperator","inner":[]}],"value":null,"annotations":[]},"condition":{"name":"condition","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-eval.ExpressionObserver","inner":[]}],"value":null,"annotations":[]},"trueExpr":{"name":"trueExpr","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-eval.ExpressionObserver","inner":[]}],"value":null,"annotations":[]},"falseExpr":{"name":"falseExpr","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-eval.ExpressionObserver","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"accept":{"name":"accept","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.accept","comment":"","commentFrom":"polymer_expressions-expression.TernaryOperator.accept","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-visitor.Visitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"currentValue":{"name":"currentValue","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.currentValue","comment":"","commentFrom":"","inheritedFrom":"polymer_expressions-eval.ExpressionObserver.currentValue","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{},"annotations":[]},"expression":{"name":"expression","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.expression","comment":"","commentFrom":"","inheritedFrom":"polymer_expressions-eval.ExpressionObserver.expression","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-expression.Expression","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>polymer_expressions/polymer_expressions-eval.TernaryObserver.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"polymer_expressions-expression.TernaryOperator.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"onUpdate":{"name":"onUpdate","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.onUpdate","comment":"","commentFrom":"","inheritedFrom":"polymer_expressions-eval.ExpressionObserver.onUpdate","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and other are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>polymer_expressions/polymer_expressions-eval.TernaryObserver.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"polymer_expressions-expression.TernaryOperator.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"o":{"name":"o","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"accept":{"name":"accept","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.accept","comment":"","commentFrom":"","inheritedFrom":"polymer_expressions-expression.TernaryOperator.accept","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-visitor.Visitor","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.noSuchMethod","comment":"<p><a>polymer_expressions/polymer_expressions-eval.TernaryObserver.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>polymer_expressions/polymer_expressions-eval.TernaryObserver.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>polymer_expressions/polymer_expressions-eval.TernaryObserver.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>polymer_expressions/polymer_expressions-eval.TernaryObserver.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"polymer_expressions-expression.TernaryOperator.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"update":{"name":"update","qualifiedName":"polymer_expressions/polymer_expressions-eval.TernaryObserver.update","comment":"","commentFrom":"","inheritedFrom":"polymer_expressions-eval.ExpressionObserver.update","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions/polymer_expressions-eval.Scope","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}