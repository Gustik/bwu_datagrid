{"name":"Scope","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope","comment":"<p>A scope in polymer expressions that can map names to objects. Scopes contain\na set of named variables and a unique model object. The scope structure\nis then used to lookup names using the <code>[]</code> operator. The lookup first\nsearches for the name in local variables, then in global variables,\nand then finally looks up the name as a property in the model.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["polymer_expressions/polymer_expressions-eval.Indexable"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"model":{"name":"model","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.model","comment":"<p>Return the unique model in this scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.Scope-","comment":"<p>Create a scope containing a <a>polymer_expressions/polymer_expressions-eval.Scope.Scope-.model</a> and all of <a>polymer_expressions/polymer_expressions-eval.Scope.Scope-.variables</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-eval.Scope","inner":[]}],"parameters":{"model":{"name":"model","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"variables":{"name":"variables","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.[]","comment":"<p>Lookup the value of <a>polymer_expressions/polymer_expressions-eval.Scope.[].name</a> in the current scope. If <a>polymer_expressions/polymer_expressions-eval.Scope.[].name</a> is 'this', then\nwe return the <a>polymer_expressions/polymer_expressions-eval.Scope.model</a>. For any other name, this finds the first variable\nmatching <a>polymer_expressions/polymer_expressions-eval.Scope.[].name</a> or, if none exists, the property <a>polymer_expressions/polymer_expressions-eval.Scope.[].name</a> in the <a>polymer_expressions/polymer_expressions-eval.Scope.model</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.[]=","comment":"","commentFrom":"polymer_expressions-eval.Indexable.[]=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"childScope":{"name":"childScope","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.childScope","comment":"<p>Create a new scope extending this scope with an additional variable.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer_expressions/polymer_expressions-eval.Scope","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>polymer_expressions/polymer_expressions-eval.Scope.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>polymer_expressions/polymer_expressions-eval.Scope.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>polymer_expressions/polymer_expressions-eval.Scope.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.[]","comment":"","commentFrom":"","inheritedFrom":"polymer_expressions-eval.Indexable.[]","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions-eval.Indexable.K","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.[]=","comment":"","commentFrom":"","inheritedFrom":"polymer_expressions-eval.Indexable.[]=","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions-eval.Indexable.K","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"polymer_expressions-eval.Indexable.V","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.noSuchMethod","comment":"<p><a>polymer_expressions/polymer_expressions-eval.Scope.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>polymer_expressions/polymer_expressions-eval.Scope.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>polymer_expressions/polymer_expressions-eval.Scope.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>polymer_expressions/polymer_expressions-eval.Scope.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"polymer_expressions/polymer_expressions-eval.Scope.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}