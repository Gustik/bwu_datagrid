{"name":"Transform","qualifiedName":"barback/barback.Transform","comment":"<p>While a Transformer represents a <em>kind</em> of transformation, this defines\none specific usage of it on a set of files.</p>\n<p>This ephemeral object exists only during an actual transform application to\nfacilitate communication between the Transformer and the code hosting\nthe transformation. It lets the Transformer access inputs and generate\noutputs.</p>","isAbstract":false,"superclass":"barback/barback.BaseTransform","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"primaryInput":{"name":"primaryInput","qualifiedName":"barback/barback.Transform.primaryInput","comment":"<p>Gets the primary input asset.</p>\n<p>While a transformation can use multiple input assets, one must be a\nspecial \"primary\" asset. This will be the \"entrypoint\" or \"main\" input\nfile for a transformation.</p>\n<p>For example, with a dart2js transform, the primary input would be the\nentrypoint Dart file. All of the other Dart files that that imports\nwould be secondary inputs.</p>\n<p>This method may fail at runtime with an <a>barback/barback.AssetNotFoundException</a> if called\nasynchronously after the transform begins running. The primary input may\nbecome unavailable while this transformer is running due to asset changes\nearlier in the graph. You can ignore the error if this happens: the\ntransformer will be re-run automatically for you.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"barback/barback.Asset","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"addOutput":{"name":"addOutput","qualifiedName":"barback/barback.Transform.addOutput","comment":"<p>Stores <a>barback/barback.Transform.addOutput.output</a> as the output created by this transformation.</p>\n<p>A transformation can output as many assets as it wants.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"output":{"name":"output","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.Asset","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getInput":{"name":"getInput","qualifiedName":"barback/barback.Transform.getInput","comment":"<p>Gets the asset for an input <a>barback/barback.Transform.getInput.id</a>.</p>\n<p>If an input with <a>barback/barback.Transform.getInput.id</a> cannot be found, throws an <a>barback/barback.AssetNotFoundException</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"barback/barback.Asset","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"hasInput":{"name":"hasInput","qualifiedName":"barback/barback.Transform.hasInput","comment":"<p>A convenience method to return whether or not an asset exists.</p>\n<p>This is equivalent to calling <a>barback/barback.Transform.getInput</a> and catching an\n<a>barback/barback.AssetNotFoundException</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readInput":{"name":"readInput","qualifiedName":"barback/barback.Transform.readInput","comment":"<p>A convenience method to the contents of the input with <a>barback/barback.Transform.readInput.id</a>.</p>\n<p>This is equivalent to calling <a>barback/barback.Transform.getInput</a> followed by <a>barback/barback-asset.Asset.read</a>.</p>\n<p>If the asset was created from a <a>dart-core.String</a>, this returns its UTF-8 encoding.</p>\n<p>If an input with <a>barback/barback.Transform.readInput.id</a> cannot be found, throws an <a>barback/barback.AssetNotFoundException</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readInputAsString":{"name":"readInputAsString","qualifiedName":"barback/barback.Transform.readInputAsString","comment":"<p>A convenience method to the contents of the input with <a>barback/barback.Transform.readInputAsString.id</a> as a string.</p>\n<p>This is equivalent to calling <a>barback/barback.Transform.getInput</a> followed by <a>barback/barback-asset.Asset.readAsString</a>.</p>\n<p>If the asset was created from a <a>dart-core.String</a> the original string is always\nreturned and <a>barback/barback.Transform.readInputAsString.encoding</a> is ignored. Otherwise, the binary data of the\nasset is decoded using <a>barback/barback.Transform.readInputAsString.encoding</a>, which defaults to <a>barback/dart-convert.UTF8</a>.</p>\n<p>If an input with <a>barback/barback.Transform.readInputAsString.id</a> cannot be found, throws an <a>barback/barback.AssetNotFoundException</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"barback/barback.Transform.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>barback/barback.Transform.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"logger":{"name":"logger","qualifiedName":"barback/barback.Transform.logger","comment":"<p>A logger so that the Transformer can report build details.</p>","commentFrom":"","inheritedFrom":"barback.BaseTransform.logger","static":false,"abstract":false,"constant":false,"return":[{"outer":"barback/barback.TransformLogger","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"barback/barback.Transform.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"barback/barback.Transform.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>barback/barback.Transform.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>barback/barback.Transform.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"consumePrimary":{"name":"consumePrimary","qualifiedName":"barback/barback.Transform.consumePrimary","comment":"<p>Consume the primary input so that it doesn't get processed by future\nphases or emitted once processing has finished.</p>\n<p>Normally the primary input will automatically be forwarded unless the\ntransformer overwrites it by emitting an input with the same id. This\nallows the transformer to tell barback not to forward the primary input\neven if it's not overwritten.</p>","commentFrom":"","inheritedFrom":"barback.BaseTransform.consumePrimary","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"barback/barback.Transform.noSuchMethod","comment":"<p><a>barback/barback.Transform.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>barback/barback.Transform.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>barback/barback.Transform.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>barback/barback.Transform.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"barback/barback.Transform.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}