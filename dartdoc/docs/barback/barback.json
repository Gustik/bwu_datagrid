{"name":"barback","qualifiedName":"barback/barback","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"Asset","qualifiedName":"barback/barback.Asset","preview":"<p>A blob of content.</p>"},{"name":"AssetId","qualifiedName":"barback/barback.AssetId","preview":"<p>Identifies an asset within a package.</p>"},{"name":"AssetSet","qualifiedName":"barback/barback.AssetSet","preview":"<p>A set of <a>barback/barback.Asset</a>s with distinct IDs.</p>"},{"name":"Barback","qualifiedName":"barback/barback.Barback","preview":"<p>A general-purpose asynchronous build dependency graph manager.</p>"},{"name":"BarbackMode","qualifiedName":"barback/barback.BarbackMode","preview":"<p>Enum-like class for specifying a mode that transformers may be run in.</p>"},{"name":"BarbackSettings","qualifiedName":"barback/barback.BarbackSettings","preview":"<p>A generic settings object for providing configuration details to\nTransformers.</p>"},{"name":"BaseTransform","qualifiedName":"barback/barback.BaseTransform","preview":"<p>The base class for the ephemeral transform objects that are passed to\ntransformers.</p>"},{"name":"BaseTransformController","qualifiedName":"barback/barback.BaseTransformController","preview":"<p>The base class for controllers of subclasses of <a>barback/barback.BaseTransform</a>.</p>"},{"name":"BuildResult","qualifiedName":"barback/barback.BuildResult","preview":"<p>An event indicating that the cascade has finished building all assets.</p>"},{"name":"DeclaringTransform","qualifiedName":"barback/barback.DeclaringTransform","preview":"<p>A transform for <a>barback/barback.DeclaringTransform</a>ers that allows them to declare the ids\nof the outputs they'll generate without generating the concrete bodies of\nthose outputs.</p>"},{"name":"DeclaringTransformer","qualifiedName":"barback/barback.DeclaringTransformer","preview":"<p>An interface for Transformers that can cheaply figure out which assets\nthey'll emit without doing the work of actually creating those assets.</p>"},{"name":"LazyTransformer","qualifiedName":"barback/barback.LazyTransformer","preview":"<p>An interface for Transformers that indicates that the transformer's\noutputs shouldn't be generated until requested.</p>"},{"name":"LogEntry","qualifiedName":"barback/barback.LogEntry","preview":"<p>One message logged during a transform.</p>"},{"name":"LogLevel","qualifiedName":"barback/barback.LogLevel","preview":"<p>The severity of a logged message.</p>"},{"name":"PackageProvider","qualifiedName":"barback/barback.PackageProvider","preview":"<p>API for locating and accessing packages on disk.</p>"},{"name":"Transform","qualifiedName":"barback/barback.Transform","preview":"<p>While a Transformer represents a <em>kind</em> of transformation, this defines\none specific usage of it on a set of files.</p>"},{"name":"TransformInfo","qualifiedName":"barback/barback.TransformInfo","preview":"<p>Information about a single transform in the barback graph.</p>"},{"name":"TransformLogger","qualifiedName":"barback/barback.TransformLogger","preview":"<p>Object used to report warnings and errors encountered while running a\ntransformer.</p>"},{"name":"Transformer","qualifiedName":"barback/barback.Transformer","preview":"<p>A <a>barback/barback.Transformer</a> represents a processor that takes in one or more input\nassets and uses them to generate one or more output assets.</p>"},{"name":"TransformerGroup","qualifiedName":"barback/barback.TransformerGroup","preview":"<p>A <a>barback/barback.TransformerGroup</a> encapsulates a phased collection of transformers.</p>"}],"typedef":{"LogFunction":{"name":"LogFunction","qualifiedName":"barback/barback.LogFunction","comment":"","return":"void","parameters":{"asset":{"name":"asset","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]},"level":{"name":"level","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.LogLevel","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"span":{"name":"span","optional":false,"named":false,"default":false,"type":[{"outer":"source_maps-span.Span","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}}},"error":[{"name":"AggregateException","qualifiedName":"barback/barback.AggregateException","preview":"<p>An error that wraps a collection of other <a>barback/barback.BarbackException</a>s.</p>"},{"name":"AssetCollisionException","qualifiedName":"barback/barback.AssetCollisionException","preview":"<p>Error thrown when two or more transformers both output an asset with <a>barback/barback.AssetCollisionException.id</a>.</p>"},{"name":"AssetLoadException","qualifiedName":"barback/barback.AssetLoadException","preview":"<p>Error thrown when a source asset <a>barback/barback.AssetLoadException.id</a> fails to load.</p>"},{"name":"AssetNotFoundException","qualifiedName":"barback/barback.AssetNotFoundException","preview":"<p>Error thrown when an asset with <a>barback/barback.AssetNotFoundException.id</a> cannot be found.</p>"},{"name":"BarbackException","qualifiedName":"barback/barback.BarbackException","preview":"<p>The interface for exceptions from the barback graph or its transformers.</p>"},{"name":"InvalidOutputException","qualifiedName":"barback/barback.InvalidOutputException","preview":"<p>Error thrown when a transformer outputs an asset to a different package than\nthe primary input's.</p>"},{"name":"MissingInputException","qualifiedName":"barback/barback.MissingInputException","preview":"<p>Error thrown when a transformer requests an input <a>barback/barback.MissingInputException.id</a> which cannot be\nfound.</p>"},{"name":"TransformerException","qualifiedName":"barback/barback.TransformerException","preview":"<p>Error wrapping an exception thrown by a transform.</p>"}]},"packageName":"barback","packageIntro":"<p>Barback is an asset build system. It is the library underlying\n<a href=\"http://pub.dartlang.org/doc/\">pub</a>'s asset transformers in <code>pub build</code> and\n<code>pub serve</code>.</p>\n<p>Given a set of input files and a set of transformations (think compilers,\npreprocessors and the like), it will automatically apply the appropriate\ntransforms and generate output files. When inputs are modified, it automatically\nruns the transforms that are affected.</p>\n<p>To learn more, see <a href=\"http://pub.dartlang.org/doc/assets-and-transformers.html\">here</a>.</p>"}