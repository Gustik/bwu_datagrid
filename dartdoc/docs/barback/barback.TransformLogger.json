{"name":"TransformLogger","qualifiedName":"barback/barback.TransformLogger","comment":"<p>Object used to report warnings and errors encountered while running a\ntransformer.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"barback/barback.TransformLogger.TransformLogger-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_logFunction":{"name":"_logFunction","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.LogFunction","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"error":{"name":"error","qualifiedName":"barback/barback.TransformLogger.error","comment":"<p>Logs an error message.</p>\n<p>If <a>barback/barback.TransformLogger.error.asset</a> is provided, the log entry is associated with that asset.\nOtherwise it's associated with the primary input of transformer.\nIf present, <a>barback/barback.TransformLogger.error.span</a> indicates the location in the input asset that caused\nthe error.</p>\n<p>Logging any errors will cause Barback to consider the transformation to\nhave failed, much like throwing an exception. This means that neither the\nprimary input nor any outputs emitted by the transformer will be passed on\nto the following phase, and the build will be reported as having failed.</p>\n<p>Unlike throwing an exception, this doesn't cause a transformer to stop\nrunning. This makes it useful in cases where a single input may have\nmultiple errors that the user wants to know about.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"asset":{"name":"asset","optional":true,"named":true,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]},"span":{"name":"span","optional":true,"named":true,"default":false,"type":[{"outer":"source_maps-span.Span","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fine":{"name":"fine","qualifiedName":"barback/barback.TransformLogger.fine","comment":"<p>Logs a message that won't be displayed unless the user is running in\nverbose mode.</p>\n<p>If <a>barback/barback.TransformLogger.fine.asset</a> is provided, the log entry is associated with that asset.\nOtherwise it's associated with the primary input of transformer.\nIf <a>barback/barback.TransformLogger.fine.span</a> is provided, indicates the location in the input asset that\ncaused the message.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"asset":{"name":"asset","optional":true,"named":true,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]},"span":{"name":"span","optional":true,"named":true,"default":false,"type":[{"outer":"source_maps-span.Span","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"info":{"name":"info","qualifiedName":"barback/barback.TransformLogger.info","comment":"<p>Logs an informative message.</p>\n<p>If <a>barback/barback.TransformLogger.info.asset</a> is provided, the log entry is associated with that asset.\nOtherwise it's associated with the primary input of transformer.\nIf <a>barback/barback.TransformLogger.info.span</a> is provided, indicates the location in the input asset that\ncaused the message.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"asset":{"name":"asset","optional":true,"named":true,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]},"span":{"name":"span","optional":true,"named":true,"default":false,"type":[{"outer":"source_maps-span.Span","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"warning":{"name":"warning","qualifiedName":"barback/barback.TransformLogger.warning","comment":"<p>Logs a warning message.</p>\n<p>If <a>barback/barback.TransformLogger.warning.asset</a> is provided, the log entry is associated with that asset.\nOtherwise it's associated with the primary input of transformer.\nIf present, <a>barback/barback.TransformLogger.warning.span</a> indicates the location in the input asset that caused\nthe warning.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"asset":{"name":"asset","optional":true,"named":true,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]},"span":{"name":"span","optional":true,"named":true,"default":false,"type":[{"outer":"source_maps-span.Span","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"barback/barback.TransformLogger.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>barback/barback.TransformLogger.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"barback/barback.TransformLogger.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"barback/barback.TransformLogger.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>barback/barback.TransformLogger.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>barback/barback.TransformLogger.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"barback/barback.TransformLogger.noSuchMethod","comment":"<p><a>barback/barback.TransformLogger.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>barback/barback.TransformLogger.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>barback/barback.TransformLogger.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>barback/barback.TransformLogger.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"barback/barback.TransformLogger.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}