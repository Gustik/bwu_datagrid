{"name":"AssetId","qualifiedName":"barback/barback.AssetId","comment":"<p>Identifies an asset within a package.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Comparable"],"subclass":[],"variables":{"package":{"name":"package","qualifiedName":"barback/barback.AssetId.package","comment":"<p>The name of the package containing this asset.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"path":{"name":"path","qualifiedName":"barback/barback.AssetId.path","comment":"<p>The path to the asset relative to the root directory of <a>barback/barback.AssetId.package</a>.</p>\n<p>Source (i.e. read from disk) and generated (i.e. the output of a\nTransformer) assets all have paths. Even intermediate assets that are\ngenerated and then consumed by later transformations will still have\na path used to identify it.</p>\n<p>Asset paths always use forward slashes as path separators, regardless of\nthe host platform.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"extension":{"name":"extension","qualifiedName":"barback/barback.AssetId.extension","comment":"<p>Gets the file extension of the asset, if it has one, including the \".\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"barback/barback.AssetId.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>barback/barback.AssetId.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"barback/barback.AssetId.AssetId-","comment":"<p>Creates a new AssetId at <a>barback/barback.AssetId.AssetId-.path</a> within <a>barback/barback.AssetId.AssetId-.package</a>.</p>\n<p>The <a>barback/barback.AssetId.AssetId-.path</a> will be normalized: any backslashes will be replaced with\nforward slashes (regardless of host OS) and \".\" and \"..\" will be removed\nwhere possible.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"package":{"name":"package","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"deserialize":{"name":"deserialize","qualifiedName":"barback/barback.AssetId.AssetId-deserialize","comment":"<p>Deserializes an <a>barback/barback.AssetId</a> from <a>barback/barback.AssetId.AssetId-deserialize.data</a>, which must be the result of\ncalling <a>barback/barback.AssetId.serialize</a> on an existing <a>barback/barback.AssetId</a>.</p>\n<p>Note that this is intended for communicating ids across isolates and not\nfor persistent storage of asset identifiers. There is no guarantee of\nbackwards compatibility in serialization form across versions.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"barback/barback.AssetId.AssetId-parse","comment":"<p>Parses an <a>barback/barback.AssetId</a> string of the form \"package|path/to/asset.txt\".</p>\n<p>The <a>barback/barback.AssetId.path</a> will be normalized: any backslashes will be replaced with\nforward slashes (regardless of host OS) and \".\" and \"..\" will be removed\nwhere possible.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"barback/barback.AssetId","inner":[]}],"parameters":{"description":{"name":"description","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"barback/barback.AssetId.==","comment":"<p>Returns <code>true</code> of <a>barback/barback.AssetId.==.other</a> is an <a>barback/barback.AssetId</a> with the same package and path.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addExtension":{"name":"addExtension","qualifiedName":"barback/barback.AssetId.addExtension","comment":"<p>Returns a new <a>barback/barback.AssetId</a> with the same <a>barback/barback.AssetId.package</a> as this one and with the\n<a>barback/barback.AssetId.path</a> extended to include <a>barback/barback.AssetId.addExtension.extension</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"barback/barback.AssetId","inner":[]}],"parameters":{"extension":{"name":"extension","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"changeExtension":{"name":"changeExtension","qualifiedName":"barback/barback.AssetId.changeExtension","comment":"<p>Returns a new <a>barback/barback.AssetId</a> with the same <a>barback/barback.AssetId.package</a> and <a>barback/barback.AssetId.path</a> as this one\nbut with file extension <a>barback/barback.AssetId.changeExtension.newExtension</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"barback/barback.AssetId","inner":[]}],"parameters":{"newExtension":{"name":"newExtension","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"barback/barback.AssetId.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>barback/barback.AssetId.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>barback/barback.AssetId.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>barback/barback.AssetId.compareTo.other</a>,\nand zero if <code>this</code> and <a>barback/barback.AssetId.compareTo.other</a> are ordered together.</p>\n<p>The <a>barback/barback.AssetId.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"dart-core.Comparable.compareTo","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"barback/barback.AssetId","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"serialize":{"name":"serialize","qualifiedName":"barback/barback.AssetId.serialize","comment":"<p>Serializes this <a>barback/barback.AssetId</a> to an object that can be sent across isolates\nand passed to deserialize.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"barback/barback.AssetId.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"barback/barback.AssetId.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>barback/barback.AssetId.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"barback/barback.AssetId.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"barback/barback.AssetId.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>barback/barback.AssetId.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>barback/barback.AssetId.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"barback/barback.AssetId.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>barback/barback.AssetId.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>barback/barback.AssetId.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>barback/barback.AssetId.compareTo.other</a>,\nand zero if <code>this</code> and <a>barback/barback.AssetId.compareTo.other</a> are ordered together.</p>\n<p>The <a>barback/barback.AssetId.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Comparable.compareTo","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"barback/barback.AssetId.noSuchMethod","comment":"<p><a>barback/barback.AssetId.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>barback/barback.AssetId.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>barback/barback.AssetId.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>barback/barback.AssetId.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"barback/barback.AssetId.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}