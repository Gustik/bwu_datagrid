{"libraries":[{"packageName":"","name":"dart-async","qualifiedName":"dart-async","preview":"<p>Support for asynchronous programming,\nwith classes such as Future and Stream.</p>"},{"packageName":"","name":"dart-collection","qualifiedName":"dart-collection","preview":"<p>Classes and utilities that supplement the collection support in dart:core.</p>"},{"packageName":"","name":"dart-convert","qualifiedName":"dart-convert","preview":"<p>Encoders and decoders for converting between different data representations,\nincluding JSON and UTF-8.</p>"},{"packageName":"","name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>"},{"packageName":"","name":"dart-dom-html","qualifiedName":"dart-dom-html","preview":"<p>HTML elements and other resources for web-based applications that need to\ninteract with the browser and the DOM (Document Object Model).</p>"},{"packageName":"","name":"dart-dom-indexed_db","qualifiedName":"dart-dom-indexed_db","preview":"<p>A client-side key-value store with support for indexes.</p>"},{"packageName":"","name":"dart-dom-svg","qualifiedName":"dart-dom-svg","preview":"<p>Scalable Vector Graphics:\nTwo-dimensional vector graphics with support for events and animation.</p>"},{"packageName":"","name":"dart-dom-web_audio","qualifiedName":"dart-dom-web_audio","preview":"<p>High-fidelity audio programming in the browser.</p>"},{"packageName":"","name":"dart-dom-web_gl","qualifiedName":"dart-dom-web_gl","preview":"<p>3D programming in the browser.</p>"},{"packageName":"","name":"dart-dom-web_sql","qualifiedName":"dart-dom-web_sql","preview":"<p>An API for storing data in the browser that can be queried with SQL.</p>"},{"packageName":"","name":"dart-io","qualifiedName":"dart-io","preview":"<p>File, socket, HTTP, and other I/O support for server applications.</p>"},{"packageName":"","name":"dart-isolate","qualifiedName":"dart-isolate","preview":"<p>Concurrent programming using <em>isolates</em>:\nindependent workers that are similar to threads\nbut don't share memory,\ncommunicating only via messages.</p>"},{"packageName":"","name":"dart-js","qualifiedName":"dart-js","preview":"<p>Support for interoperating with JavaScript.</p>"},{"packageName":"","name":"dart-math","qualifiedName":"dart-math","preview":"<p>Mathematical constants and functions, plus a random number generator.</p>"},{"packageName":"","name":"dart-mirrors","qualifiedName":"dart-mirrors","preview":"<p>Basic reflection in Dart,\nwith support for introspection and dynamic evaluation.</p>"},{"packageName":"","name":"dart-profiler","qualifiedName":"dart-profiler"},{"packageName":"","name":"dart-typed_data","qualifiedName":"dart-typed_data","preview":"<p>Specialized integers and floating point numbers,\nwith SIMD support and efficient lists.</p>"},{"packageName":"analyzer","name":"analyzer","qualifiedName":"analyzer/analyzer","packageIntro":"<p>This code is part of an experimental port of the Editor's analysis engine from\nJava to Dart. While we will continue to support the Java version of the analysis\nengine and the services built on it, we also intend to provide the same services\nto Dart-based applications. This is very early code and we expect it to change,\npossibly in significant ways. While we are eager to see other people make use\nof the analysis engine, we also want to be clear, in case you are interested in\ndoing so, that the current API's should in no way be considered to be stable.</p>\n<p>In particular, this code was automatically translated from the Java\nimplementation. The Java implementation that was translated is still under\ndevelopment and will continue to change over time. The translator that was used\nis still under development and the output produced by the translator will change\nover time. Therefore, the API presented by this code will change. In addition,\nany edits made to this code will be overwritten the next time we re-generate\nthis code.</p>\n<p>If you are interested in using this code, despite the disclaimer above,\nfantastic! Please let the editor team know so that we can get a sense of the\ninterest in it. Also, feel free to ask questions and make requests for\nadditional functionality.</p>"},{"packageName":"analyzer","name":"formatter","qualifiedName":"analyzer/formatter","packageIntro":"<p>This code is part of an experimental port of the Editor's analysis engine from\nJava to Dart. While we will continue to support the Java version of the analysis\nengine and the services built on it, we also intend to provide the same services\nto Dart-based applications. This is very early code and we expect it to change,\npossibly in significant ways. While we are eager to see other people make use\nof the analysis engine, we also want to be clear, in case you are interested in\ndoing so, that the current API's should in no way be considered to be stable.</p>\n<p>In particular, this code was automatically translated from the Java\nimplementation. The Java implementation that was translated is still under\ndevelopment and will continue to change over time. The translator that was used\nis still under development and the output produced by the translator will change\nover time. Therefore, the API presented by this code will change. In addition,\nany edits made to this code will be overwritten the next time we re-generate\nthis code.</p>\n<p>If you are interested in using this code, despite the disclaimer above,\nfantastic! Please let the editor team know so that we can get a sense of the\ninterest in it. Also, feel free to ask questions and make requests for\nadditional functionality.</p>"},{"packageName":"analyzer","name":"options","qualifiedName":"analyzer/options","packageIntro":"<p>This code is part of an experimental port of the Editor's analysis engine from\nJava to Dart. While we will continue to support the Java version of the analysis\nengine and the services built on it, we also intend to provide the same services\nto Dart-based applications. This is very early code and we expect it to change,\npossibly in significant ways. While we are eager to see other people make use\nof the analysis engine, we also want to be clear, in case you are interested in\ndoing so, that the current API's should in no way be considered to be stable.</p>\n<p>In particular, this code was automatically translated from the Java\nimplementation. The Java implementation that was translated is still under\ndevelopment and will continue to change over time. The translator that was used\nis still under development and the output produced by the translator will change\nover time. Therefore, the API presented by this code will change. In addition,\nany edits made to this code will be overwritten the next time we re-generate\nthis code.</p>\n<p>If you are interested in using this code, despite the disclaimer above,\nfantastic! Please let the editor team know so that we can get a sense of the\ninterest in it. Also, feel free to ask questions and make requests for\nadditional functionality.</p>"},{"packageName":"args","name":"args","qualifiedName":"args/args","preview":"<p>Parser support for transforming raw command-line arguments into a set\nof options and values.</p>","packageIntro":""},{"packageName":"barback","name":"barback","qualifiedName":"barback/barback","packageIntro":"<p>Barback is an asset build system. It is the library underlying\n<a href=\"http://pub.dartlang.org/doc/\">pub</a>'s asset transformers in <code>pub build</code> and\n<code>pub serve</code>.</p>\n<p>Given a set of input files and a set of transformations (think compilers,\npreprocessors and the like), it will automatically apply the appropriate\ntransforms and generate output files. When inputs are modified, it automatically\nruns the transforms that are affected.</p>\n<p>To learn more, see <a href=\"http://pub.dartlang.org/doc/assets-and-transformers.html\">here</a>.</p>"},{"packageName":"bwu_datagrid","name":"bwu_dart-bwu_datagrid-datagrid","qualifiedName":"bwu_datagrid/bwu_dart-bwu_datagrid-datagrid","packageIntro":"<h1>Welcome to BWU Datagrid</h1>\n<p>Find documentation and examples in <a href=\"https://github.com/bwu-dart/bwu_datagrid/wiki\">the wiki</a>.</p>\n<p>**UPDATE:  May 16th, 2014</p>\n<h2>BWU Datagrid is an advanced Dart Polymer grid/spreadsheet component</h2>\n<p>BWU Datagrid is a Dart port from <a href=\"https://github.com/mleibman/SlickGrid\">SlickGrid</a> </p>\n<h3>Status</h3>\n<h4>some things are already working:</h4><ul><li>Basic rendering</li><li>Scrolling and manual column resize</li><li>Editing, Custom Editors, Custom Validators</li><li>The examples work also when built to JavaScript</li></ul>\n<h3>Some highlights (when it's ready):</h3>\n<p>(This description is copied from SlickGrid. The Dart port is not there yet) </p><ul><li>Adaptive virtual scrolling (handle hundreds of thousands of rows with extreme responsiveness)</li><li>Extremely fast rendering speed </li><li>~~Supports jQuery UI Themes~~ (not sure yet)</li><li>Background post-rendering for richer cells</li><li>Configurable &amp; customizable</li><li>Full keyboard navigation</li><li>Column resize/reorder/show/hide</li><li>Column autosizing &amp; force-fit</li><li>Pluggable cell formatters &amp; editors</li><li>Support for editing and creating new rows.</li><li>Grouping, filtering, custom aggregators, and more!</li><li>Advanced detached &amp; multi-field editors with undo/redo support.</li><li>“GlobalEditorLock” to manage concurrent edits in cases where multiple Views on a page can edit the same data.</li><li>Support for <a href=\"http://stackoverflow.com/a/2569488/1269037\">millions of rows</a></li></ul>"},{"packageName":"code_transformers","name":"code_transformers-assets","qualifiedName":"code_transformers/code_transformers-assets","preview":"<p>Common methods used by transfomers for dealing with asset IDs.</p>","packageIntro":""},{"packageName":"code_transformers","name":"code_transformers-resolver","qualifiedName":"code_transformers/code_transformers-resolver","preview":"<p>Tools for working with resolved ASTs from Barback transformers.</p>","packageIntro":""},{"packageName":"code_transformers","name":"code_transformers-tests","qualifiedName":"code_transformers/code_transformers-tests","preview":"<p>Collection of utilities which are useful for creating unit tests for\nBarback transformers.</p>","packageIntro":""},{"packageName":"collection","name":"dart-pkg-collection","qualifiedName":"collection/dart-pkg-collection","preview":"<p>Exports all the individual parts of the collection-helper library.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-algorithms","qualifiedName":"collection/dart-pkg-collection-algorithms","preview":"<p>Operations on collections.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-equality","qualifiedName":"collection/dart-pkg-collection-equality","preview":"<p>Defines equality relations on collections.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-iterable_zip","qualifiedName":"collection/dart-pkg-collection-iterable_zip","preview":"<p>Zipping multiple iterables into one iterable of tuples of values.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-priority_queue","qualifiedName":"collection/dart-pkg-collection-priority_queue","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-wrappers","qualifiedName":"collection/dart-pkg-collection-wrappers","preview":"<p>Delegating wrappers for <a>dart-core.Iterable</a>, <a>dart-core.List</a>, <a>dart-core.Set</a>, <a>collection/dart-pkg-collection-wrappers.Queue</a> and <a>dart-core.Map</a>.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"html5lib","name":"dom","qualifiedName":"html5lib/dom","preview":"<p>A simple tree API that results from parsing html. Intended to be compatible\nwith dart:html, but right now it resembles the classic JS DOM.</p>","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre class=\"yaml\"><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre class=\"dart\"><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre class=\"bash\"><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"},{"packageName":"html5lib","name":"dom_parsing","qualifiedName":"html5lib/dom_parsing","preview":"<p>This library contains extra APIs that aren't in the DOM, but are useful\nwhen interacting with the parse tree.</p>","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre class=\"yaml\"><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre class=\"dart\"><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre class=\"bash\"><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"},{"packageName":"html5lib","name":"parser","qualifiedName":"html5lib/parser","preview":"<p>This library has a parser for HTML5 documents, that lets you parse HTML\neasily from a script or server side application:</p>","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre class=\"yaml\"><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre class=\"dart\"><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre class=\"bash\"><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"},{"packageName":"html5lib","name":"parser_console","qualifiedName":"html5lib/parser_console","preview":"<p>This library adds <code>dart:io</code> support to the HTML5 parser. Call\ninitDartIOSupport before calling the <a>html5lib/parser.parse</a> methods and they will accept\na <a>html5lib/dart-io.RandomAccessFile</a> as input, in addition to the other input types.</p>","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre class=\"yaml\"><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre class=\"dart\"><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre class=\"bash\"><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"},{"packageName":"logging","name":"logging","qualifiedName":"logging/logging","preview":"<p>Support for logging.</p>","packageIntro":""},{"packageName":"matcher","name":"matcher","qualifiedName":"matcher/matcher","preview":"<p>Support for specifying test expectations, such as for unit tests.</p>","packageIntro":""},{"packageName":"matcher","name":"matcher-mirror_matchers","qualifiedName":"matcher/matcher-mirror_matchers","preview":"<p>The mirror matchers library provides some additional matchers that\nmake use of <code>dart:mirrors</code>.</p>","packageIntro":""},{"packageName":"observe","name":"observe","qualifiedName":"observe/observe","preview":"<p>Support for observing changes in model-view architectures.</p>","packageIntro":""},{"packageName":"observe","name":"observe-html","qualifiedName":"observe/observe-html","preview":"<p>Helpers for exposing dart:html as observable data.</p>","packageIntro":""},{"packageName":"observe","name":"observe-mirrors_used","qualifiedName":"observe/observe-mirrors_used","preview":"<p>An empty library that declares what needs to be retained with <a>observe/dart-mirrors.MirrorsUsed</a>\nif you were to use observables together with mirrors. By default this is not\nincluded because frameworks using this package also use code generation to\navoid using mirrors at deploy time.</p>","packageIntro":""},{"packageName":"observe","name":"observe-transform","qualifiedName":"observe/observe-transform","preview":"<p>Code transform for @observable. This library will be removed soon, it simply\nreexports <code>observe.transformer</code>.</p>","packageIntro":""},{"packageName":"observe","name":"observe-transformer","qualifiedName":"observe/observe-transformer","preview":"<p>Code transform for @observable. The core transformation is relatively\nstraightforward, and essentially like an editor refactoring.</p>","packageIntro":""},{"packageName":"path","name":"path","qualifiedName":"path/path","preview":"<p>A comprehensive, cross-platform path manipulation library.</p>","packageIntro":"<p>A comprehensive, cross-platform path manipulation library for Dart.</p>\n<p>The path package provides common operations for manipulating paths:\njoining, splitting, normalizing, etc.</p>\n<p>We've tried very hard to make this library do the \"right\" thing on whatever\nplatform you run it on, including in the browser. When you use the top-level\nfunctions, it will assume the current platform's path style and work with\nthat. If you want to explicitly work with paths of a specific style, you can\nconstruct a <code>path.Context</code> for that style.</p>\n<h2>Using</h2>\n<p>The path library was designed to be imported with a prefix, though you don't\nhave to if you don't want to:</p>\n<pre><code>import 'package:path/path.dart' as path;\n</code></pre>\n<p>The most common way to use the library is through the top-level functions.\nThese manipulate path strings based on your current working directory and\nthe path style (POSIX, Windows, or URLs) of the host platform. For example:</p>\n<pre><code>path.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This calls the top-level join function to join \"directory\" and\n\"file.txt\" using the current platform's directory separator.</p>\n<p>If you want to work with paths for a specific platform regardless of the\nunderlying platform that the program is running on, you can create a\nContext and give it an explicit Style:</p>\n<pre><code>var context = new path.Context(style: Style.windows);\ncontext.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This will join \"directory\" and \"file.txt\" using the Windows path separator,\neven when the program is run on a POSIX machine.</p>\n<h2>FAQ</h2>\n<h3>Where can I use this?</h3>\n<p>Pathos runs on the Dart VM and in the browser under both dart2js and Dartium.\nUnder dart2js, it currently returns \".\" as the current working directory, while\nunder Dartium it returns the current URL.</p>\n<h3>Why doesn't this make paths first-class objects?</h3>\n<p>When you have path <em>objects</em>, then every API that takes a path has to decide if\nit accepts strings, path objects, or both.</p><ul><li>\n<p>Accepting strings is the most convenient, but then it seems weird to have\nthese path objects that aren't actually accepted by anything that needs a\npath. Once you've created a path, you have to always call <code>.toString()</code> on\nit before you can do anything useful with it.</p></li><li>\n<p>Requiring objects forces users to wrap path strings in these objects, which\nis tedious. It also means coupling that API to whatever library defines this\npath class. If there are multiple \"path\" libraries that each define their\nown path types, then any library that works with paths has to pick which one\nit uses.</p></li><li>\n<p>Taking both means you can't type your API. That defeats the purpose of\nhaving a path type: why have a type if your APIs can't annotate that they\nexpect it?</p></li></ul>\n<p>Given that, we've decided this library should simply treat paths as strings.</p>\n<h3>How cross-platform is this?</h3>\n<p>We believe this library handles most of the corner cases of Windows paths\n(POSIX paths are generally pretty straightforward):</p><ul><li>\n<p>It understands that <em>both</em> \"/\" and \"\\\" are valid path separators, not just\n\"\\\".</p></li><li>\n<p>It can accurately tell if a path is absolute based on drive-letters or UNC\nprefix.</p></li><li>\n<p>It understands that \"/foo\" is not an absolute path on Windows.</p></li><li>\n<p>It knows that \"C:\\foo\\one.txt\" and \"c:/foo\\two.txt\" are two files in the\nsame directory.</p></li></ul>\n<h3>What is a \"path\" in the browser?</h3>\n<p>If you use this package in a browser, then it considers the \"platform\" to be\nthe browser itself and uses URL strings to represent \"browser paths\".</p>"},{"packageName":"polymer","name":"polymer","qualifiedName":"polymer/polymer","preview":"<p>Custom HTML tags, data binding, and templates for building\nstructured, encapsulated, client-side web apps.</p>","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"},{"packageName":"polymer","name":"polymer-builder","qualifiedName":"polymer/polymer-builder","preview":"<p>Common logic to make it easy to run the polymer linter and deploy tool.</p>","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"},{"packageName":"polymer","name":"polymer-deploy","qualifiedName":"polymer/polymer-deploy","preview":"<p><strong>Note</strong>: If you already have a <code>build.dart</code> in your application, we\nrecommend to use the <code>package:polymer/builder.dart</code> library instead.\nTemporary deploy command used to create a version of the app that can be\ncompiled with dart2js and deployed. Following pub layout conventions, this\nscript will treat any HTML file under a package 'web/' and 'test/'\ndirectories as entry points.</p>","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"},{"packageName":"polymer","name":"polymer-deserialize","qualifiedName":"polymer/polymer-deserialize","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"},{"packageName":"polymer","name":"polymer-init","qualifiedName":"polymer/polymer-init","preview":"<p>Library that automatically initializes polymer elements without having to\nwrite a main for your application.</p>","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"},{"packageName":"polymer","name":"polymer-polymer_element","qualifiedName":"polymer/polymer-polymer_element","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"},{"packageName":"polymer","name":"polymer-src-boot","qualifiedName":"polymer/polymer-src-boot","preview":"<p>Bootstrap to initialize polymer applications. This library is not in use\nyet but it will replace boot.js in the near future (see dartbug.com/18007).</p>","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"},{"packageName":"polymer","name":"polymer-transformer","qualifiedName":"polymer/polymer-transformer","preview":"<p>Transfomer used for pub-serve and pub-deploy.</p>","packageIntro":"<h1>Polymer.dart</h1>\n<p>Polymer.dart is a set of comprehensive UI and utility components\nfor building web applications.\nWith Polymer.dart's custom elements, templating, data binding,\nand other features,\nyou can quickly build structured, encapsulated, client-side web apps.</p>\n<p>Polymer.dart is a Dart port of\n<a href=\"http://www.polymer-project.org/\">Polymer</a> created and maintained by the Dart team.\nThe Dart team is collaborating with the Polymer team to ensure that polymer.dart\nelements and polyfills are fully compatible with Polymer.</p>\n<p>Polymer.dart replaces Web UI, which has been deprecated.</p>\n<h2>Learn More</h2><ul><li>\n<p>The <a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart</a> homepage\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p></li><li>\n<p>See our <a href=\"http://addyosmani.github.com/todomvc/\">TodoMVC</a> example by opening up the Dart Editor's Welcome Page and\nselecting \"TodoMVC\".</p></li><li>\n<p>For more information about Dart, see <a href=\"http://www.dartlang.org/\">http://www.dartlang.org/</a>.</p></li><li>\n<p>When you use this package,\nyou automatically get the\n<a href=\"http://pub.dartlang.org/packages/polymer_expressions/\">polymer_expressions</a> package,\nwhich provides an expressive syntax for use with templates.</p></li></ul>\n<h2>Try It Now</h2>\n<p>Add the polymer.dart package to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>dependencies:\n  polymer: \"&gt;=0.9.0 &lt;0.10.0\"\n</code></pre>\n<p>Instead of using <code>any</code>, we recommend using version ranges to avoid getting your\nproject broken on each release. Using a version range lets you upgrade your\npackage at your own pace. You can find the latest version number at\n<a href=\"https://pub.dartlang.org/packages/polymer\">https://pub.dartlang.org/packages/polymer</a>.</p>\n<h2>Building and Deploying</h2>\n<p>To build a deployable version of your app, add the polymer transformers to your\npubspec.yaml file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer\n</code></pre>\n<p>Then, run <code>pub build</code>.  The polymer transformers assume all files under <code>web</code>\nare possible entry points, this can be adjusted with arguments in your\npubspec.yaml file. For example, you can say only <code>web/index.html</code> is an entry\npoint as follows:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points: web/index.html\n</code></pre>\n<p>Here is a list of arguments used by the polymer transformers:\n* js: whether to load JS code directly. By default polymer converts your app's\n  html file to load the compiled JS code directly. Setting this parameter to\n  false will keep a dart script tag and the <code>dart.js</code> script tag on the page.</p><ul><li>\n<p>csp: whether to load a Content Security Policy (CSP) compliant JS file.\n  Dart2js generates two JS files, one that is not CSP compilant and one that is.\n  By default, polymer uses the former becuase it's likely more efficient, but\n  you can choose the latter by setting this flag.</p></li><li>\n<p>entry_points: can be a list of entry points or, for convenience, a single\n  entry point as shown above.</p></li></ul>\n<p>For example, this specification includes 2 entrypoints and chooses the CSP\ncompliant JS file:</p>\n<pre class=\"yaml\"><code>transformers:\n- polymer:\n    entry_points:\n    - web/index.html\n    - web/index2.html\n    csp: true\n</code></pre>\n<h2>Contacting Us</h2>\n<p>Please file issues in our <a href=\"http://dartbug.com/new\">Issue Tracker</a> or contact us on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui\">Dart Web UI mailing list</a>.</p>\n<p>We also have the <a href=\"https://groups.google.com/a/dartlang.org/forum/?fromgroups#!forum/web-ui-dev\">Web UI development list</a> for discussions about\ninternals of the code, code reviews, etc.</p>"},{"packageName":"polymer_expressions","name":"polymer_expressions","qualifiedName":"polymer_expressions/polymer_expressions","preview":"<p>A binding delegate used with Polymer elements that\nallows for complex binding expressions, including\nproperty access, function invocation,\nlist/map indexing, and two-way filtering.</p>","packageIntro":"<h1>polymer_expressions</h1>\n<p>Polymer expressions are an expressive syntax that can be used in HTML templates\nwith Dart.</p>\n<p>Templates are one feature of Polymer.dart, which is a set of comprehensive UI\nand utility components for building web applications.\nThis package is automatically included with the\n<a href=\"https://pub.dartlang.org/packages/polymer\">Polymer</a> package\nbecause Polymer expressions are the default expression syntax\nin Polymer Dart apps.\nThe [Polymer.dart homepage][home_page]\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p>\n<h2>Overview</h2>\n<p>Polymer expressions allow you to write complex binding expressions, with\nproperty access, function invocation, list/map indexing, and two-way filtering\nlike:</p>\n<pre class=\"html\"><code>    {{ person.title + \" \" + person.getFullName() | upppercase }}\n</code></pre>\n<h3>Model-Driven Views (MDV)</h3>\n<p><a href=\"http://www.polymer-project.org/platform/mdv.html\">MDV</a> allows you to define templates directly in HTML that are rendered by\nthe browser into the DOM. Templates are bound to a data model, and changes to\nthe data are automatically reflected in the DOM, and changes in HTML inputs are\nassigned back into the model. The template and model are bound together via\nbinding expressions that are evaluated against the model. These binding\nexpressions are placed in double-curly-braces, or \"mustaches\".</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template&gt;\n      &lt;p&gt;Hello {{ person.name }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>MDV includes a very basic binding syntax which only allows a series of\ndot-separate property names.</p>\n<h3>Custom binding syntaxes with binding delegate</h3>\n<p>While MDV's built-in syntax is very basic, it does allow custom syntaxes called\n\"binding delegates\" to be installed and used. A binding delegate can interpret\nthe contents of mustaches however it likes. PolymerExpressions is such a\nbinding delegate.</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template bind&gt;\n      &lt;p&gt;Hello {{ person.title + \" \" + person.getFullName() | uppercase }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Usage</h2>\n<h3>Installing from Pub</h3>\n<p>Add the following to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>    dependencies:\n      polymer_expressions: any\n</code></pre>\n<p>Hint: check https://pub.dartlang.org/packages/polymer_expressions for the latest\nversion number.</p>\n<p>Then import polymer_expressions.dart:</p>\n<pre><code>import 'package:polymer_expressions/polymer_expressions.dart';\n</code></pre>\n<h3>Registering a binding delegate</h3>\n<p><strong>Polymer Expressions are now the default syntax for <code>&lt;polymer-element&gt;</code> custom\nelements.</strong></p>\n<p>You do not need to manually register the bindingDelegate if your bindings are\ninside a custom element. However, if you want to use polymer_expressions outside\na custom element, read on:</p>\n<p>Binding delegates must be installed on a template before they can be used.\nFor example, set the bindingDelegate property of your template\nelements to an instance of PolymerExpressions. The templates will then use the\nPolymerExpressions instance to interpret\nbinding expressions.</p>\n<pre class=\"dart\"><code>    import 'dart:html';\n    import 'package:polymer_expressions/polymer_expressions.dart';\n\n    main() {\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions();\n    }\n</code></pre>\n<h3>Registering top-level variables</h3>\n<p>Before a top-level variable can be used, it must be registered. The\nPolymerExpressions constructor takes a map of named values to use as variables.</p>\n<pre class=\"dart\"><code>    main() {\n      var globals = {\n        'uppercase': (String v) =&gt; v.toUpperCase(),\n        'app_id': 'my_app_123',\n      };\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions(globals: globals);\n    }\n</code></pre>\n<h2>Features</h2>\n<h3>The model and scope</h3>\n<p>Polymer Expressions allow binding to more than just the model assigned to a\ntemplate instance. Top-level variables can be defined so that you can use\nfilters, global variables and constants, functions, etc. These variables and the\nmodel are held together in a container called a Scope. Scopes can be nested,\nwhich happens when template tags are nested.</p>\n<h3>Two-way bindings</h3>\n<p>Bindings can be used to modify the data model based on events in the DOM. The\nmost common case is to bind an &lt;input&gt; element's value field to a model\nproperty and have the property update when the input changes. For this to work,\nthe binding expression must be \"assignable\". Only a subset of expressions are\nassignable. Assignable expressions cannot contain function calls, operators, and\nany index operator must have a literal argument. Assignable expressions can\ncontain filter operators as long as all the filters are two-way transformers.</p>\n<p>Some restrictions may be relaxed further as allowed.</p>\n<p>Assignable Expressions:</p><ul><li><code>foo</code></li><li><code>foo.bar</code></li><li><code>items[0].description</code></li><li><code>people['john'].name</code></li><li>\n<p><code>product.cost | convertCurrency('ZWD')</code> where <code>convertCurrency</code> evaluates to\n   a Tranformer object.</p></li></ul>\n<p>Non-Assignable Expressions:</p><ul><li><code>a + 1</code></li><li><code>!c</code></li><li><code>foo()</code></li><li><code>person.lastName | uppercase</code> where <code>uppercase</code> is a filter function.</li></ul>\n<h3>Null-Safety</h3>\n<p>Expressions are generally null-safe. If an intermediate expression yields <code>null</code>\nthe entire expression will return null, rather than throwing an exception.\nProperty access, method invocation and operators are null-safe. Passing null to\na function that doesn't handle null will not be null safe.</p>\n<h3>Streams</h3>\n<p>Polymer Expressions have experimental support for binding to streams, and when\nnew values are passed to the stream, the template updates. The feature is not\nfully implemented yet.</p>\n<p>See the examples in /example/streams for more details.</p>\n<h2>Syntax</h2>\n<h3>Property access</h3>\n<p>Properties on the model and in the scope are looked up via simple property\nnames, like <code>foo</code>. Property names are looked up first in the top-level\nvariables, next in the model, then recursively in parent scopes. Properties on\nobjects can be access with dot notation like <code>foo.bar</code>.</p>\n<p>The keyword <code>this</code> always refers to the model if there is one, otherwise <code>this</code>\nis <code>null</code>. If you have model properties and top-level variables with the same\nname, you can use <code>this</code> to refer to the model property.</p>\n<h3>Literals</h3>\n<p>Polymer Expressions support number, boolean, string, and map literals. Strings\ncan use either single or double quotes.</p><ul><li>Numbers: <code>1</code>, <code>1.0</code></li><li>Booleans: <code>true</code>, <code>false</code></li><li>Strings: <code>'abc'</code>, <code>\"xyz\"</code></li><li>Maps: <code>{ 'a': 1, 'b': 2 }</code></li></ul>\n<p>List literals are planned, see <a href=\"https://github.com/dart-lang/polymer_expressions/issues/9\">issue 9</a></p>\n<h3>Functions and methods</h3>\n<p>If a property is a function in the scope, a method on the model, or a method on\nan object, it can be invoked with standard function syntax. Functions and\nMethods can take arguments. Named arguments are not supported. Arguments can be\nliterals or variables.</p>\n<p>Examples:</p><ul><li>Top-level function: <code>myFunction()</code></li><li>Top-level function with arguments: <code>myFunction(a, b, 42)</code></li><li>Model method: <code>aMethod()</code></li><li>Method on nested-property: <code>a.b.anotherMethod()</code></li></ul>\n<h3>Operators</h3>\n<p>Polymer Expressions supports the following binary and unary operators:</p><ul><li>Arithmetic operators: +, -, *, /, %, unary + and -</li><li>Comparison operators: ==, !=, &lt;=, &lt;, >, >=</li><li>Boolean operators: &amp;&amp;, ||, unary !</li></ul>\n<p>Expressions do not support bitwise operators such as &amp;, |, &lt;&lt; and >>, or increment/decrement operators (++ and --)</p>\n<h3>List and Map indexing</h3>\n<p>List and Map like objects can be accessed via the index operator: </p>\n<p>Examples:</p><ul><li><code>items[2]</code></li><li><code>people['john']</code></li></ul>\n<p>Unlike JavaScript, list and map contents are not generally available via\nproperty access. That is, the previous examples are not equivalent to <code>items.2</code>\nand <code>people.john</code>. This ensures that access to properties and methods on Lists\nand Maps is preserved.</p>\n<h3>Filters and transformers</h3>\n<p>A filter is a function that transforms a value into another, used via the pipe\nsyntax: <code>value | filter</code> Any function that takes exactly one argument can be\nused as a filter.</p>\n<p>Example:</p>\n<p>If <code>person.name</code> is \"John\", and a top-level function named <code>uppercase</code> has been\nregistered, then <code>person.name | uppercase</code> will have the value \"JOHN\".</p>\n<p>The pipe syntax is used rather than a regular function call so that we can\nsupport two-way bindings through transformers. A transformer is a filter that\nhas an inverse function. Transformers must extend or implement the <code>Transformer</code>\nclass, which has <code>forward()</code> and <code>reverse()</code> methods.</p>\n<h3>Repeating templates</h3>\n<p>A template can be repeated by using the \"repeat\" attribute with a binding. The\nbinding can either evaluate to an Iterable, in which case the template is\ninstantiated for each item in the iterable and the model of the instance is\nset to the item, or the binding can be a \"in\" iterator expression, in which\ncase a new variable is added to each scope.</p>\n<p>The following examples produce the same output.</p>\n<p>Evaluate to an iterable:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ items }}\"&gt;\n      &lt;div&gt;{{ }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>\"in\" expression:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ item in items }}\"&gt;\n      &lt;div&gt;{{ item }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Status</h2>\n<p>The syntax implemented is experimental and subject to change, in fact, it\n<strong>will</strong> change soon. The goal is to be compatible with Polymer's binding\nsyntax. We will announce breaking changes on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>\n<p>Please <a href=\"http://dartbug.com/new\">file issues on Dart project page</a>\nfor any bugs you find or for feature requests. Make a note that it applies to\n\"package:polymer_expressions\"</p>\n<p>You can discuss Polymer Expressions on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>"},{"packageName":"polymer_expressions","name":"polymer_expressions-async","qualifiedName":"polymer_expressions/polymer_expressions-async","packageIntro":"<h1>polymer_expressions</h1>\n<p>Polymer expressions are an expressive syntax that can be used in HTML templates\nwith Dart.</p>\n<p>Templates are one feature of Polymer.dart, which is a set of comprehensive UI\nand utility components for building web applications.\nThis package is automatically included with the\n<a href=\"https://pub.dartlang.org/packages/polymer\">Polymer</a> package\nbecause Polymer expressions are the default expression syntax\nin Polymer Dart apps.\nThe [Polymer.dart homepage][home_page]\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p>\n<h2>Overview</h2>\n<p>Polymer expressions allow you to write complex binding expressions, with\nproperty access, function invocation, list/map indexing, and two-way filtering\nlike:</p>\n<pre class=\"html\"><code>    {{ person.title + \" \" + person.getFullName() | upppercase }}\n</code></pre>\n<h3>Model-Driven Views (MDV)</h3>\n<p><a href=\"http://www.polymer-project.org/platform/mdv.html\">MDV</a> allows you to define templates directly in HTML that are rendered by\nthe browser into the DOM. Templates are bound to a data model, and changes to\nthe data are automatically reflected in the DOM, and changes in HTML inputs are\nassigned back into the model. The template and model are bound together via\nbinding expressions that are evaluated against the model. These binding\nexpressions are placed in double-curly-braces, or \"mustaches\".</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template&gt;\n      &lt;p&gt;Hello {{ person.name }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>MDV includes a very basic binding syntax which only allows a series of\ndot-separate property names.</p>\n<h3>Custom binding syntaxes with binding delegate</h3>\n<p>While MDV's built-in syntax is very basic, it does allow custom syntaxes called\n\"binding delegates\" to be installed and used. A binding delegate can interpret\nthe contents of mustaches however it likes. PolymerExpressions is such a\nbinding delegate.</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template bind&gt;\n      &lt;p&gt;Hello {{ person.title + \" \" + person.getFullName() | uppercase }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Usage</h2>\n<h3>Installing from Pub</h3>\n<p>Add the following to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>    dependencies:\n      polymer_expressions: any\n</code></pre>\n<p>Hint: check https://pub.dartlang.org/packages/polymer_expressions for the latest\nversion number.</p>\n<p>Then import polymer_expressions.dart:</p>\n<pre><code>import 'package:polymer_expressions/polymer_expressions.dart';\n</code></pre>\n<h3>Registering a binding delegate</h3>\n<p><strong>Polymer Expressions are now the default syntax for <code>&lt;polymer-element&gt;</code> custom\nelements.</strong></p>\n<p>You do not need to manually register the bindingDelegate if your bindings are\ninside a custom element. However, if you want to use polymer_expressions outside\na custom element, read on:</p>\n<p>Binding delegates must be installed on a template before they can be used.\nFor example, set the bindingDelegate property of your template\nelements to an instance of PolymerExpressions. The templates will then use the\nPolymerExpressions instance to interpret\nbinding expressions.</p>\n<pre class=\"dart\"><code>    import 'dart:html';\n    import 'package:polymer_expressions/polymer_expressions.dart';\n\n    main() {\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions();\n    }\n</code></pre>\n<h3>Registering top-level variables</h3>\n<p>Before a top-level variable can be used, it must be registered. The\nPolymerExpressions constructor takes a map of named values to use as variables.</p>\n<pre class=\"dart\"><code>    main() {\n      var globals = {\n        'uppercase': (String v) =&gt; v.toUpperCase(),\n        'app_id': 'my_app_123',\n      };\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions(globals: globals);\n    }\n</code></pre>\n<h2>Features</h2>\n<h3>The model and scope</h3>\n<p>Polymer Expressions allow binding to more than just the model assigned to a\ntemplate instance. Top-level variables can be defined so that you can use\nfilters, global variables and constants, functions, etc. These variables and the\nmodel are held together in a container called a Scope. Scopes can be nested,\nwhich happens when template tags are nested.</p>\n<h3>Two-way bindings</h3>\n<p>Bindings can be used to modify the data model based on events in the DOM. The\nmost common case is to bind an &lt;input&gt; element's value field to a model\nproperty and have the property update when the input changes. For this to work,\nthe binding expression must be \"assignable\". Only a subset of expressions are\nassignable. Assignable expressions cannot contain function calls, operators, and\nany index operator must have a literal argument. Assignable expressions can\ncontain filter operators as long as all the filters are two-way transformers.</p>\n<p>Some restrictions may be relaxed further as allowed.</p>\n<p>Assignable Expressions:</p><ul><li><code>foo</code></li><li><code>foo.bar</code></li><li><code>items[0].description</code></li><li><code>people['john'].name</code></li><li>\n<p><code>product.cost | convertCurrency('ZWD')</code> where <code>convertCurrency</code> evaluates to\n   a Tranformer object.</p></li></ul>\n<p>Non-Assignable Expressions:</p><ul><li><code>a + 1</code></li><li><code>!c</code></li><li><code>foo()</code></li><li><code>person.lastName | uppercase</code> where <code>uppercase</code> is a filter function.</li></ul>\n<h3>Null-Safety</h3>\n<p>Expressions are generally null-safe. If an intermediate expression yields <code>null</code>\nthe entire expression will return null, rather than throwing an exception.\nProperty access, method invocation and operators are null-safe. Passing null to\na function that doesn't handle null will not be null safe.</p>\n<h3>Streams</h3>\n<p>Polymer Expressions have experimental support for binding to streams, and when\nnew values are passed to the stream, the template updates. The feature is not\nfully implemented yet.</p>\n<p>See the examples in /example/streams for more details.</p>\n<h2>Syntax</h2>\n<h3>Property access</h3>\n<p>Properties on the model and in the scope are looked up via simple property\nnames, like <code>foo</code>. Property names are looked up first in the top-level\nvariables, next in the model, then recursively in parent scopes. Properties on\nobjects can be access with dot notation like <code>foo.bar</code>.</p>\n<p>The keyword <code>this</code> always refers to the model if there is one, otherwise <code>this</code>\nis <code>null</code>. If you have model properties and top-level variables with the same\nname, you can use <code>this</code> to refer to the model property.</p>\n<h3>Literals</h3>\n<p>Polymer Expressions support number, boolean, string, and map literals. Strings\ncan use either single or double quotes.</p><ul><li>Numbers: <code>1</code>, <code>1.0</code></li><li>Booleans: <code>true</code>, <code>false</code></li><li>Strings: <code>'abc'</code>, <code>\"xyz\"</code></li><li>Maps: <code>{ 'a': 1, 'b': 2 }</code></li></ul>\n<p>List literals are planned, see <a href=\"https://github.com/dart-lang/polymer_expressions/issues/9\">issue 9</a></p>\n<h3>Functions and methods</h3>\n<p>If a property is a function in the scope, a method on the model, or a method on\nan object, it can be invoked with standard function syntax. Functions and\nMethods can take arguments. Named arguments are not supported. Arguments can be\nliterals or variables.</p>\n<p>Examples:</p><ul><li>Top-level function: <code>myFunction()</code></li><li>Top-level function with arguments: <code>myFunction(a, b, 42)</code></li><li>Model method: <code>aMethod()</code></li><li>Method on nested-property: <code>a.b.anotherMethod()</code></li></ul>\n<h3>Operators</h3>\n<p>Polymer Expressions supports the following binary and unary operators:</p><ul><li>Arithmetic operators: +, -, *, /, %, unary + and -</li><li>Comparison operators: ==, !=, &lt;=, &lt;, >, >=</li><li>Boolean operators: &amp;&amp;, ||, unary !</li></ul>\n<p>Expressions do not support bitwise operators such as &amp;, |, &lt;&lt; and >>, or increment/decrement operators (++ and --)</p>\n<h3>List and Map indexing</h3>\n<p>List and Map like objects can be accessed via the index operator: </p>\n<p>Examples:</p><ul><li><code>items[2]</code></li><li><code>people['john']</code></li></ul>\n<p>Unlike JavaScript, list and map contents are not generally available via\nproperty access. That is, the previous examples are not equivalent to <code>items.2</code>\nand <code>people.john</code>. This ensures that access to properties and methods on Lists\nand Maps is preserved.</p>\n<h3>Filters and transformers</h3>\n<p>A filter is a function that transforms a value into another, used via the pipe\nsyntax: <code>value | filter</code> Any function that takes exactly one argument can be\nused as a filter.</p>\n<p>Example:</p>\n<p>If <code>person.name</code> is \"John\", and a top-level function named <code>uppercase</code> has been\nregistered, then <code>person.name | uppercase</code> will have the value \"JOHN\".</p>\n<p>The pipe syntax is used rather than a regular function call so that we can\nsupport two-way bindings through transformers. A transformer is a filter that\nhas an inverse function. Transformers must extend or implement the <code>Transformer</code>\nclass, which has <code>forward()</code> and <code>reverse()</code> methods.</p>\n<h3>Repeating templates</h3>\n<p>A template can be repeated by using the \"repeat\" attribute with a binding. The\nbinding can either evaluate to an Iterable, in which case the template is\ninstantiated for each item in the iterable and the model of the instance is\nset to the item, or the binding can be a \"in\" iterator expression, in which\ncase a new variable is added to each scope.</p>\n<p>The following examples produce the same output.</p>\n<p>Evaluate to an iterable:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ items }}\"&gt;\n      &lt;div&gt;{{ }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>\"in\" expression:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ item in items }}\"&gt;\n      &lt;div&gt;{{ item }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Status</h2>\n<p>The syntax implemented is experimental and subject to change, in fact, it\n<strong>will</strong> change soon. The goal is to be compatible with Polymer's binding\nsyntax. We will announce breaking changes on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>\n<p>Please <a href=\"http://dartbug.com/new\">file issues on Dart project page</a>\nfor any bugs you find or for feature requests. Make a note that it applies to\n\"package:polymer_expressions\"</p>\n<p>You can discuss Polymer Expressions on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>"},{"packageName":"polymer_expressions","name":"polymer_expressions-eval","qualifiedName":"polymer_expressions/polymer_expressions-eval","packageIntro":"<h1>polymer_expressions</h1>\n<p>Polymer expressions are an expressive syntax that can be used in HTML templates\nwith Dart.</p>\n<p>Templates are one feature of Polymer.dart, which is a set of comprehensive UI\nand utility components for building web applications.\nThis package is automatically included with the\n<a href=\"https://pub.dartlang.org/packages/polymer\">Polymer</a> package\nbecause Polymer expressions are the default expression syntax\nin Polymer Dart apps.\nThe [Polymer.dart homepage][home_page]\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p>\n<h2>Overview</h2>\n<p>Polymer expressions allow you to write complex binding expressions, with\nproperty access, function invocation, list/map indexing, and two-way filtering\nlike:</p>\n<pre class=\"html\"><code>    {{ person.title + \" \" + person.getFullName() | upppercase }}\n</code></pre>\n<h3>Model-Driven Views (MDV)</h3>\n<p><a href=\"http://www.polymer-project.org/platform/mdv.html\">MDV</a> allows you to define templates directly in HTML that are rendered by\nthe browser into the DOM. Templates are bound to a data model, and changes to\nthe data are automatically reflected in the DOM, and changes in HTML inputs are\nassigned back into the model. The template and model are bound together via\nbinding expressions that are evaluated against the model. These binding\nexpressions are placed in double-curly-braces, or \"mustaches\".</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template&gt;\n      &lt;p&gt;Hello {{ person.name }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>MDV includes a very basic binding syntax which only allows a series of\ndot-separate property names.</p>\n<h3>Custom binding syntaxes with binding delegate</h3>\n<p>While MDV's built-in syntax is very basic, it does allow custom syntaxes called\n\"binding delegates\" to be installed and used. A binding delegate can interpret\nthe contents of mustaches however it likes. PolymerExpressions is such a\nbinding delegate.</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template bind&gt;\n      &lt;p&gt;Hello {{ person.title + \" \" + person.getFullName() | uppercase }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Usage</h2>\n<h3>Installing from Pub</h3>\n<p>Add the following to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>    dependencies:\n      polymer_expressions: any\n</code></pre>\n<p>Hint: check https://pub.dartlang.org/packages/polymer_expressions for the latest\nversion number.</p>\n<p>Then import polymer_expressions.dart:</p>\n<pre><code>import 'package:polymer_expressions/polymer_expressions.dart';\n</code></pre>\n<h3>Registering a binding delegate</h3>\n<p><strong>Polymer Expressions are now the default syntax for <code>&lt;polymer-element&gt;</code> custom\nelements.</strong></p>\n<p>You do not need to manually register the bindingDelegate if your bindings are\ninside a custom element. However, if you want to use polymer_expressions outside\na custom element, read on:</p>\n<p>Binding delegates must be installed on a template before they can be used.\nFor example, set the bindingDelegate property of your template\nelements to an instance of PolymerExpressions. The templates will then use the\nPolymerExpressions instance to interpret\nbinding expressions.</p>\n<pre class=\"dart\"><code>    import 'dart:html';\n    import 'package:polymer_expressions/polymer_expressions.dart';\n\n    main() {\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions();\n    }\n</code></pre>\n<h3>Registering top-level variables</h3>\n<p>Before a top-level variable can be used, it must be registered. The\nPolymerExpressions constructor takes a map of named values to use as variables.</p>\n<pre class=\"dart\"><code>    main() {\n      var globals = {\n        'uppercase': (String v) =&gt; v.toUpperCase(),\n        'app_id': 'my_app_123',\n      };\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions(globals: globals);\n    }\n</code></pre>\n<h2>Features</h2>\n<h3>The model and scope</h3>\n<p>Polymer Expressions allow binding to more than just the model assigned to a\ntemplate instance. Top-level variables can be defined so that you can use\nfilters, global variables and constants, functions, etc. These variables and the\nmodel are held together in a container called a Scope. Scopes can be nested,\nwhich happens when template tags are nested.</p>\n<h3>Two-way bindings</h3>\n<p>Bindings can be used to modify the data model based on events in the DOM. The\nmost common case is to bind an &lt;input&gt; element's value field to a model\nproperty and have the property update when the input changes. For this to work,\nthe binding expression must be \"assignable\". Only a subset of expressions are\nassignable. Assignable expressions cannot contain function calls, operators, and\nany index operator must have a literal argument. Assignable expressions can\ncontain filter operators as long as all the filters are two-way transformers.</p>\n<p>Some restrictions may be relaxed further as allowed.</p>\n<p>Assignable Expressions:</p><ul><li><code>foo</code></li><li><code>foo.bar</code></li><li><code>items[0].description</code></li><li><code>people['john'].name</code></li><li>\n<p><code>product.cost | convertCurrency('ZWD')</code> where <code>convertCurrency</code> evaluates to\n   a Tranformer object.</p></li></ul>\n<p>Non-Assignable Expressions:</p><ul><li><code>a + 1</code></li><li><code>!c</code></li><li><code>foo()</code></li><li><code>person.lastName | uppercase</code> where <code>uppercase</code> is a filter function.</li></ul>\n<h3>Null-Safety</h3>\n<p>Expressions are generally null-safe. If an intermediate expression yields <code>null</code>\nthe entire expression will return null, rather than throwing an exception.\nProperty access, method invocation and operators are null-safe. Passing null to\na function that doesn't handle null will not be null safe.</p>\n<h3>Streams</h3>\n<p>Polymer Expressions have experimental support for binding to streams, and when\nnew values are passed to the stream, the template updates. The feature is not\nfully implemented yet.</p>\n<p>See the examples in /example/streams for more details.</p>\n<h2>Syntax</h2>\n<h3>Property access</h3>\n<p>Properties on the model and in the scope are looked up via simple property\nnames, like <code>foo</code>. Property names are looked up first in the top-level\nvariables, next in the model, then recursively in parent scopes. Properties on\nobjects can be access with dot notation like <code>foo.bar</code>.</p>\n<p>The keyword <code>this</code> always refers to the model if there is one, otherwise <code>this</code>\nis <code>null</code>. If you have model properties and top-level variables with the same\nname, you can use <code>this</code> to refer to the model property.</p>\n<h3>Literals</h3>\n<p>Polymer Expressions support number, boolean, string, and map literals. Strings\ncan use either single or double quotes.</p><ul><li>Numbers: <code>1</code>, <code>1.0</code></li><li>Booleans: <code>true</code>, <code>false</code></li><li>Strings: <code>'abc'</code>, <code>\"xyz\"</code></li><li>Maps: <code>{ 'a': 1, 'b': 2 }</code></li></ul>\n<p>List literals are planned, see <a href=\"https://github.com/dart-lang/polymer_expressions/issues/9\">issue 9</a></p>\n<h3>Functions and methods</h3>\n<p>If a property is a function in the scope, a method on the model, or a method on\nan object, it can be invoked with standard function syntax. Functions and\nMethods can take arguments. Named arguments are not supported. Arguments can be\nliterals or variables.</p>\n<p>Examples:</p><ul><li>Top-level function: <code>myFunction()</code></li><li>Top-level function with arguments: <code>myFunction(a, b, 42)</code></li><li>Model method: <code>aMethod()</code></li><li>Method on nested-property: <code>a.b.anotherMethod()</code></li></ul>\n<h3>Operators</h3>\n<p>Polymer Expressions supports the following binary and unary operators:</p><ul><li>Arithmetic operators: +, -, *, /, %, unary + and -</li><li>Comparison operators: ==, !=, &lt;=, &lt;, >, >=</li><li>Boolean operators: &amp;&amp;, ||, unary !</li></ul>\n<p>Expressions do not support bitwise operators such as &amp;, |, &lt;&lt; and >>, or increment/decrement operators (++ and --)</p>\n<h3>List and Map indexing</h3>\n<p>List and Map like objects can be accessed via the index operator: </p>\n<p>Examples:</p><ul><li><code>items[2]</code></li><li><code>people['john']</code></li></ul>\n<p>Unlike JavaScript, list and map contents are not generally available via\nproperty access. That is, the previous examples are not equivalent to <code>items.2</code>\nand <code>people.john</code>. This ensures that access to properties and methods on Lists\nand Maps is preserved.</p>\n<h3>Filters and transformers</h3>\n<p>A filter is a function that transforms a value into another, used via the pipe\nsyntax: <code>value | filter</code> Any function that takes exactly one argument can be\nused as a filter.</p>\n<p>Example:</p>\n<p>If <code>person.name</code> is \"John\", and a top-level function named <code>uppercase</code> has been\nregistered, then <code>person.name | uppercase</code> will have the value \"JOHN\".</p>\n<p>The pipe syntax is used rather than a regular function call so that we can\nsupport two-way bindings through transformers. A transformer is a filter that\nhas an inverse function. Transformers must extend or implement the <code>Transformer</code>\nclass, which has <code>forward()</code> and <code>reverse()</code> methods.</p>\n<h3>Repeating templates</h3>\n<p>A template can be repeated by using the \"repeat\" attribute with a binding. The\nbinding can either evaluate to an Iterable, in which case the template is\ninstantiated for each item in the iterable and the model of the instance is\nset to the item, or the binding can be a \"in\" iterator expression, in which\ncase a new variable is added to each scope.</p>\n<p>The following examples produce the same output.</p>\n<p>Evaluate to an iterable:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ items }}\"&gt;\n      &lt;div&gt;{{ }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>\"in\" expression:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ item in items }}\"&gt;\n      &lt;div&gt;{{ item }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Status</h2>\n<p>The syntax implemented is experimental and subject to change, in fact, it\n<strong>will</strong> change soon. The goal is to be compatible with Polymer's binding\nsyntax. We will announce breaking changes on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>\n<p>Please <a href=\"http://dartbug.com/new\">file issues on Dart project page</a>\nfor any bugs you find or for feature requests. Make a note that it applies to\n\"package:polymer_expressions\"</p>\n<p>You can discuss Polymer Expressions on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>"},{"packageName":"polymer_expressions","name":"polymer_expressions-expression","qualifiedName":"polymer_expressions/polymer_expressions-expression","packageIntro":"<h1>polymer_expressions</h1>\n<p>Polymer expressions are an expressive syntax that can be used in HTML templates\nwith Dart.</p>\n<p>Templates are one feature of Polymer.dart, which is a set of comprehensive UI\nand utility components for building web applications.\nThis package is automatically included with the\n<a href=\"https://pub.dartlang.org/packages/polymer\">Polymer</a> package\nbecause Polymer expressions are the default expression syntax\nin Polymer Dart apps.\nThe [Polymer.dart homepage][home_page]\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p>\n<h2>Overview</h2>\n<p>Polymer expressions allow you to write complex binding expressions, with\nproperty access, function invocation, list/map indexing, and two-way filtering\nlike:</p>\n<pre class=\"html\"><code>    {{ person.title + \" \" + person.getFullName() | upppercase }}\n</code></pre>\n<h3>Model-Driven Views (MDV)</h3>\n<p><a href=\"http://www.polymer-project.org/platform/mdv.html\">MDV</a> allows you to define templates directly in HTML that are rendered by\nthe browser into the DOM. Templates are bound to a data model, and changes to\nthe data are automatically reflected in the DOM, and changes in HTML inputs are\nassigned back into the model. The template and model are bound together via\nbinding expressions that are evaluated against the model. These binding\nexpressions are placed in double-curly-braces, or \"mustaches\".</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template&gt;\n      &lt;p&gt;Hello {{ person.name }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>MDV includes a very basic binding syntax which only allows a series of\ndot-separate property names.</p>\n<h3>Custom binding syntaxes with binding delegate</h3>\n<p>While MDV's built-in syntax is very basic, it does allow custom syntaxes called\n\"binding delegates\" to be installed and used. A binding delegate can interpret\nthe contents of mustaches however it likes. PolymerExpressions is such a\nbinding delegate.</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template bind&gt;\n      &lt;p&gt;Hello {{ person.title + \" \" + person.getFullName() | uppercase }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Usage</h2>\n<h3>Installing from Pub</h3>\n<p>Add the following to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>    dependencies:\n      polymer_expressions: any\n</code></pre>\n<p>Hint: check https://pub.dartlang.org/packages/polymer_expressions for the latest\nversion number.</p>\n<p>Then import polymer_expressions.dart:</p>\n<pre><code>import 'package:polymer_expressions/polymer_expressions.dart';\n</code></pre>\n<h3>Registering a binding delegate</h3>\n<p><strong>Polymer Expressions are now the default syntax for <code>&lt;polymer-element&gt;</code> custom\nelements.</strong></p>\n<p>You do not need to manually register the bindingDelegate if your bindings are\ninside a custom element. However, if you want to use polymer_expressions outside\na custom element, read on:</p>\n<p>Binding delegates must be installed on a template before they can be used.\nFor example, set the bindingDelegate property of your template\nelements to an instance of PolymerExpressions. The templates will then use the\nPolymerExpressions instance to interpret\nbinding expressions.</p>\n<pre class=\"dart\"><code>    import 'dart:html';\n    import 'package:polymer_expressions/polymer_expressions.dart';\n\n    main() {\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions();\n    }\n</code></pre>\n<h3>Registering top-level variables</h3>\n<p>Before a top-level variable can be used, it must be registered. The\nPolymerExpressions constructor takes a map of named values to use as variables.</p>\n<pre class=\"dart\"><code>    main() {\n      var globals = {\n        'uppercase': (String v) =&gt; v.toUpperCase(),\n        'app_id': 'my_app_123',\n      };\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions(globals: globals);\n    }\n</code></pre>\n<h2>Features</h2>\n<h3>The model and scope</h3>\n<p>Polymer Expressions allow binding to more than just the model assigned to a\ntemplate instance. Top-level variables can be defined so that you can use\nfilters, global variables and constants, functions, etc. These variables and the\nmodel are held together in a container called a Scope. Scopes can be nested,\nwhich happens when template tags are nested.</p>\n<h3>Two-way bindings</h3>\n<p>Bindings can be used to modify the data model based on events in the DOM. The\nmost common case is to bind an &lt;input&gt; element's value field to a model\nproperty and have the property update when the input changes. For this to work,\nthe binding expression must be \"assignable\". Only a subset of expressions are\nassignable. Assignable expressions cannot contain function calls, operators, and\nany index operator must have a literal argument. Assignable expressions can\ncontain filter operators as long as all the filters are two-way transformers.</p>\n<p>Some restrictions may be relaxed further as allowed.</p>\n<p>Assignable Expressions:</p><ul><li><code>foo</code></li><li><code>foo.bar</code></li><li><code>items[0].description</code></li><li><code>people['john'].name</code></li><li>\n<p><code>product.cost | convertCurrency('ZWD')</code> where <code>convertCurrency</code> evaluates to\n   a Tranformer object.</p></li></ul>\n<p>Non-Assignable Expressions:</p><ul><li><code>a + 1</code></li><li><code>!c</code></li><li><code>foo()</code></li><li><code>person.lastName | uppercase</code> where <code>uppercase</code> is a filter function.</li></ul>\n<h3>Null-Safety</h3>\n<p>Expressions are generally null-safe. If an intermediate expression yields <code>null</code>\nthe entire expression will return null, rather than throwing an exception.\nProperty access, method invocation and operators are null-safe. Passing null to\na function that doesn't handle null will not be null safe.</p>\n<h3>Streams</h3>\n<p>Polymer Expressions have experimental support for binding to streams, and when\nnew values are passed to the stream, the template updates. The feature is not\nfully implemented yet.</p>\n<p>See the examples in /example/streams for more details.</p>\n<h2>Syntax</h2>\n<h3>Property access</h3>\n<p>Properties on the model and in the scope are looked up via simple property\nnames, like <code>foo</code>. Property names are looked up first in the top-level\nvariables, next in the model, then recursively in parent scopes. Properties on\nobjects can be access with dot notation like <code>foo.bar</code>.</p>\n<p>The keyword <code>this</code> always refers to the model if there is one, otherwise <code>this</code>\nis <code>null</code>. If you have model properties and top-level variables with the same\nname, you can use <code>this</code> to refer to the model property.</p>\n<h3>Literals</h3>\n<p>Polymer Expressions support number, boolean, string, and map literals. Strings\ncan use either single or double quotes.</p><ul><li>Numbers: <code>1</code>, <code>1.0</code></li><li>Booleans: <code>true</code>, <code>false</code></li><li>Strings: <code>'abc'</code>, <code>\"xyz\"</code></li><li>Maps: <code>{ 'a': 1, 'b': 2 }</code></li></ul>\n<p>List literals are planned, see <a href=\"https://github.com/dart-lang/polymer_expressions/issues/9\">issue 9</a></p>\n<h3>Functions and methods</h3>\n<p>If a property is a function in the scope, a method on the model, or a method on\nan object, it can be invoked with standard function syntax. Functions and\nMethods can take arguments. Named arguments are not supported. Arguments can be\nliterals or variables.</p>\n<p>Examples:</p><ul><li>Top-level function: <code>myFunction()</code></li><li>Top-level function with arguments: <code>myFunction(a, b, 42)</code></li><li>Model method: <code>aMethod()</code></li><li>Method on nested-property: <code>a.b.anotherMethod()</code></li></ul>\n<h3>Operators</h3>\n<p>Polymer Expressions supports the following binary and unary operators:</p><ul><li>Arithmetic operators: +, -, *, /, %, unary + and -</li><li>Comparison operators: ==, !=, &lt;=, &lt;, >, >=</li><li>Boolean operators: &amp;&amp;, ||, unary !</li></ul>\n<p>Expressions do not support bitwise operators such as &amp;, |, &lt;&lt; and >>, or increment/decrement operators (++ and --)</p>\n<h3>List and Map indexing</h3>\n<p>List and Map like objects can be accessed via the index operator: </p>\n<p>Examples:</p><ul><li><code>items[2]</code></li><li><code>people['john']</code></li></ul>\n<p>Unlike JavaScript, list and map contents are not generally available via\nproperty access. That is, the previous examples are not equivalent to <code>items.2</code>\nand <code>people.john</code>. This ensures that access to properties and methods on Lists\nand Maps is preserved.</p>\n<h3>Filters and transformers</h3>\n<p>A filter is a function that transforms a value into another, used via the pipe\nsyntax: <code>value | filter</code> Any function that takes exactly one argument can be\nused as a filter.</p>\n<p>Example:</p>\n<p>If <code>person.name</code> is \"John\", and a top-level function named <code>uppercase</code> has been\nregistered, then <code>person.name | uppercase</code> will have the value \"JOHN\".</p>\n<p>The pipe syntax is used rather than a regular function call so that we can\nsupport two-way bindings through transformers. A transformer is a filter that\nhas an inverse function. Transformers must extend or implement the <code>Transformer</code>\nclass, which has <code>forward()</code> and <code>reverse()</code> methods.</p>\n<h3>Repeating templates</h3>\n<p>A template can be repeated by using the \"repeat\" attribute with a binding. The\nbinding can either evaluate to an Iterable, in which case the template is\ninstantiated for each item in the iterable and the model of the instance is\nset to the item, or the binding can be a \"in\" iterator expression, in which\ncase a new variable is added to each scope.</p>\n<p>The following examples produce the same output.</p>\n<p>Evaluate to an iterable:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ items }}\"&gt;\n      &lt;div&gt;{{ }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>\"in\" expression:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ item in items }}\"&gt;\n      &lt;div&gt;{{ item }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Status</h2>\n<p>The syntax implemented is experimental and subject to change, in fact, it\n<strong>will</strong> change soon. The goal is to be compatible with Polymer's binding\nsyntax. We will announce breaking changes on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>\n<p>Please <a href=\"http://dartbug.com/new\">file issues on Dart project page</a>\nfor any bugs you find or for feature requests. Make a note that it applies to\n\"package:polymer_expressions\"</p>\n<p>You can discuss Polymer Expressions on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>"},{"packageName":"polymer_expressions","name":"polymer_expressions-filter","qualifiedName":"polymer_expressions/polymer_expressions-filter","packageIntro":"<h1>polymer_expressions</h1>\n<p>Polymer expressions are an expressive syntax that can be used in HTML templates\nwith Dart.</p>\n<p>Templates are one feature of Polymer.dart, which is a set of comprehensive UI\nand utility components for building web applications.\nThis package is automatically included with the\n<a href=\"https://pub.dartlang.org/packages/polymer\">Polymer</a> package\nbecause Polymer expressions are the default expression syntax\nin Polymer Dart apps.\nThe [Polymer.dart homepage][home_page]\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p>\n<h2>Overview</h2>\n<p>Polymer expressions allow you to write complex binding expressions, with\nproperty access, function invocation, list/map indexing, and two-way filtering\nlike:</p>\n<pre class=\"html\"><code>    {{ person.title + \" \" + person.getFullName() | upppercase }}\n</code></pre>\n<h3>Model-Driven Views (MDV)</h3>\n<p><a href=\"http://www.polymer-project.org/platform/mdv.html\">MDV</a> allows you to define templates directly in HTML that are rendered by\nthe browser into the DOM. Templates are bound to a data model, and changes to\nthe data are automatically reflected in the DOM, and changes in HTML inputs are\nassigned back into the model. The template and model are bound together via\nbinding expressions that are evaluated against the model. These binding\nexpressions are placed in double-curly-braces, or \"mustaches\".</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template&gt;\n      &lt;p&gt;Hello {{ person.name }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>MDV includes a very basic binding syntax which only allows a series of\ndot-separate property names.</p>\n<h3>Custom binding syntaxes with binding delegate</h3>\n<p>While MDV's built-in syntax is very basic, it does allow custom syntaxes called\n\"binding delegates\" to be installed and used. A binding delegate can interpret\nthe contents of mustaches however it likes. PolymerExpressions is such a\nbinding delegate.</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template bind&gt;\n      &lt;p&gt;Hello {{ person.title + \" \" + person.getFullName() | uppercase }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Usage</h2>\n<h3>Installing from Pub</h3>\n<p>Add the following to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>    dependencies:\n      polymer_expressions: any\n</code></pre>\n<p>Hint: check https://pub.dartlang.org/packages/polymer_expressions for the latest\nversion number.</p>\n<p>Then import polymer_expressions.dart:</p>\n<pre><code>import 'package:polymer_expressions/polymer_expressions.dart';\n</code></pre>\n<h3>Registering a binding delegate</h3>\n<p><strong>Polymer Expressions are now the default syntax for <code>&lt;polymer-element&gt;</code> custom\nelements.</strong></p>\n<p>You do not need to manually register the bindingDelegate if your bindings are\ninside a custom element. However, if you want to use polymer_expressions outside\na custom element, read on:</p>\n<p>Binding delegates must be installed on a template before they can be used.\nFor example, set the bindingDelegate property of your template\nelements to an instance of PolymerExpressions. The templates will then use the\nPolymerExpressions instance to interpret\nbinding expressions.</p>\n<pre class=\"dart\"><code>    import 'dart:html';\n    import 'package:polymer_expressions/polymer_expressions.dart';\n\n    main() {\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions();\n    }\n</code></pre>\n<h3>Registering top-level variables</h3>\n<p>Before a top-level variable can be used, it must be registered. The\nPolymerExpressions constructor takes a map of named values to use as variables.</p>\n<pre class=\"dart\"><code>    main() {\n      var globals = {\n        'uppercase': (String v) =&gt; v.toUpperCase(),\n        'app_id': 'my_app_123',\n      };\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions(globals: globals);\n    }\n</code></pre>\n<h2>Features</h2>\n<h3>The model and scope</h3>\n<p>Polymer Expressions allow binding to more than just the model assigned to a\ntemplate instance. Top-level variables can be defined so that you can use\nfilters, global variables and constants, functions, etc. These variables and the\nmodel are held together in a container called a Scope. Scopes can be nested,\nwhich happens when template tags are nested.</p>\n<h3>Two-way bindings</h3>\n<p>Bindings can be used to modify the data model based on events in the DOM. The\nmost common case is to bind an &lt;input&gt; element's value field to a model\nproperty and have the property update when the input changes. For this to work,\nthe binding expression must be \"assignable\". Only a subset of expressions are\nassignable. Assignable expressions cannot contain function calls, operators, and\nany index operator must have a literal argument. Assignable expressions can\ncontain filter operators as long as all the filters are two-way transformers.</p>\n<p>Some restrictions may be relaxed further as allowed.</p>\n<p>Assignable Expressions:</p><ul><li><code>foo</code></li><li><code>foo.bar</code></li><li><code>items[0].description</code></li><li><code>people['john'].name</code></li><li>\n<p><code>product.cost | convertCurrency('ZWD')</code> where <code>convertCurrency</code> evaluates to\n   a Tranformer object.</p></li></ul>\n<p>Non-Assignable Expressions:</p><ul><li><code>a + 1</code></li><li><code>!c</code></li><li><code>foo()</code></li><li><code>person.lastName | uppercase</code> where <code>uppercase</code> is a filter function.</li></ul>\n<h3>Null-Safety</h3>\n<p>Expressions are generally null-safe. If an intermediate expression yields <code>null</code>\nthe entire expression will return null, rather than throwing an exception.\nProperty access, method invocation and operators are null-safe. Passing null to\na function that doesn't handle null will not be null safe.</p>\n<h3>Streams</h3>\n<p>Polymer Expressions have experimental support for binding to streams, and when\nnew values are passed to the stream, the template updates. The feature is not\nfully implemented yet.</p>\n<p>See the examples in /example/streams for more details.</p>\n<h2>Syntax</h2>\n<h3>Property access</h3>\n<p>Properties on the model and in the scope are looked up via simple property\nnames, like <code>foo</code>. Property names are looked up first in the top-level\nvariables, next in the model, then recursively in parent scopes. Properties on\nobjects can be access with dot notation like <code>foo.bar</code>.</p>\n<p>The keyword <code>this</code> always refers to the model if there is one, otherwise <code>this</code>\nis <code>null</code>. If you have model properties and top-level variables with the same\nname, you can use <code>this</code> to refer to the model property.</p>\n<h3>Literals</h3>\n<p>Polymer Expressions support number, boolean, string, and map literals. Strings\ncan use either single or double quotes.</p><ul><li>Numbers: <code>1</code>, <code>1.0</code></li><li>Booleans: <code>true</code>, <code>false</code></li><li>Strings: <code>'abc'</code>, <code>\"xyz\"</code></li><li>Maps: <code>{ 'a': 1, 'b': 2 }</code></li></ul>\n<p>List literals are planned, see <a href=\"https://github.com/dart-lang/polymer_expressions/issues/9\">issue 9</a></p>\n<h3>Functions and methods</h3>\n<p>If a property is a function in the scope, a method on the model, or a method on\nan object, it can be invoked with standard function syntax. Functions and\nMethods can take arguments. Named arguments are not supported. Arguments can be\nliterals or variables.</p>\n<p>Examples:</p><ul><li>Top-level function: <code>myFunction()</code></li><li>Top-level function with arguments: <code>myFunction(a, b, 42)</code></li><li>Model method: <code>aMethod()</code></li><li>Method on nested-property: <code>a.b.anotherMethod()</code></li></ul>\n<h3>Operators</h3>\n<p>Polymer Expressions supports the following binary and unary operators:</p><ul><li>Arithmetic operators: +, -, *, /, %, unary + and -</li><li>Comparison operators: ==, !=, &lt;=, &lt;, >, >=</li><li>Boolean operators: &amp;&amp;, ||, unary !</li></ul>\n<p>Expressions do not support bitwise operators such as &amp;, |, &lt;&lt; and >>, or increment/decrement operators (++ and --)</p>\n<h3>List and Map indexing</h3>\n<p>List and Map like objects can be accessed via the index operator: </p>\n<p>Examples:</p><ul><li><code>items[2]</code></li><li><code>people['john']</code></li></ul>\n<p>Unlike JavaScript, list and map contents are not generally available via\nproperty access. That is, the previous examples are not equivalent to <code>items.2</code>\nand <code>people.john</code>. This ensures that access to properties and methods on Lists\nand Maps is preserved.</p>\n<h3>Filters and transformers</h3>\n<p>A filter is a function that transforms a value into another, used via the pipe\nsyntax: <code>value | filter</code> Any function that takes exactly one argument can be\nused as a filter.</p>\n<p>Example:</p>\n<p>If <code>person.name</code> is \"John\", and a top-level function named <code>uppercase</code> has been\nregistered, then <code>person.name | uppercase</code> will have the value \"JOHN\".</p>\n<p>The pipe syntax is used rather than a regular function call so that we can\nsupport two-way bindings through transformers. A transformer is a filter that\nhas an inverse function. Transformers must extend or implement the <code>Transformer</code>\nclass, which has <code>forward()</code> and <code>reverse()</code> methods.</p>\n<h3>Repeating templates</h3>\n<p>A template can be repeated by using the \"repeat\" attribute with a binding. The\nbinding can either evaluate to an Iterable, in which case the template is\ninstantiated for each item in the iterable and the model of the instance is\nset to the item, or the binding can be a \"in\" iterator expression, in which\ncase a new variable is added to each scope.</p>\n<p>The following examples produce the same output.</p>\n<p>Evaluate to an iterable:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ items }}\"&gt;\n      &lt;div&gt;{{ }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>\"in\" expression:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ item in items }}\"&gt;\n      &lt;div&gt;{{ item }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Status</h2>\n<p>The syntax implemented is experimental and subject to change, in fact, it\n<strong>will</strong> change soon. The goal is to be compatible with Polymer's binding\nsyntax. We will announce breaking changes on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>\n<p>Please <a href=\"http://dartbug.com/new\">file issues on Dart project page</a>\nfor any bugs you find or for feature requests. Make a note that it applies to\n\"package:polymer_expressions\"</p>\n<p>You can discuss Polymer Expressions on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>"},{"packageName":"polymer_expressions","name":"polymer_expressions-parser","qualifiedName":"polymer_expressions/polymer_expressions-parser","packageIntro":"<h1>polymer_expressions</h1>\n<p>Polymer expressions are an expressive syntax that can be used in HTML templates\nwith Dart.</p>\n<p>Templates are one feature of Polymer.dart, which is a set of comprehensive UI\nand utility components for building web applications.\nThis package is automatically included with the\n<a href=\"https://pub.dartlang.org/packages/polymer\">Polymer</a> package\nbecause Polymer expressions are the default expression syntax\nin Polymer Dart apps.\nThe [Polymer.dart homepage][home_page]\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p>\n<h2>Overview</h2>\n<p>Polymer expressions allow you to write complex binding expressions, with\nproperty access, function invocation, list/map indexing, and two-way filtering\nlike:</p>\n<pre class=\"html\"><code>    {{ person.title + \" \" + person.getFullName() | upppercase }}\n</code></pre>\n<h3>Model-Driven Views (MDV)</h3>\n<p><a href=\"http://www.polymer-project.org/platform/mdv.html\">MDV</a> allows you to define templates directly in HTML that are rendered by\nthe browser into the DOM. Templates are bound to a data model, and changes to\nthe data are automatically reflected in the DOM, and changes in HTML inputs are\nassigned back into the model. The template and model are bound together via\nbinding expressions that are evaluated against the model. These binding\nexpressions are placed in double-curly-braces, or \"mustaches\".</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template&gt;\n      &lt;p&gt;Hello {{ person.name }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>MDV includes a very basic binding syntax which only allows a series of\ndot-separate property names.</p>\n<h3>Custom binding syntaxes with binding delegate</h3>\n<p>While MDV's built-in syntax is very basic, it does allow custom syntaxes called\n\"binding delegates\" to be installed and used. A binding delegate can interpret\nthe contents of mustaches however it likes. PolymerExpressions is such a\nbinding delegate.</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template bind&gt;\n      &lt;p&gt;Hello {{ person.title + \" \" + person.getFullName() | uppercase }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Usage</h2>\n<h3>Installing from Pub</h3>\n<p>Add the following to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>    dependencies:\n      polymer_expressions: any\n</code></pre>\n<p>Hint: check https://pub.dartlang.org/packages/polymer_expressions for the latest\nversion number.</p>\n<p>Then import polymer_expressions.dart:</p>\n<pre><code>import 'package:polymer_expressions/polymer_expressions.dart';\n</code></pre>\n<h3>Registering a binding delegate</h3>\n<p><strong>Polymer Expressions are now the default syntax for <code>&lt;polymer-element&gt;</code> custom\nelements.</strong></p>\n<p>You do not need to manually register the bindingDelegate if your bindings are\ninside a custom element. However, if you want to use polymer_expressions outside\na custom element, read on:</p>\n<p>Binding delegates must be installed on a template before they can be used.\nFor example, set the bindingDelegate property of your template\nelements to an instance of PolymerExpressions. The templates will then use the\nPolymerExpressions instance to interpret\nbinding expressions.</p>\n<pre class=\"dart\"><code>    import 'dart:html';\n    import 'package:polymer_expressions/polymer_expressions.dart';\n\n    main() {\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions();\n    }\n</code></pre>\n<h3>Registering top-level variables</h3>\n<p>Before a top-level variable can be used, it must be registered. The\nPolymerExpressions constructor takes a map of named values to use as variables.</p>\n<pre class=\"dart\"><code>    main() {\n      var globals = {\n        'uppercase': (String v) =&gt; v.toUpperCase(),\n        'app_id': 'my_app_123',\n      };\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions(globals: globals);\n    }\n</code></pre>\n<h2>Features</h2>\n<h3>The model and scope</h3>\n<p>Polymer Expressions allow binding to more than just the model assigned to a\ntemplate instance. Top-level variables can be defined so that you can use\nfilters, global variables and constants, functions, etc. These variables and the\nmodel are held together in a container called a Scope. Scopes can be nested,\nwhich happens when template tags are nested.</p>\n<h3>Two-way bindings</h3>\n<p>Bindings can be used to modify the data model based on events in the DOM. The\nmost common case is to bind an &lt;input&gt; element's value field to a model\nproperty and have the property update when the input changes. For this to work,\nthe binding expression must be \"assignable\". Only a subset of expressions are\nassignable. Assignable expressions cannot contain function calls, operators, and\nany index operator must have a literal argument. Assignable expressions can\ncontain filter operators as long as all the filters are two-way transformers.</p>\n<p>Some restrictions may be relaxed further as allowed.</p>\n<p>Assignable Expressions:</p><ul><li><code>foo</code></li><li><code>foo.bar</code></li><li><code>items[0].description</code></li><li><code>people['john'].name</code></li><li>\n<p><code>product.cost | convertCurrency('ZWD')</code> where <code>convertCurrency</code> evaluates to\n   a Tranformer object.</p></li></ul>\n<p>Non-Assignable Expressions:</p><ul><li><code>a + 1</code></li><li><code>!c</code></li><li><code>foo()</code></li><li><code>person.lastName | uppercase</code> where <code>uppercase</code> is a filter function.</li></ul>\n<h3>Null-Safety</h3>\n<p>Expressions are generally null-safe. If an intermediate expression yields <code>null</code>\nthe entire expression will return null, rather than throwing an exception.\nProperty access, method invocation and operators are null-safe. Passing null to\na function that doesn't handle null will not be null safe.</p>\n<h3>Streams</h3>\n<p>Polymer Expressions have experimental support for binding to streams, and when\nnew values are passed to the stream, the template updates. The feature is not\nfully implemented yet.</p>\n<p>See the examples in /example/streams for more details.</p>\n<h2>Syntax</h2>\n<h3>Property access</h3>\n<p>Properties on the model and in the scope are looked up via simple property\nnames, like <code>foo</code>. Property names are looked up first in the top-level\nvariables, next in the model, then recursively in parent scopes. Properties on\nobjects can be access with dot notation like <code>foo.bar</code>.</p>\n<p>The keyword <code>this</code> always refers to the model if there is one, otherwise <code>this</code>\nis <code>null</code>. If you have model properties and top-level variables with the same\nname, you can use <code>this</code> to refer to the model property.</p>\n<h3>Literals</h3>\n<p>Polymer Expressions support number, boolean, string, and map literals. Strings\ncan use either single or double quotes.</p><ul><li>Numbers: <code>1</code>, <code>1.0</code></li><li>Booleans: <code>true</code>, <code>false</code></li><li>Strings: <code>'abc'</code>, <code>\"xyz\"</code></li><li>Maps: <code>{ 'a': 1, 'b': 2 }</code></li></ul>\n<p>List literals are planned, see <a href=\"https://github.com/dart-lang/polymer_expressions/issues/9\">issue 9</a></p>\n<h3>Functions and methods</h3>\n<p>If a property is a function in the scope, a method on the model, or a method on\nan object, it can be invoked with standard function syntax. Functions and\nMethods can take arguments. Named arguments are not supported. Arguments can be\nliterals or variables.</p>\n<p>Examples:</p><ul><li>Top-level function: <code>myFunction()</code></li><li>Top-level function with arguments: <code>myFunction(a, b, 42)</code></li><li>Model method: <code>aMethod()</code></li><li>Method on nested-property: <code>a.b.anotherMethod()</code></li></ul>\n<h3>Operators</h3>\n<p>Polymer Expressions supports the following binary and unary operators:</p><ul><li>Arithmetic operators: +, -, *, /, %, unary + and -</li><li>Comparison operators: ==, !=, &lt;=, &lt;, >, >=</li><li>Boolean operators: &amp;&amp;, ||, unary !</li></ul>\n<p>Expressions do not support bitwise operators such as &amp;, |, &lt;&lt; and >>, or increment/decrement operators (++ and --)</p>\n<h3>List and Map indexing</h3>\n<p>List and Map like objects can be accessed via the index operator: </p>\n<p>Examples:</p><ul><li><code>items[2]</code></li><li><code>people['john']</code></li></ul>\n<p>Unlike JavaScript, list and map contents are not generally available via\nproperty access. That is, the previous examples are not equivalent to <code>items.2</code>\nand <code>people.john</code>. This ensures that access to properties and methods on Lists\nand Maps is preserved.</p>\n<h3>Filters and transformers</h3>\n<p>A filter is a function that transforms a value into another, used via the pipe\nsyntax: <code>value | filter</code> Any function that takes exactly one argument can be\nused as a filter.</p>\n<p>Example:</p>\n<p>If <code>person.name</code> is \"John\", and a top-level function named <code>uppercase</code> has been\nregistered, then <code>person.name | uppercase</code> will have the value \"JOHN\".</p>\n<p>The pipe syntax is used rather than a regular function call so that we can\nsupport two-way bindings through transformers. A transformer is a filter that\nhas an inverse function. Transformers must extend or implement the <code>Transformer</code>\nclass, which has <code>forward()</code> and <code>reverse()</code> methods.</p>\n<h3>Repeating templates</h3>\n<p>A template can be repeated by using the \"repeat\" attribute with a binding. The\nbinding can either evaluate to an Iterable, in which case the template is\ninstantiated for each item in the iterable and the model of the instance is\nset to the item, or the binding can be a \"in\" iterator expression, in which\ncase a new variable is added to each scope.</p>\n<p>The following examples produce the same output.</p>\n<p>Evaluate to an iterable:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ items }}\"&gt;\n      &lt;div&gt;{{ }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>\"in\" expression:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ item in items }}\"&gt;\n      &lt;div&gt;{{ item }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Status</h2>\n<p>The syntax implemented is experimental and subject to change, in fact, it\n<strong>will</strong> change soon. The goal is to be compatible with Polymer's binding\nsyntax. We will announce breaking changes on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>\n<p>Please <a href=\"http://dartbug.com/new\">file issues on Dart project page</a>\nfor any bugs you find or for feature requests. Make a note that it applies to\n\"package:polymer_expressions\"</p>\n<p>You can discuss Polymer Expressions on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>"},{"packageName":"polymer_expressions","name":"polymer_expressions-tokenizer","qualifiedName":"polymer_expressions/polymer_expressions-tokenizer","packageIntro":"<h1>polymer_expressions</h1>\n<p>Polymer expressions are an expressive syntax that can be used in HTML templates\nwith Dart.</p>\n<p>Templates are one feature of Polymer.dart, which is a set of comprehensive UI\nand utility components for building web applications.\nThis package is automatically included with the\n<a href=\"https://pub.dartlang.org/packages/polymer\">Polymer</a> package\nbecause Polymer expressions are the default expression syntax\nin Polymer Dart apps.\nThe [Polymer.dart homepage][home_page]\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p>\n<h2>Overview</h2>\n<p>Polymer expressions allow you to write complex binding expressions, with\nproperty access, function invocation, list/map indexing, and two-way filtering\nlike:</p>\n<pre class=\"html\"><code>    {{ person.title + \" \" + person.getFullName() | upppercase }}\n</code></pre>\n<h3>Model-Driven Views (MDV)</h3>\n<p><a href=\"http://www.polymer-project.org/platform/mdv.html\">MDV</a> allows you to define templates directly in HTML that are rendered by\nthe browser into the DOM. Templates are bound to a data model, and changes to\nthe data are automatically reflected in the DOM, and changes in HTML inputs are\nassigned back into the model. The template and model are bound together via\nbinding expressions that are evaluated against the model. These binding\nexpressions are placed in double-curly-braces, or \"mustaches\".</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template&gt;\n      &lt;p&gt;Hello {{ person.name }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>MDV includes a very basic binding syntax which only allows a series of\ndot-separate property names.</p>\n<h3>Custom binding syntaxes with binding delegate</h3>\n<p>While MDV's built-in syntax is very basic, it does allow custom syntaxes called\n\"binding delegates\" to be installed and used. A binding delegate can interpret\nthe contents of mustaches however it likes. PolymerExpressions is such a\nbinding delegate.</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template bind&gt;\n      &lt;p&gt;Hello {{ person.title + \" \" + person.getFullName() | uppercase }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Usage</h2>\n<h3>Installing from Pub</h3>\n<p>Add the following to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>    dependencies:\n      polymer_expressions: any\n</code></pre>\n<p>Hint: check https://pub.dartlang.org/packages/polymer_expressions for the latest\nversion number.</p>\n<p>Then import polymer_expressions.dart:</p>\n<pre><code>import 'package:polymer_expressions/polymer_expressions.dart';\n</code></pre>\n<h3>Registering a binding delegate</h3>\n<p><strong>Polymer Expressions are now the default syntax for <code>&lt;polymer-element&gt;</code> custom\nelements.</strong></p>\n<p>You do not need to manually register the bindingDelegate if your bindings are\ninside a custom element. However, if you want to use polymer_expressions outside\na custom element, read on:</p>\n<p>Binding delegates must be installed on a template before they can be used.\nFor example, set the bindingDelegate property of your template\nelements to an instance of PolymerExpressions. The templates will then use the\nPolymerExpressions instance to interpret\nbinding expressions.</p>\n<pre class=\"dart\"><code>    import 'dart:html';\n    import 'package:polymer_expressions/polymer_expressions.dart';\n\n    main() {\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions();\n    }\n</code></pre>\n<h3>Registering top-level variables</h3>\n<p>Before a top-level variable can be used, it must be registered. The\nPolymerExpressions constructor takes a map of named values to use as variables.</p>\n<pre class=\"dart\"><code>    main() {\n      var globals = {\n        'uppercase': (String v) =&gt; v.toUpperCase(),\n        'app_id': 'my_app_123',\n      };\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions(globals: globals);\n    }\n</code></pre>\n<h2>Features</h2>\n<h3>The model and scope</h3>\n<p>Polymer Expressions allow binding to more than just the model assigned to a\ntemplate instance. Top-level variables can be defined so that you can use\nfilters, global variables and constants, functions, etc. These variables and the\nmodel are held together in a container called a Scope. Scopes can be nested,\nwhich happens when template tags are nested.</p>\n<h3>Two-way bindings</h3>\n<p>Bindings can be used to modify the data model based on events in the DOM. The\nmost common case is to bind an &lt;input&gt; element's value field to a model\nproperty and have the property update when the input changes. For this to work,\nthe binding expression must be \"assignable\". Only a subset of expressions are\nassignable. Assignable expressions cannot contain function calls, operators, and\nany index operator must have a literal argument. Assignable expressions can\ncontain filter operators as long as all the filters are two-way transformers.</p>\n<p>Some restrictions may be relaxed further as allowed.</p>\n<p>Assignable Expressions:</p><ul><li><code>foo</code></li><li><code>foo.bar</code></li><li><code>items[0].description</code></li><li><code>people['john'].name</code></li><li>\n<p><code>product.cost | convertCurrency('ZWD')</code> where <code>convertCurrency</code> evaluates to\n   a Tranformer object.</p></li></ul>\n<p>Non-Assignable Expressions:</p><ul><li><code>a + 1</code></li><li><code>!c</code></li><li><code>foo()</code></li><li><code>person.lastName | uppercase</code> where <code>uppercase</code> is a filter function.</li></ul>\n<h3>Null-Safety</h3>\n<p>Expressions are generally null-safe. If an intermediate expression yields <code>null</code>\nthe entire expression will return null, rather than throwing an exception.\nProperty access, method invocation and operators are null-safe. Passing null to\na function that doesn't handle null will not be null safe.</p>\n<h3>Streams</h3>\n<p>Polymer Expressions have experimental support for binding to streams, and when\nnew values are passed to the stream, the template updates. The feature is not\nfully implemented yet.</p>\n<p>See the examples in /example/streams for more details.</p>\n<h2>Syntax</h2>\n<h3>Property access</h3>\n<p>Properties on the model and in the scope are looked up via simple property\nnames, like <code>foo</code>. Property names are looked up first in the top-level\nvariables, next in the model, then recursively in parent scopes. Properties on\nobjects can be access with dot notation like <code>foo.bar</code>.</p>\n<p>The keyword <code>this</code> always refers to the model if there is one, otherwise <code>this</code>\nis <code>null</code>. If you have model properties and top-level variables with the same\nname, you can use <code>this</code> to refer to the model property.</p>\n<h3>Literals</h3>\n<p>Polymer Expressions support number, boolean, string, and map literals. Strings\ncan use either single or double quotes.</p><ul><li>Numbers: <code>1</code>, <code>1.0</code></li><li>Booleans: <code>true</code>, <code>false</code></li><li>Strings: <code>'abc'</code>, <code>\"xyz\"</code></li><li>Maps: <code>{ 'a': 1, 'b': 2 }</code></li></ul>\n<p>List literals are planned, see <a href=\"https://github.com/dart-lang/polymer_expressions/issues/9\">issue 9</a></p>\n<h3>Functions and methods</h3>\n<p>If a property is a function in the scope, a method on the model, or a method on\nan object, it can be invoked with standard function syntax. Functions and\nMethods can take arguments. Named arguments are not supported. Arguments can be\nliterals or variables.</p>\n<p>Examples:</p><ul><li>Top-level function: <code>myFunction()</code></li><li>Top-level function with arguments: <code>myFunction(a, b, 42)</code></li><li>Model method: <code>aMethod()</code></li><li>Method on nested-property: <code>a.b.anotherMethod()</code></li></ul>\n<h3>Operators</h3>\n<p>Polymer Expressions supports the following binary and unary operators:</p><ul><li>Arithmetic operators: +, -, *, /, %, unary + and -</li><li>Comparison operators: ==, !=, &lt;=, &lt;, >, >=</li><li>Boolean operators: &amp;&amp;, ||, unary !</li></ul>\n<p>Expressions do not support bitwise operators such as &amp;, |, &lt;&lt; and >>, or increment/decrement operators (++ and --)</p>\n<h3>List and Map indexing</h3>\n<p>List and Map like objects can be accessed via the index operator: </p>\n<p>Examples:</p><ul><li><code>items[2]</code></li><li><code>people['john']</code></li></ul>\n<p>Unlike JavaScript, list and map contents are not generally available via\nproperty access. That is, the previous examples are not equivalent to <code>items.2</code>\nand <code>people.john</code>. This ensures that access to properties and methods on Lists\nand Maps is preserved.</p>\n<h3>Filters and transformers</h3>\n<p>A filter is a function that transforms a value into another, used via the pipe\nsyntax: <code>value | filter</code> Any function that takes exactly one argument can be\nused as a filter.</p>\n<p>Example:</p>\n<p>If <code>person.name</code> is \"John\", and a top-level function named <code>uppercase</code> has been\nregistered, then <code>person.name | uppercase</code> will have the value \"JOHN\".</p>\n<p>The pipe syntax is used rather than a regular function call so that we can\nsupport two-way bindings through transformers. A transformer is a filter that\nhas an inverse function. Transformers must extend or implement the <code>Transformer</code>\nclass, which has <code>forward()</code> and <code>reverse()</code> methods.</p>\n<h3>Repeating templates</h3>\n<p>A template can be repeated by using the \"repeat\" attribute with a binding. The\nbinding can either evaluate to an Iterable, in which case the template is\ninstantiated for each item in the iterable and the model of the instance is\nset to the item, or the binding can be a \"in\" iterator expression, in which\ncase a new variable is added to each scope.</p>\n<p>The following examples produce the same output.</p>\n<p>Evaluate to an iterable:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ items }}\"&gt;\n      &lt;div&gt;{{ }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>\"in\" expression:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ item in items }}\"&gt;\n      &lt;div&gt;{{ item }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Status</h2>\n<p>The syntax implemented is experimental and subject to change, in fact, it\n<strong>will</strong> change soon. The goal is to be compatible with Polymer's binding\nsyntax. We will announce breaking changes on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>\n<p>Please <a href=\"http://dartbug.com/new\">file issues on Dart project page</a>\nfor any bugs you find or for feature requests. Make a note that it applies to\n\"package:polymer_expressions\"</p>\n<p>You can discuss Polymer Expressions on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>"},{"packageName":"polymer_expressions","name":"polymer_expressions-visitor","qualifiedName":"polymer_expressions/polymer_expressions-visitor","packageIntro":"<h1>polymer_expressions</h1>\n<p>Polymer expressions are an expressive syntax that can be used in HTML templates\nwith Dart.</p>\n<p>Templates are one feature of Polymer.dart, which is a set of comprehensive UI\nand utility components for building web applications.\nThis package is automatically included with the\n<a href=\"https://pub.dartlang.org/packages/polymer\">Polymer</a> package\nbecause Polymer expressions are the default expression syntax\nin Polymer Dart apps.\nThe [Polymer.dart homepage][home_page]\ncontains a list of features, project status,\ninstallation instructions, tips for upgrading from Web UI,\nand links to other documentation.</p>\n<h2>Overview</h2>\n<p>Polymer expressions allow you to write complex binding expressions, with\nproperty access, function invocation, list/map indexing, and two-way filtering\nlike:</p>\n<pre class=\"html\"><code>    {{ person.title + \" \" + person.getFullName() | upppercase }}\n</code></pre>\n<h3>Model-Driven Views (MDV)</h3>\n<p><a href=\"http://www.polymer-project.org/platform/mdv.html\">MDV</a> allows you to define templates directly in HTML that are rendered by\nthe browser into the DOM. Templates are bound to a data model, and changes to\nthe data are automatically reflected in the DOM, and changes in HTML inputs are\nassigned back into the model. The template and model are bound together via\nbinding expressions that are evaluated against the model. These binding\nexpressions are placed in double-curly-braces, or \"mustaches\".</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template&gt;\n      &lt;p&gt;Hello {{ person.name }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>MDV includes a very basic binding syntax which only allows a series of\ndot-separate property names.</p>\n<h3>Custom binding syntaxes with binding delegate</h3>\n<p>While MDV's built-in syntax is very basic, it does allow custom syntaxes called\n\"binding delegates\" to be installed and used. A binding delegate can interpret\nthe contents of mustaches however it likes. PolymerExpressions is such a\nbinding delegate.</p>\n<p>Example:</p>\n<pre class=\"html\"><code>    &lt;template bind&gt;\n      &lt;p&gt;Hello {{ person.title + \" \" + person.getFullName() | uppercase }}&lt;/p&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Usage</h2>\n<h3>Installing from Pub</h3>\n<p>Add the following to your pubspec.yaml file:</p>\n<pre class=\"yaml\"><code>    dependencies:\n      polymer_expressions: any\n</code></pre>\n<p>Hint: check https://pub.dartlang.org/packages/polymer_expressions for the latest\nversion number.</p>\n<p>Then import polymer_expressions.dart:</p>\n<pre><code>import 'package:polymer_expressions/polymer_expressions.dart';\n</code></pre>\n<h3>Registering a binding delegate</h3>\n<p><strong>Polymer Expressions are now the default syntax for <code>&lt;polymer-element&gt;</code> custom\nelements.</strong></p>\n<p>You do not need to manually register the bindingDelegate if your bindings are\ninside a custom element. However, if you want to use polymer_expressions outside\na custom element, read on:</p>\n<p>Binding delegates must be installed on a template before they can be used.\nFor example, set the bindingDelegate property of your template\nelements to an instance of PolymerExpressions. The templates will then use the\nPolymerExpressions instance to interpret\nbinding expressions.</p>\n<pre class=\"dart\"><code>    import 'dart:html';\n    import 'package:polymer_expressions/polymer_expressions.dart';\n\n    main() {\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions();\n    }\n</code></pre>\n<h3>Registering top-level variables</h3>\n<p>Before a top-level variable can be used, it must be registered. The\nPolymerExpressions constructor takes a map of named values to use as variables.</p>\n<pre class=\"dart\"><code>    main() {\n      var globals = {\n        'uppercase': (String v) =&gt; v.toUpperCase(),\n        'app_id': 'my_app_123',\n      };\n      var template = query('#my_template');\n      template.bindingDelegate = new PolymerExpressions(globals: globals);\n    }\n</code></pre>\n<h2>Features</h2>\n<h3>The model and scope</h3>\n<p>Polymer Expressions allow binding to more than just the model assigned to a\ntemplate instance. Top-level variables can be defined so that you can use\nfilters, global variables and constants, functions, etc. These variables and the\nmodel are held together in a container called a Scope. Scopes can be nested,\nwhich happens when template tags are nested.</p>\n<h3>Two-way bindings</h3>\n<p>Bindings can be used to modify the data model based on events in the DOM. The\nmost common case is to bind an &lt;input&gt; element's value field to a model\nproperty and have the property update when the input changes. For this to work,\nthe binding expression must be \"assignable\". Only a subset of expressions are\nassignable. Assignable expressions cannot contain function calls, operators, and\nany index operator must have a literal argument. Assignable expressions can\ncontain filter operators as long as all the filters are two-way transformers.</p>\n<p>Some restrictions may be relaxed further as allowed.</p>\n<p>Assignable Expressions:</p><ul><li><code>foo</code></li><li><code>foo.bar</code></li><li><code>items[0].description</code></li><li><code>people['john'].name</code></li><li>\n<p><code>product.cost | convertCurrency('ZWD')</code> where <code>convertCurrency</code> evaluates to\n   a Tranformer object.</p></li></ul>\n<p>Non-Assignable Expressions:</p><ul><li><code>a + 1</code></li><li><code>!c</code></li><li><code>foo()</code></li><li><code>person.lastName | uppercase</code> where <code>uppercase</code> is a filter function.</li></ul>\n<h3>Null-Safety</h3>\n<p>Expressions are generally null-safe. If an intermediate expression yields <code>null</code>\nthe entire expression will return null, rather than throwing an exception.\nProperty access, method invocation and operators are null-safe. Passing null to\na function that doesn't handle null will not be null safe.</p>\n<h3>Streams</h3>\n<p>Polymer Expressions have experimental support for binding to streams, and when\nnew values are passed to the stream, the template updates. The feature is not\nfully implemented yet.</p>\n<p>See the examples in /example/streams for more details.</p>\n<h2>Syntax</h2>\n<h3>Property access</h3>\n<p>Properties on the model and in the scope are looked up via simple property\nnames, like <code>foo</code>. Property names are looked up first in the top-level\nvariables, next in the model, then recursively in parent scopes. Properties on\nobjects can be access with dot notation like <code>foo.bar</code>.</p>\n<p>The keyword <code>this</code> always refers to the model if there is one, otherwise <code>this</code>\nis <code>null</code>. If you have model properties and top-level variables with the same\nname, you can use <code>this</code> to refer to the model property.</p>\n<h3>Literals</h3>\n<p>Polymer Expressions support number, boolean, string, and map literals. Strings\ncan use either single or double quotes.</p><ul><li>Numbers: <code>1</code>, <code>1.0</code></li><li>Booleans: <code>true</code>, <code>false</code></li><li>Strings: <code>'abc'</code>, <code>\"xyz\"</code></li><li>Maps: <code>{ 'a': 1, 'b': 2 }</code></li></ul>\n<p>List literals are planned, see <a href=\"https://github.com/dart-lang/polymer_expressions/issues/9\">issue 9</a></p>\n<h3>Functions and methods</h3>\n<p>If a property is a function in the scope, a method on the model, or a method on\nan object, it can be invoked with standard function syntax. Functions and\nMethods can take arguments. Named arguments are not supported. Arguments can be\nliterals or variables.</p>\n<p>Examples:</p><ul><li>Top-level function: <code>myFunction()</code></li><li>Top-level function with arguments: <code>myFunction(a, b, 42)</code></li><li>Model method: <code>aMethod()</code></li><li>Method on nested-property: <code>a.b.anotherMethod()</code></li></ul>\n<h3>Operators</h3>\n<p>Polymer Expressions supports the following binary and unary operators:</p><ul><li>Arithmetic operators: +, -, *, /, %, unary + and -</li><li>Comparison operators: ==, !=, &lt;=, &lt;, >, >=</li><li>Boolean operators: &amp;&amp;, ||, unary !</li></ul>\n<p>Expressions do not support bitwise operators such as &amp;, |, &lt;&lt; and >>, or increment/decrement operators (++ and --)</p>\n<h3>List and Map indexing</h3>\n<p>List and Map like objects can be accessed via the index operator: </p>\n<p>Examples:</p><ul><li><code>items[2]</code></li><li><code>people['john']</code></li></ul>\n<p>Unlike JavaScript, list and map contents are not generally available via\nproperty access. That is, the previous examples are not equivalent to <code>items.2</code>\nand <code>people.john</code>. This ensures that access to properties and methods on Lists\nand Maps is preserved.</p>\n<h3>Filters and transformers</h3>\n<p>A filter is a function that transforms a value into another, used via the pipe\nsyntax: <code>value | filter</code> Any function that takes exactly one argument can be\nused as a filter.</p>\n<p>Example:</p>\n<p>If <code>person.name</code> is \"John\", and a top-level function named <code>uppercase</code> has been\nregistered, then <code>person.name | uppercase</code> will have the value \"JOHN\".</p>\n<p>The pipe syntax is used rather than a regular function call so that we can\nsupport two-way bindings through transformers. A transformer is a filter that\nhas an inverse function. Transformers must extend or implement the <code>Transformer</code>\nclass, which has <code>forward()</code> and <code>reverse()</code> methods.</p>\n<h3>Repeating templates</h3>\n<p>A template can be repeated by using the \"repeat\" attribute with a binding. The\nbinding can either evaluate to an Iterable, in which case the template is\ninstantiated for each item in the iterable and the model of the instance is\nset to the item, or the binding can be a \"in\" iterator expression, in which\ncase a new variable is added to each scope.</p>\n<p>The following examples produce the same output.</p>\n<p>Evaluate to an iterable:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ items }}\"&gt;\n      &lt;div&gt;{{ }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<p>\"in\" expression:</p>\n<pre class=\"html\"><code>    &lt;template repeat=\"{{ item in items }}\"&gt;\n      &lt;div&gt;{{ item }}&lt;/div&gt;\n    &lt;/template&gt;\n</code></pre>\n<h2>Status</h2>\n<p>The syntax implemented is experimental and subject to change, in fact, it\n<strong>will</strong> change soon. The goal is to be compatible with Polymer's binding\nsyntax. We will announce breaking changes on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>\n<p>Please <a href=\"http://dartbug.com/new\">file issues on Dart project page</a>\nfor any bugs you find or for feature requests. Make a note that it applies to\n\"package:polymer_expressions\"</p>\n<p>You can discuss Polymer Expressions on the\n<a href=\"https://groups.google.com/a/dartlang.org/forum/#!forum/web-ui\">web-ui@dartlang.org mailing list</a>.</p>"},{"packageName":"quiver","name":"quiver-async","qualifiedName":"quiver/quiver-async","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-cache","qualifiedName":"quiver/quiver-cache","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-collection","qualifiedName":"quiver/quiver-collection","preview":"<p>Collection classes and related utilities.</p>","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-core","qualifiedName":"quiver/quiver-core","preview":"<p>Simple code with broad use cases.</p>","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-io","qualifiedName":"quiver/quiver-io","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-iterables","qualifiedName":"quiver/quiver-iterables","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-mirrors","qualifiedName":"quiver/quiver-mirrors","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-pattern","qualifiedName":"quiver/quiver-pattern","preview":"<p>This library contains utilities for working with <a>dart-core.RegExp</a>s and other\n<a>dart-core.Pattern</a>s.</p>","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-streams","qualifiedName":"quiver/quiver-streams","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-strings","qualifiedName":"quiver/quiver-strings","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"quiver","name":"quiver-time","qualifiedName":"quiver/quiver-time","packageIntro":"<h1>Quiver</h1>\n<p>Quiver is a set of utility libraries for Dart that makes using many Dart\nlibraries easier and more convenient, or adds additional functionality.</p>\n<p><a href=\"https://drone.io/github.com/google/quiver-dart/latest\"><a href=\"https://drone.io/github.com/google/quiver-dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/google/quiver-dart/status.png\"></img></a></a></p>\n<h2>Documentation</h2>\n<p>API Docs can be found here: http://google.github.io/quiver-dart/</p>\n<h2>Installation</h2>\n<p>Add Quiver to your project's pubspec.yaml file and run <code>pub get</code>.\nWe recommend the following version constraint:</p>\n<pre><code>dependencies:\n  quiver: '&gt;=0.18.0&lt;0.19.0'\n</code></pre>\n<h1>Main Libraries</h1>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-async\">quiver.async</a></h2>\n<p>Utilities for working with Futures, Streams and async computations.</p>\n<p><code>FutureGroup</code> is collection of Futures that signals when all its child futures\nhave completed. Allows adding new Futures as long as it hasn't completed yet.\nUseful when async tasks can spwn new async tasks and you need to wait for all of\nthem to complete.</p>\n<p><code>StreamRouter</code> splits a Stream into mulltiple streams based on a set of\npredicates.</p>\n<p><code>CountdownTimer</code> is a simple countdown timer that fires events in regular\nincrements.</p>\n<p><code>doWhileAsync</code>, <code>reduceAsync</code> and <code>forEachAsync</code> perform async computations on\nthe elements of on Iterables, waiting for the computation to complete before\nprocessing the next element.</p>\n<p><code>CreateTimer</code> and <code>CreateTimerPeriodic</code> are typedefs that are useful for\npassing Timer factories to classes and functions, increasing the testability of\ncode that depends on Timer.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-cache\">quiver.cache</a></h2>\n<p><code>Cache</code> is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.</p>\n<p><code>MapCache</code> is a Cache implementation backed by a Map.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-collection\">quiver.collection</a></h2>\n<p><code>listsEqual</code> and <code>mapsEqual</code> check collections for equality.</p>\n<p><code>Multimap</code> is an associative collection that maps keys to collections of\nvalues.</p>\n<p><code>BiMap</code> is a bidirectional map and provides an inverse view, allowing\nlookup of key by value.</p>\n<p><code>TreeSet</code> is a balanced binary tree that offers a bidirectional iterator,\nthe ability to iterate from an arbitrary anchor, and 'nearest' search.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-core\">quiver.core</a></h2>\n<p><code>Optional</code> is a way to represent optional values without allowing <code>null</code>.</p>\n<p><code>firstNonNull</code> returns its first non-null argument.</p>\n<p><code>hashObjects</code>, <code>hash2</code>, <code>hash3</code>, and <code>hash4</code> generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-io\">quiver.io</a></h2>\n<p><code>visitDirectory</code> is a recursive directory lister that conditionally recurses\ninto sub-directories based on the result of a handler function.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a></h2>\n<p><code>concat</code>, <code>count</code>, <code>cycle</code>, <code>enumerate</code>, <code>merge</code>, <code>partition</code>, <code>range</code>, and\n<code>zip</code> create, transform, or combine Iterables in different ways, similar to\nPython's itertools.</p>\n<p><code>min</code>, <code>max</code>, and <code>extent</code> retreive the minimum and maximum elements from an\niterable.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-mirrors\">quiver.mirrors</a></h2>\n<p><code>getTypeName</code> returns the name of a Type instance.</p>\n<p><code>implements</code> and <code>classImplements</code> determine if an instance or ClassMirror,\nrespectively, implement the interface represented by a Type instance. They\nimplement the behavior of <code>is</code> for mirrors, except for generics.</p>\n<p><code>getMemberMirror</code> searches though a ClassMirror and its class hierarchy for\na member. This makes up for the fact that <code>ClassMirror.members</code> doesn't\ncontain members from interfaces or superclasses.</p>\n<p><code>Method</code> wraps an InstanceMirror and Symbol to create a callable that invokes\na method on the instance. It in effect closurizes a method reflectively.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-pattern\">quiver.pattern</a></h2>\n<p>pattern.dart container utilities for work with <code>Pattern</code>s and <code>RegExp</code>s.</p>\n<p><code>Glob</code> implements glob patterns that are commonly used with filesystem paths.</p>\n<p><code>matchesAny</code> combines multiple Patterns into one, and allows for exclusions.</p>\n<p><code>matchesFull</code> returns true if a Pattern matches an entire String.</p>\n<p><code>escapeRegex</code> escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-streams\">quiver.streams</a></h2>\n<p><code>Stream</code> versions of <a href=\"http://google.github.io/quiver-dart/#quiver/quiver-iterables\">quiver.iterables</a> methods.  Currently <code>enumerate</code> and \n<code>concat</code> are supported.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-strings\">quiver.strings</a></h2>\n<p><code>isBlank</code> checks if a string is <code>null</code>, empty or made of whitespace characters.</p>\n<p><code>equalsIgnoreCase</code> checks if two strings are equal, ignoring case.</p>\n<p><code>compareIgnoreCase</code> compares two strings, ignoring case.</p>\n<p><code>flip</code> flips the order of characters in a string.</p>\n<p><code>nullToEmpty</code> turns <code>null</code> to empty string, and returns non-empty strings\nunchanged.</p>\n<p><code>emptyToNull</code> turns empty string to <code>null</code>, and returns non-empty strings\nunchanged.</p>\n<p><code>repeat</code> concatenates a string to itself a given number of times, for example:</p>\n<p><code>repeat('la ', 3) =&gt; 'la la la '</code></p>\n<p>It can also repeat in reverse, for example:</p>\n<p><code>repeat(' og', -3) =&gt; 'go go go '</code></p>\n<p><code>loop</code> allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:</p><ul><li>Rotating: <code>loop('lohel', -3, 2) =&gt; 'hello'</code></li><li>\n<p>Repeating, like <code>repeat</code>, but with better character-level control, e.g.:\n<code>loop('la ', 0, 8) =&gt; 'la la la'  // no tailing space</code></p></li><li>Tailing: <code>loop('/path/to/some/file.txt', -3) =&gt; 'txt'</code></li><li>Reversing: <code>loop('top', 3, 0) =&gt; 'pot'</code></li></ul>\n<p><code>padLeft</code>, <code>padRight</code>, and <code>center</code> pad strings to a given width.</p>\n<p><code>trimLeft</code> and <code>trimRight</code> remove leading and trailing whitespace.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-time\">quiver.time</a></h2>\n<p><code>Clock</code> provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock\nrather than other ways of accessing time, like <code>new DateTime()</code>, so that you\ncan use a fake time function in your tests to control time.</p>\n<p><code>Now</code> is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.</p>\n<p><code>aMicrosecond</code>, <code>aMillisecond</code>, <code>aSecond</code>, <code>aMinute</code>, <code>anHour</code>, <code>aDay</code>, and \n<code>aWeek</code> are unit duration constants to allow writing for example:</p><ul><li><code>aDay</code> vs. <code>const Duration(days: 1)</code></li><li><code>aSecond * 30</code> vs. <code>const Duration(seconds: 30)</code></li></ul>\n<h1>Testing Libraries</h1>\n<p>The Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.async\">quiver.testing.async</a></h2>\n<p><code>FakeTimer</code> is a Timer that captures its duration and callback for use in tests.</p>\n<h2><a href=\"http://google.github.io/quiver-dart/#quiver/quiver-testing.time\">quiver.testing.time</a></h2>\n<p><code>FakeStopwatch</code> is a Stopwatch that uses a provided <code>now()</code> function to get the\ncurrent time.</p>"},{"packageName":"smoke","name":"smoke","qualifiedName":"smoke/smoke","preview":"<p>Collects services that can be used to access objects dynamically, inspect\ntype information, and convert between symbols and strings.</p>","packageIntro":"<h1>Smoke (and mirrors)</h1>\n<p>Smoke is a package that exposes a reduced reflective system API. This API\nincludes accessing objects in a dynamic fashion (read properties, write\nproperties, and call methods), inspecting types (for example, whether a\nmethod exists), and symbol/string convertion.</p>\n<p>The package provides a default implementation of this API that uses the system's\nmirrors, but additionally provides mechanisms for statically generating code\nthat can replace the mirror-based implementation.</p>\n<p>The intention of this package is to allow frameworks to use mirrors in a way\nthat will not impose on their users. The idea is that users will not worry about\nhow to preserve symbols when compiling with dart2js (for instance, using the\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-mirrors.MirrorsUsed\">MirrorsUsed</a> annotation). Instead, this package provides the building\nblocks to autogenerate whatever is needed for dart2js to be happy and to\ngenerate reasonable code.</p>\n<p>Note this package alone doesn't know how to generate everything, but it provides\na simple API that different frameworks can use to define what needs to be\ngenerated.</p>\n<h1>Smoke reflective API</h1>\n<p>Use <code>package:smoke/smoke.dart</code> in your framework to read and write objects and\nto inspect type information. Read the Dart-docs for more details.</p>\n<h1>Code Generation</h1>\n<p>TBD. We envision we'll have a base transformer class that can be tailored to\ncreate a transformer for your framework.</p>"},{"packageName":"smoke","name":"smoke-mirrors","qualifiedName":"smoke/smoke-mirrors","preview":"<p>Implementation of the smoke services using mirrors.</p>","packageIntro":"<h1>Smoke (and mirrors)</h1>\n<p>Smoke is a package that exposes a reduced reflective system API. This API\nincludes accessing objects in a dynamic fashion (read properties, write\nproperties, and call methods), inspecting types (for example, whether a\nmethod exists), and symbol/string convertion.</p>\n<p>The package provides a default implementation of this API that uses the system's\nmirrors, but additionally provides mechanisms for statically generating code\nthat can replace the mirror-based implementation.</p>\n<p>The intention of this package is to allow frameworks to use mirrors in a way\nthat will not impose on their users. The idea is that users will not worry about\nhow to preserve symbols when compiling with dart2js (for instance, using the\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-mirrors.MirrorsUsed\">MirrorsUsed</a> annotation). Instead, this package provides the building\nblocks to autogenerate whatever is needed for dart2js to be happy and to\ngenerate reasonable code.</p>\n<p>Note this package alone doesn't know how to generate everything, but it provides\na simple API that different frameworks can use to define what needs to be\ngenerated.</p>\n<h1>Smoke reflective API</h1>\n<p>Use <code>package:smoke/smoke.dart</code> in your framework to read and write objects and\nto inspect type information. Read the Dart-docs for more details.</p>\n<h1>Code Generation</h1>\n<p>TBD. We envision we'll have a base transformer class that can be tailored to\ncreate a transformer for your framework.</p>"},{"packageName":"smoke","name":"smoke-static","qualifiedName":"smoke/smoke-static","preview":"<p>Static implementation of smoke services using code-generated data.</p>","packageIntro":"<h1>Smoke (and mirrors)</h1>\n<p>Smoke is a package that exposes a reduced reflective system API. This API\nincludes accessing objects in a dynamic fashion (read properties, write\nproperties, and call methods), inspecting types (for example, whether a\nmethod exists), and symbol/string convertion.</p>\n<p>The package provides a default implementation of this API that uses the system's\nmirrors, but additionally provides mechanisms for statically generating code\nthat can replace the mirror-based implementation.</p>\n<p>The intention of this package is to allow frameworks to use mirrors in a way\nthat will not impose on their users. The idea is that users will not worry about\nhow to preserve symbols when compiling with dart2js (for instance, using the\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-mirrors.MirrorsUsed\">MirrorsUsed</a> annotation). Instead, this package provides the building\nblocks to autogenerate whatever is needed for dart2js to be happy and to\ngenerate reasonable code.</p>\n<p>Note this package alone doesn't know how to generate everything, but it provides\na simple API that different frameworks can use to define what needs to be\ngenerated.</p>\n<h1>Smoke reflective API</h1>\n<p>Use <code>package:smoke/smoke.dart</code> in your framework to read and write objects and\nto inspect type information. Read the Dart-docs for more details.</p>\n<h1>Code Generation</h1>\n<p>TBD. We envision we'll have a base transformer class that can be tailored to\ncreate a transformer for your framework.</p>"},{"packageName":"smoke","name":"smoke-static_debug","qualifiedName":"smoke/smoke-static_debug","preview":"<p>Static implementation of smoke services that uses code-generated data and\nverifies that the results match what we would get with a mirror-based\nimplementation.</p>","packageIntro":"<h1>Smoke (and mirrors)</h1>\n<p>Smoke is a package that exposes a reduced reflective system API. This API\nincludes accessing objects in a dynamic fashion (read properties, write\nproperties, and call methods), inspecting types (for example, whether a\nmethod exists), and symbol/string convertion.</p>\n<p>The package provides a default implementation of this API that uses the system's\nmirrors, but additionally provides mechanisms for statically generating code\nthat can replace the mirror-based implementation.</p>\n<p>The intention of this package is to allow frameworks to use mirrors in a way\nthat will not impose on their users. The idea is that users will not worry about\nhow to preserve symbols when compiling with dart2js (for instance, using the\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-mirrors.MirrorsUsed\">MirrorsUsed</a> annotation). Instead, this package provides the building\nblocks to autogenerate whatever is needed for dart2js to be happy and to\ngenerate reasonable code.</p>\n<p>Note this package alone doesn't know how to generate everything, but it provides\na simple API that different frameworks can use to define what needs to be\ngenerated.</p>\n<h1>Smoke reflective API</h1>\n<p>Use <code>package:smoke/smoke.dart</code> in your framework to read and write objects and\nto inspect type information. Read the Dart-docs for more details.</p>\n<h1>Code Generation</h1>\n<p>TBD. We envision we'll have a base transformer class that can be tailored to\ncreate a transformer for your framework.</p>"},{"packageName":"source_maps","name":"source_maps","qualifiedName":"source_maps/source_maps","preview":"<p>Library to create and parse source maps.</p>","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"packageName":"source_maps","name":"source_maps-builder","qualifiedName":"source_maps/source_maps-builder","preview":"<p>Contains a builder object useful for creating source maps programatically.</p>","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"packageName":"source_maps","name":"source_maps-parser","qualifiedName":"source_maps/source_maps-parser","preview":"<p>Contains the top-level function to parse source maps version 3.</p>","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"packageName":"source_maps","name":"source_maps-printer","qualifiedName":"source_maps/source_maps-printer","preview":"<p>Contains a code printer that generates code by recording the source maps.</p>","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"packageName":"source_maps","name":"source_maps-refactor","qualifiedName":"source_maps/source_maps-refactor","preview":"<p>Tools to help implement refactoring like transformations to Dart code.</p>","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"packageName":"source_maps","name":"source_maps-span","qualifiedName":"source_maps/source_maps-span","preview":"<p>Dart classes representing the souce spans and source files.</p>","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"packageName":"stack_trace","name":"stack_trace","qualifiedName":"stack_trace/stack_trace","preview":"<p>Stack trace generation and parsing.</p>","packageIntro":"<p>This library provides the ability to parse, inspect, and manipulate stack traces\nproduced by the underlying Dart implementation. It also provides functions to\nproduce string representations of stack traces in a more readable format than\nthe native <a>dart-core</a> implementation.</p>\n<p><code>Trace</code>s can be parsed from native <a>dart-core</a>s using <code>Trace.from</code>, or captured\nusing <code>Trace.current</code>. Native <a>dart-core</a>s can also be directly converted to\nhuman-readable strings using <code>Trace.format</code>.</p>\n<p>Here's an example native stack trace from debugging this library:</p>\n<pre><code>#0      Object.noSuchMethod (dart:core-patch:1884:25)\n#1      Trace.terse.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:47:21)\n#2      IterableMixinWorkaround.reduce (dart:collection:29:29)\n#3      List.reduce (dart:core-patch:1247:42)\n#4      Trace.terse (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:40:35)\n#5      format (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/stack_trace.dart:24:28)\n#6      main.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:21:29)\n#7      _CatchErrorFuture._sendError (dart:async:525:24)\n#8      _FutureImpl._setErrorWithoutAsyncTrace (dart:async:393:26)\n#9      _FutureImpl._setError (dart:async:378:31)\n#10     _ThenFuture._sendValue (dart:async:490:16)\n#11     _FutureImpl._handleValue.&lt;anonymous closure&gt; (dart:async:349:28)\n#12     Timer.run.&lt;anonymous closure&gt; (dart:async:2402:21)\n#13     Timer.Timer.&lt;anonymous closure&gt; (dart:async-patch:15:15)\n</code></pre>\n<p>and its human-readable representation:</p>\n<pre><code>dart:core-patch                             Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:collection                             IterableMixinWorkaround.reduce\ndart:core-patch                             List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  _CatchErrorFuture._sendError\ndart:async                                  _FutureImpl._setErrorWithoutAsyncTrace\ndart:async                                  _FutureImpl._setError\ndart:async                                  _ThenFuture._sendValue\ndart:async                                  _FutureImpl._handleValue.&lt;fn&gt;\ndart:async                                  Timer.run.&lt;fn&gt;\ndart:async-patch                            Timer.Timer.&lt;fn&gt;\n</code></pre>\n<p>You can further clean up the stack trace using <code>Trace.terse</code>. This folds\ntogether multiple stack frames from the Dart core libraries, so that only the\ncore library method that was directly called from user code is visible. For\nexample:</p>\n<pre><code>dart:core                                   Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:core                                   List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  Timer.Timer.&lt;fn&gt;\n</code></pre>\n<h2>Stack Chains</h2>\n<p>This library also provides the ability to capture \"stack chains\" with the\n<code>Chain</code> class. When writing asynchronous code, a single stack trace isn't very\nuseful, since the call stack is unwound every time something async happens. A\nstack chain tracks stack traces through asynchronous calls, so that you can see\nthe full path from <code>main</code> down to the error.</p>\n<p>To use stack chains, just wrap the code that you want to track in\n<code>Chain.capture</code>. This will create a new <a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-async.Zone\">Zone</a> in which stack traces are\nrecorded and woven into chains every time an asynchronous call occurs. Zones are\nsticky, too, so any asynchronous operations started in the <code>Chain.capture</code>\ncallback will have their chains tracked, as will asynchronous operations they\nstart and so on.</p>\n<p>Here's an example of some code that doesn't capture its stack chains:</p>\n<pre class=\"dart\"><code>import 'dart:async';\n\nvoid main() {\n  scheduleAsync();\n}\n\nvoid scheduleAsync() {\n  return new Future.delayed(new Duration(seconds: 1))\n      .then((_) =&gt; runAsync());\n}\n\nvoid runAsync() {\n  throw 'oh no!';\n}\n</code></pre>\n<p>If we run this, it prints the following:</p>\n<pre><code>Uncaught Error: oh no!\nStack Trace: \n#0      runAsync (file:///usr/local/google-old/home/goog/dart/dart/test.dart:13:3)\n#1      scheduleAsync.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:9:28)\n#2      _rootRunUnary (dart:async/zone.dart:717)\n#3      _RootZone.runUnary (dart:async/zone.dart:854)\n#4      _Future._propagateToListeners.handleValueCallback (dart:async/future_impl.dart:488)\n#5      _Future._propagateToListeners (dart:async/future_impl.dart:571)\n#6      _Future._complete (dart:async/future_impl.dart:317)\n#7      _SyncCompleter.complete (dart:async/future_impl.dart:44)\n#8      Future.Future.delayed.&lt;anonymous closure&gt; (dart:async/future.dart:219)\n#9      _createTimer.&lt;anonymous closure&gt; (dart:async-patch/timer_patch.dart:11)\n#10     _handleTimeout (dart:io/timer_impl.dart:292)\n#11     _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:115)\n</code></pre>\n<p>Notice how there's no mention of <code>main</code> in that stack trace. All we know is that\nthe error was in <code>runAsync</code>; we don't know why <code>runAsync</code> was called.</p>\n<p>Now let's look at the same code with stack chains captured:</p>\n<pre class=\"dart\"><code>import 'dart:async';\n\nimport 'package:stack_trace/stack_trace.dart';\n\nvoid main() {\n  Chain.capture(() {\n    scheduleAsync();\n  });\n}\n\nvoid scheduleAsync() {\n  new Future.delayed(new Duration(seconds: 1))\n      .then((_) =&gt; runAsync());\n}\n\nvoid runAsync() {\n  throw 'oh no!';\n}\n</code></pre>\n<p>Now if we run it, it prints this:</p>\n<pre><code>Uncaught Error: oh no!\nStack Trace: \ntest.dart 17:3                                                runAsync\ntest.dart 13:28                                               scheduleAsync.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 129:26  registerUnaryCallback.&lt;fn&gt;.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 177:7   StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 175:7   StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 129:18  registerUnaryCallback.&lt;fn&gt;\ndart:async/zone.dart 717                                      _rootRunUnary\ndart:async/zone.dart 449                                      _ZoneDelegate.runUnary\ndart:async/zone.dart 654                                      _CustomizedZone.runUnary\ndart:async/future_impl.dart 488                               _Future._propagateToListeners.handleValueCallback\ndart:async/future_impl.dart 571                               _Future._propagateToListeners\ndart:async/future_impl.dart 317                               _Future._complete\ndart:async/future_impl.dart 44                                _SyncCompleter.complete\ndart:async/future.dart 219                                    Future.Future.delayed.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 119:52  registerCallback.&lt;fn&gt;\ndart:async/zone.dart 706                                      _rootRun\ndart:async/zone.dart 440                                      _ZoneDelegate.run\ndart:async/zone.dart 650                                      _CustomizedZone.run\ndart:async/zone.dart 561                                      _BaseZone.runGuarded\ndart:async/zone.dart 586                                      _BaseZone.bindCallback.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 119:52  registerCallback.&lt;fn&gt;\ndart:async/zone.dart 710                                      _rootRun\ndart:async/zone.dart 440                                      _ZoneDelegate.run\ndart:async/zone.dart 650                                      _CustomizedZone.run\ndart:async/zone.dart 561                                      _BaseZone.runGuarded\ndart:async/zone.dart 586                                      _BaseZone.bindCallback.&lt;fn&gt;\ndart:async-patch/timer_patch.dart 11                          _createTimer.&lt;fn&gt;\ndart:io/timer_impl.dart 292                                   _handleTimeout\ndart:isolate-patch/isolate_patch.dart 115                     _RawReceivePortImpl._handleMessage\n===== asynchronous gap ===========================\ndart:async/zone.dart 476                   _ZoneDelegate.registerUnaryCallback\ndart:async/zone.dart 666                   _CustomizedZone.registerUnaryCallback\ndart:async/future_impl.dart 164            _Future._Future._then\ndart:async/future_impl.dart 187            _Future.then\ntest.dart 13:12                            scheduleAsync\ntest.dart 7:18                             main.&lt;fn&gt;\ndart:async/zone.dart 710                   _rootRun\ndart:async/zone.dart 440                   _ZoneDelegate.run\ndart:async/zone.dart 650                   _CustomizedZone.run\ndart:async/zone.dart 944                   runZoned\npackage:stack_trace/src/chain.dart 93:20   Chain.capture\ntest.dart 6:16                             main\ndart:isolate-patch/isolate_patch.dart 216  _startIsolate.isolateStartHandler\ndart:isolate-patch/isolate_patch.dart 115  _RawReceivePortImpl._handleMessage\n</code></pre>\n<p>That's a lot of text! If you look closely, though, you can see that <code>main</code> is\nlisted in the first trace in the chain.</p>\n<p>Thankfully, you can call <code>Chain.terse</code> just like <code>Trace.terse</code> to get rid of all\nthe frames you don't care about. The terse version of the stack chain above is\nthis:</p>\n<pre><code>test.dart 17:3   runAsync\ntest.dart 13:28  scheduleAsync.&lt;fn&gt;\ndart:isolate     _RawReceivePortImpl._handleMessage\n===== asynchronous gap ===========================\ndart:async                                _Future.then\ntest.dart 13:12                           scheduleAsync\ntest.dart 7:18                            main.&lt;fn&gt;\npackage:stack_trace/src/chain.dart 93:20  Chain.capture\ntest.dart 6:16                            main\ndart:isolate                              _RawReceivePortImpl._handleMessage\n</code></pre>\n<p>That's a lot easier to understand!</p>\n<h3><code>Chain.track</code></h3>\n<p>For the most part <code>Chain.capture</code> will notice when an error is thrown and\nassociate the correct stack chain with it. However, there are some cases where\nexceptions won't be automatically detected: any <code>Future</code> constructor,\n<code>Completer.completeError</code>, <code>Stream.addError</code>, and libraries that use these such\nas <code>dart:io</code> and <code>dart:async</code>. For these, all you need to do is wrap the Future\nor Stream in a call to <code>Chain.track</code> and the errors will be tracked correctly.</p>"},{"packageName":"template_binding","name":"template_binding","qualifiedName":"template_binding/template_binding","preview":"<p>This library provides access to the Polymer project's\n<a href=\"http://www.polymer-project.org/docs/polymer/databinding.html\">Data Binding</a>\nFind more information at the\n<a href=\"https://www.dartlang.org/polymer-dart/\">Polymer.dart homepage</a>.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest","qualifiedName":"unittest/unittest","preview":"<p>Support for writing Dart unit tests.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-compact_vm_config","qualifiedName":"unittest/unittest-compact_vm_config","preview":"<p>A test configuration that generates a compact 1-line progress bar. The bar\nis updated in-place before and after each test is executed. If all tests\npass, only a couple of lines are printed in the terminal. If a test fails,\nthe failure is shown and the progress bar continues to be updated below it.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-html_config","qualifiedName":"unittest/unittest-html_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-html_enhanced_config","qualifiedName":"unittest/unittest-html_enhanced_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-html_individual_config","qualifiedName":"unittest/unittest-html_individual_config","preview":"<p>A unit test library for running groups of tests in a browser, instead of the\nentire test file. This is especially used for large tests files that have\nmany subtests, so we can mark groups as failing at a finer granularity than\nthe entire test file.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-vm_config","qualifiedName":"unittest/unittest-vm_config","preview":"<p>A simple unit test library for running tests on the VM.</p>","packageIntro":""},{"packageName":"utf","name":"utf","qualifiedName":"utf/utf","preview":"<p>Support for encoding and decoding Unicode characters in UTF-8, UTF-16, and\nUTF-32.</p>","packageIntro":"<p>A Unicode manipulation library for Dart.</p>\n<p>The utf package provides common operations for manipulating Unicode sequences.\nIn its initial form it is a copy of the <code>dart:utf</code> library before that was\ndeprecated.</p>"},{"packageName":"web_components","name":"web_components-polyfill","qualifiedName":"web_components/web_components-polyfill","preview":"<p>Dart APIs for interacting with the JavaScript Custom Elements polyfill.</p>","packageIntro":"<h1>Web Components</h1>\n<p>This package has the polyfills for\n<a href=\"http://www.polymer-project.org/platform/shadow-dom.html\">Shadow DOM</a>,\n<a href=\"http://www.polymer-project.org/platform/custom-elements.html\">Custom Elements</a>,\nand <a href=\"http://www.polymer-project.org/platform/html-imports.html\">HTML Imports</a>.</p>\n<p>These features exist in dart:html, for example\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-dom-html.Element@id_createShadowRoot\">Element.reateShadowRoot</a>\nand <a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-dom-html.HtmlDocument@id_register\">Document.register</a>.\nHowever those APIs are not supported on all browsers yet unless you\nload the polyfills, as indicated below.</p>\n<h2>Getting started</h2>\n<p>Include the polyfills in your HTML <code>&lt;head&gt;</code> to enable Shadow DOM:</p>\n<pre class=\"html\"><code>&lt;script src=\"packages/web_components/platform.js\"&gt;&lt;/script&gt;\n&lt;script src=\"packages/web_components/dart_support.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>You can also use an unminfied version for development:</p>\n<pre class=\"html\"><code>&lt;script src=\"packages/web_components/platform.concat.js\"&gt;&lt;/script&gt;\n&lt;script src=\"packages/web_components/dart_support.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>Because the Shadow DOM polyfill does extensive DOM patching, platform.js should\nbe included <strong>before</strong> other script tags. Be sure to include dart_support.js\ntoo, it is required for the Shadow DOM polyfill to work with\n<a href=\"https://www.dartlang.org/docs/dart-up-and-running/contents/ch04-tools-dart2js.html\">dart2js</a>.</p>\n<h2>Custom Elements</h2>\n<p>Custom Elements let authors define their own elements. Authors associate\nJavaScript or Dart code with custom tag names, and then use those custom tag\nnames as they would any standard tag.</p>\n<p>For example, after registering a special kind of button called <code>super-button</code>,\nuse the super button just like this:</p>\n<pre class=\"html\"><code>&lt;super-button&gt;&lt;/super-button&gt;\n</code></pre>\n<p>Custom elements are still elements. We can create, use, manipulate, and compose\nthem just as easily as any standard <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> today.</p>\n<p>See the Polymer <a href=\"http://www.polymer-project.org/platform/custom-elements.html\">Custom Elements page</a>\nfor more information.</p>\n<h2>Shadow DOM</h2>\n<p>Shadow DOM is designed to provide encapsulation by hiding DOM subtrees under\nshadow roots. It provides a method of establishing and maintaining functional\nboundaries between DOM trees and how these trees interact with each other within\na document, thus enabling better functional encapsulation within the DOM.</p>\n<p>See the Polymer <a href=\"http://www.polymer-project.org/platform/shadow-dom.html\">Shadow DOM page</a>\nfor more information.</p>\n<h2>Hacking on this package</h2>\n<p>To rebuild platform.js:</p>\n<pre class=\"bash\"><code># Make a directory like ~/src/polymer\nmkdir ~/src/polymer\ncd ~/src/polymer\ngit clone https://github.com/polymer/tools\n\n# Sync polymer repositories\n./tools/bin/pull-all-polymer.sh\n\n# If you don't have \"npm\", get it here: http://nodejs.org\ncd platform-dev\nnpm install\ngrunt minify audit\ncd build\n\n# Copy the build output to your Dart source tree\ncp build.log platform* ~/dart/dart/pkg/web_components/lib\n</code></pre>"},{"packageName":"yaml","name":"yaml","qualifiedName":"yaml/yaml","preview":"<p>A parser for <a href=\"http://www.yaml.org/\">YAML</a>.</p>","packageIntro":"<p>A parser for <a href=\"http://www.yaml.org/\">YAML</a>.</p>\n<p>Use <code>loadYaml</code> to load a single document, or <code>loadYamlStream</code> to load a\nstream of documents. For example:</p>\n<pre><code>import 'package:yaml/yaml.dart';\nmain() {\n  var doc = loadYaml(\"YAML: YAML Ain't Markup Language\");\n  print(doc['YAML']);\n}\n</code></pre>\n<p>This library currently doesn't support dumping to YAML. You should use\n<code>JSON.encode</code> from <code>dart:convert</code> instead:</p>\n<pre><code>import 'dart:convert';\nimport 'package:yaml/yaml.dart';\nmain() {\n  var doc = loadYaml(\"YAML: YAML Ain't Markup Language\");\n  print(JSON.encode(doc));\n}\n</code></pre>\n<p>The source code for this package is at <a href=\"http://code.google.com/p/dart\">http://code.google.com/p/dart</a>.\nPlease file issues at <a href=\"http://dartbug.com\">http://dartbug.com</a>. Other questions or comments can be\ndirected to the Dart mailing list at &lt;mailto:misc@dartlang.org>.</p>"}],"introduction":"<p>Welcome to the Dart API reference documentation,\ncovering the official Dart API libraries.\nSome of the most fundamental Dart libraries include:</p><ul><li>\n<p><a href=\"#dart:core\">dart:core</a>:\n  Core functionality such as strings, numbers, collections, errors,\n  dates, and URIs.</p></li><li>\n<p><a href=\"#dart:html\">dart:html</a>:\n  DOM manipulation for web apps.</p></li><li>\n<p><a href=\"#dart:io\">dart:io</a>:\n  I/O for command-line apps.</p></li></ul>\n<p>Except for dart:core, you must import a library before you can use it.\nHere's an example of importing dart:html, dart:math, and a\nthird popular library called\n<a href=\"http://www.dartlang.org/polymer-dart/\">polymer.dart</a>:</p>\n<pre><code>import 'dart:html';\nimport 'dart:math';\nimport 'package:polymer/polymer.dart';\n</code></pre>\n<p>Polymer.dart is an example of a library that isn't\nincluded in the Dart download,\nbut is easy to get and update using the <em>pub package manager</em>.\nFor information on finding, using, and publishing libraries (and more)\nwith pub, see\n<a href=\"http://pub.dartlang.org\">pub.dartlang.org</a>.</p>\n<p>The main site for learning and using Dart is\n<a href=\"http://www.dartlang.org\">www.dartlang.org</a>.\nCheck out these pages:</p><ul><li><a href=\"http://www.dartlang.org\">Dart homepage</a></li><li><a href=\"http://www.dartlang.org/docs/tutorials/\">Tutorials</a></li><li><a href=\"http://www.dartlang.org/docs/\">Programmer's Guide</a></li><li><a href=\"http://www.dartlang.org/samples/\">Samples</a></li><li><a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html\">A Tour of the Dart Libraries</a></li></ul>\n<p>This API reference is automatically generated from the source code in the\n<a href=\"https://code.google.com/p/dart/\">Dart project</a>.\nIf you'd like to contribute to this documentation, see\n<a href=\"https://code.google.com/p/dart/wiki/Contributing\">Contributing</a>\nand\n<a href=\"https://code.google.com/p/dart/wiki/WritingApiDocumentation\">Writing API Documentation</a>.</p>","filetype":"json","start-page":"bwu_datagrid"}